
spike_bitstorm_router.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001f28  00001fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad8  00800128  00800128  00001fe4  2**0
                  ALLOC
  3 .stab         00005ce8  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003d3d  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ba09  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  0000ba20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fc  00000000  00000000  0000baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000050  00000000  00000000  0000bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000172  00000000  00000000  0000bdec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_16>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_20>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      70:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__vector_28>
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      80:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      84:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000008c <BTLE_hex>:
      8c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000009d <__c.2256>:
      9d:	72 73 73 69 3d 25 64 20 62 61 74 74 3d 25 64 20     rssi=%d batt=%d 
      ad:	74 65 6d 70 3d 25 64 20 6d 61 63 3d 25 64 20 0d     temp=%d mac=%d .
      bd:	0a 00 00                                            ...

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e4       	ldi	r29, 0x40	; 64
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e8 e2       	ldi	r30, 0x28	; 40
      d4:	ff e1       	ldi	r31, 0x1F	; 31
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	2c e0       	ldi	r18, 0x0C	; 12
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a0 30       	cpi	r26, 0x00	; 0
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 1f 0b 	call	0x163e	; 0x163e <main>
      fa:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <wan_init>:
};
static uint8_t state = CONFIGURE;

void wan_init()
{
	wan_usart_init();
     102:	0e 94 1a 04 	call	0x834	; 0x834 <wan_usart_init>

	wan_driver_init();
     106:	0e 94 9a 02 	call	0x534	; 0x534 <wan_driver_init>
     10a:	08 95       	ret

0000010c <wan_set_cts>:
}

void wan_set_cts()
{
	//pd0 low
	PORTD &= ~_BV(PD0);
     10c:	58 98       	cbi	0x0b, 0	; 11
     10e:	08 95       	ret

00000110 <wan_get_rts>:
}

uint8_t wan_get_rts()
{
	// return logic high or low
	return (PIND & _BV(PD1));
     110:	89 b1       	in	r24, 0x09	; 9
}
     112:	82 70       	andi	r24, 0x02	; 2
     114:	08 95       	ret

00000116 <frame_tick>:
		}
	}
}

void frame_tick()
{
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
	while (wan_usart_data_available())
	{
		frame_buff[frame_index] = wan_usart_data_read();
		if (frame_index == 0)
		{
			frame_length = frame_buff[frame_index];
     11e:	0d e2       	ldi	r16, 0x2D	; 45
     120:	11 e0       	ldi	r17, 0x01	; 1
}

void frame_tick()
{
	// do some sanaty checks on buffer overruns
	while (wan_usart_data_available())
     122:	2e c0       	rjmp	.+92     	; 0x180 <frame_tick+0x6a>
	{
		frame_buff[frame_index] = wan_usart_data_read();
     124:	c0 91 2b 01 	lds	r28, 0x012B
     128:	d0 91 2c 01 	lds	r29, 0x012C
     12c:	0e 94 56 04 	call	0x8ac	; 0x8ac <wan_usart_data_read>
     130:	c3 5d       	subi	r28, 0xD3	; 211
     132:	de 4f       	sbci	r29, 0xFE	; 254
     134:	88 83       	st	Y, r24
		if (frame_index == 0)
     136:	80 91 2b 01 	lds	r24, 0x012B
     13a:	90 91 2c 01 	lds	r25, 0x012C
     13e:	00 97       	sbiw	r24, 0x00	; 0
     140:	41 f4       	brne	.+16     	; 0x152 <frame_tick+0x3c>
		{
			frame_length = frame_buff[frame_index];
     142:	f8 01       	movw	r30, r16
     144:	20 81       	ld	r18, Z
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	30 93 2a 01 	sts	0x012A, r19
     14c:	20 93 29 01 	sts	0x0129, r18
     150:	12 c0       	rjmp	.+36     	; 0x176 <frame_tick+0x60>
		} else if (frame_index >= frame_length)
     152:	20 91 29 01 	lds	r18, 0x0129
     156:	30 91 2a 01 	lds	r19, 0x012A
     15a:	82 17       	cp	r24, r18
     15c:	93 07       	cpc	r25, r19
     15e:	5c f0       	brlt	.+22     	; 0x176 <frame_tick+0x60>
		{
			frame_ready = true;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 7d 01 	sts	0x017D, r24
			while (wan_usart_data_available())
     166:	02 c0       	rjmp	.+4      	; 0x16c <frame_tick+0x56>
				wan_usart_data_read();
     168:	0e 94 56 04 	call	0x8ac	; 0x8ac <wan_usart_data_read>
		{
			frame_length = frame_buff[frame_index];
		} else if (frame_index >= frame_length)
		{
			frame_ready = true;
			while (wan_usart_data_available())
     16c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <wan_usart_data_available>
     170:	81 11       	cpse	r24, r1
     172:	fa cf       	rjmp	.-12     	; 0x168 <frame_tick+0x52>
     174:	09 c0       	rjmp	.+18     	; 0x188 <frame_tick+0x72>
				wan_usart_data_read();
			break;
		}

		frame_index++;
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	90 93 2c 01 	sts	0x012C, r25
     17c:	80 93 2b 01 	sts	0x012B, r24
}

void frame_tick()
{
	// do some sanaty checks on buffer overruns
	while (wan_usart_data_available())
     180:	0e 94 50 04 	call	0x8a0	; 0x8a0 <wan_usart_data_available>
     184:	81 11       	cpse	r24, r1
     186:	ce cf       	rjmp	.-100    	; 0x124 <frame_tick+0xe>
			break;
		}

		frame_index++;
	}
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	08 95       	ret

00000192 <build_app_msg>:

void build_app_msg(btle_msg_t *btle_msg, app_msg_t *msg)
{
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	dc 01       	movw	r26, r24
     198:	fb 01       	movw	r30, r22

	msg->messageType = 0x01;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 83       	st	Z, r24
	msg->nodeType = 0x01;
     19e:	81 83       	std	Z+1, r24	; 0x01
	msg->extAddr = btle_msg->mac;
     1a0:	11 96       	adiw	r26, 0x01	; 1
     1a2:	7c 91       	ld	r23, X
     1a4:	11 97       	sbiw	r26, 0x01	; 1
     1a6:	12 96       	adiw	r26, 0x02	; 2
     1a8:	6c 91       	ld	r22, X
     1aa:	12 97       	sbiw	r26, 0x02	; 2
     1ac:	13 96       	adiw	r26, 0x03	; 3
     1ae:	5c 91       	ld	r21, X
     1b0:	13 97       	sbiw	r26, 0x03	; 3
     1b2:	14 96       	adiw	r26, 0x04	; 4
     1b4:	4c 91       	ld	r20, X
     1b6:	14 97       	sbiw	r26, 0x04	; 4
     1b8:	15 96       	adiw	r26, 0x05	; 5
     1ba:	3c 91       	ld	r19, X
     1bc:	15 97       	sbiw	r26, 0x05	; 5
     1be:	16 96       	adiw	r26, 0x06	; 6
     1c0:	2c 91       	ld	r18, X
     1c2:	16 97       	sbiw	r26, 0x06	; 6
     1c4:	17 96       	adiw	r26, 0x07	; 7
     1c6:	9c 91       	ld	r25, X
     1c8:	17 97       	sbiw	r26, 0x07	; 7
     1ca:	18 96       	adiw	r26, 0x08	; 8
     1cc:	8c 91       	ld	r24, X
     1ce:	18 97       	sbiw	r26, 0x08	; 8
     1d0:	72 83       	std	Z+2, r23	; 0x02
     1d2:	63 83       	std	Z+3, r22	; 0x03
     1d4:	54 83       	std	Z+4, r21	; 0x04
     1d6:	45 83       	std	Z+5, r20	; 0x05
     1d8:	36 83       	std	Z+6, r19	; 0x06
     1da:	27 83       	std	Z+7, r18	; 0x07
     1dc:	90 87       	std	Z+8, r25	; 0x08
     1de:	81 87       	std	Z+9, r24	; 0x09
	msg->shortAddr = shared.mac & 0x0000FFFF;
     1e0:	90 91 f4 0b 	lds	r25, 0x0BF4
     1e4:	80 91 f5 0b 	lds	r24, 0x0BF5
     1e8:	d0 91 f6 0b 	lds	r29, 0x0BF6
     1ec:	c0 91 f7 0b 	lds	r28, 0x0BF7
     1f0:	70 91 f8 0b 	lds	r23, 0x0BF8
     1f4:	60 91 f9 0b 	lds	r22, 0x0BF9
     1f8:	50 91 fa 0b 	lds	r21, 0x0BFA
     1fc:	40 91 fb 0b 	lds	r20, 0x0BFB
     200:	92 87       	std	Z+10, r25	; 0x0a
     202:	83 87       	std	Z+11, r24	; 0x0b
	msg->routerAddr = shared.mac;
     204:	94 87       	std	Z+12, r25	; 0x0c
     206:	85 87       	std	Z+13, r24	; 0x0d
     208:	d6 87       	std	Z+14, r29	; 0x0e
     20a:	c7 87       	std	Z+15, r28	; 0x0f
     20c:	70 8b       	std	Z+16, r23	; 0x10
     20e:	61 8b       	std	Z+17, r22	; 0x11
     210:	52 8b       	std	Z+18, r21	; 0x12
     212:	43 8b       	std	Z+19, r20	; 0x13
	//softVersion;
	//channelMask;
	msg->panId = 0x1973; // need to set pan in zigbit
     214:	83 e7       	ldi	r24, 0x73	; 115
     216:	99 e1       	ldi	r25, 0x19	; 25
     218:	95 8b       	std	Z+21, r25	; 0x15
     21a:	84 8b       	std	Z+20, r24	; 0x14
	msg->workingChannel = 0x16;
     21c:	86 e1       	ldi	r24, 0x16	; 22
     21e:	86 8b       	std	Z+22, r24	; 0x16
	msg->parentShortAddr = 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	90 8f       	std	Z+24, r25	; 0x18
     226:	87 8b       	std	Z+23, r24	; 0x17
	msg->lqi = 0;
     228:	11 8e       	std	Z+25, r1	; 0x19

	msg->rssi = btle_msg->rssi;
     22a:	8c 91       	ld	r24, X
     22c:	82 8f       	std	Z+26, r24	; 0x1a
	msg->battery = btle_msg->batt;
     22e:	19 96       	adiw	r26, 0x09	; 9
     230:	4d 91       	ld	r20, X+
     232:	5c 91       	ld	r21, X
     234:	1a 97       	sbiw	r26, 0x0a	; 10
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	44 8f       	std	Z+28, r20	; 0x1c
     23c:	55 8f       	std	Z+29, r21	; 0x1d
     23e:	66 8f       	std	Z+30, r22	; 0x1e
     240:	77 8f       	std	Z+31, r23	; 0x1f
	msg->temperature = btle_msg->temp;
     242:	1b 96       	adiw	r26, 0x0b	; 11
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	1c 97       	sbiw	r26, 0x0c	; 12
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	80 a3       	std	Z+32, r24	; 0x20
     250:	91 a3       	std	Z+33, r25	; 0x21
     252:	a2 a3       	std	Z+34, r26	; 0x22
     254:	b3 a3       	std	Z+35, r27	; 0x23

}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <wan_tick>:
	// return logic high or low
	return (PIND & _BV(PD1));
}

void wan_tick()
{
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	cf 58       	subi	r28, 0x8F	; 143
     26e:	d1 09       	sbc	r29, r1
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
	//REVIEW: Implement state machine with WAITING_FOR_DATA, WAITING_FOR_RFBUSY, WAITING_FOR_RFREADY

	if (!config_finished)
     27a:	80 91 28 01 	lds	r24, 0x0128
     27e:	81 11       	cpse	r24, r1
     280:	04 c0       	rjmp	.+8      	; 0x28a <wan_tick+0x2e>
		config_finished = wan_config_tick();
     282:	0e 94 81 02 	call	0x502	; 0x502 <wan_config_tick>
     286:	80 93 28 01 	sts	0x0128, r24

	frame_tick();
     28a:	0e 94 8b 00 	call	0x116	; 0x116 <frame_tick>

	if (frame_ready)
     28e:	80 91 7d 01 	lds	r24, 0x017D
     292:	88 23       	and	r24, r24
     294:	61 f0       	breq	.+24     	; 0x2ae <wan_tick+0x52>
	{
		if (state == CONFIGURE)
		{
			config_finished = wan_config_received(frame_buff);
     296:	8d e2       	ldi	r24, 0x2D	; 45
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <wan_config_received>
     29e:	80 93 28 01 	sts	0x0128, r24

		}
		frame_ready = false;
     2a2:	10 92 7d 01 	sts	0x017D, r1
		frame_index = 0;
     2a6:	10 92 2c 01 	sts	0x012C, r1
     2aa:	10 92 2b 01 	sts	0x012B, r1
	}

	// check to see if we can send (network not busy)
	if ((PINB & (1 << PB0)))
     2ae:	18 9b       	sbis	0x03, 0	; 3
     2b0:	7a c0       	rjmp	.+244    	; 0x3a6 <wan_tick+0x14a>
	{
		PORTD |= _BV(PD7);
     2b2:	5f 9a       	sbi	0x0b, 7	; 11

		// check if we have data to send
		if (circular_queue_data_available())
     2b4:	0e 94 ac 06 	call	0xd58	; 0xd58 <circular_queue_data_available>
     2b8:	88 23       	and	r24, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <wan_tick+0x62>
     2bc:	74 c0       	rjmp	.+232    	; 0x3a6 <wan_tick+0x14a>
     2be:	8e 01       	movw	r16, r28
     2c0:	0a 58       	subi	r16, 0x8A	; 138
     2c2:	1f 4f       	sbci	r17, 0xFF	; 255
     2c4:	78 01       	movw	r14, r16
     2c6:	85 e1       	ldi	r24, 0x15	; 21
     2c8:	e8 0e       	add	r14, r24
     2ca:	f1 1c       	adc	r15, r1
		{
			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++)
			{
				temp[i] = circular_queue_data_read();
     2cc:	0e 94 b2 06 	call	0xd64	; 0xd64 <circular_queue_data_read>
     2d0:	f8 01       	movw	r30, r16
     2d2:	81 93       	st	Z+, r24
     2d4:	8f 01       	movw	r16, r30
		// check if we have data to send
		if (circular_queue_data_available())
		{
			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++)
     2d6:	ee 15       	cp	r30, r14
     2d8:	ff 05       	cpc	r31, r15
     2da:	c1 f7       	brne	.-16     	; 0x2cc <wan_tick+0x70>
			{
				app_msg_t app_msg;
				cmd_send_header_t cmd_header;
				uint8_t frame[80];

				build_app_msg(msg, &app_msg);
     2dc:	be 01       	movw	r22, r28
     2de:	6f 5a       	subi	r22, 0xAF	; 175
     2e0:	7f 4f       	sbci	r23, 0xFF	; 255
     2e2:	ce 01       	movw	r24, r28
     2e4:	8a 58       	subi	r24, 0x8A	; 138
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	0e 94 c9 00 	call	0x192	; 0x192 <build_app_msg>

				frame[0] = sizeof(cmd_header) + sizeof(app_msg) + 1;
     2ec:	8b e2       	ldi	r24, 0x2B	; 43
     2ee:	89 83       	std	Y+1, r24	; 0x01

				if (msg->type == MSG_TYPE_IN_PROX)
     2f0:	c6 57       	subi	r28, 0x76	; 118
     2f2:	df 4f       	sbci	r29, 0xFF	; 255
     2f4:	88 81       	ld	r24, Y
     2f6:	ca 58       	subi	r28, 0x8A	; 138
     2f8:	d0 40       	sbci	r29, 0x00	; 0
     2fa:	85 30       	cpi	r24, 0x05	; 5
     2fc:	21 f4       	brne	.+8      	; 0x306 <wan_tick+0xaa>
					app_msg.messageType = CMD_IN_PROX;
     2fe:	62 96       	adiw	r28, 0x12	; 18
     300:	8f af       	std	Y+63, r24	; 0x3f
     302:	62 97       	sbiw	r28, 0x12	; 18
     304:	30 c0       	rjmp	.+96     	; 0x366 <wan_tick+0x10a>
				else if (msg->type == MSG_TYPE_OUT_PROX)
     306:	86 30       	cpi	r24, 0x06	; 6
     308:	71 f5       	brne	.+92     	; 0x366 <wan_tick+0x10a>
					app_msg.messageType = CMD_OUT_PROX;
     30a:	62 96       	adiw	r28, 0x12	; 18
     30c:	8f af       	std	Y+63, r24	; 0x3f
     30e:	62 97       	sbiw	r28, 0x12	; 18
     310:	2a c0       	rjmp	.+84     	; 0x366 <wan_tick+0x10a>

				int frame_index = 1;
				// header
				for (int i = 0; i < sizeof(cmd_header); i++)
				{
					frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     312:	ab e8       	ldi	r26, 0x8B	; 139
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ac 0f       	add	r26, r28
     318:	bd 1f       	adc	r27, r29
     31a:	a2 0f       	add	r26, r18
     31c:	b3 1f       	adc	r27, r19
     31e:	2c 91       	ld	r18, X
     320:	21 93       	st	Z+, r18
				cmd_header.short_id = 0x0000;
				cmd_header.message_length = sizeof(app_msg);

				int frame_index = 1;
				// header
				for (int i = 0; i < sizeof(cmd_header); i++)
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	9c 01       	movw	r18, r24
     326:	85 30       	cpi	r24, 0x05	; 5
     328:	91 05       	cpc	r25, r1
     32a:	99 f7       	brne	.-26     	; 0x312 <wan_tick+0xb6>
     32c:	fe 01       	movw	r30, r28
     32e:	37 96       	adiw	r30, 0x07	; 7
				{
					frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
				}
				// message
				for (int i = 0; i < sizeof(app_msg_t); i++)
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
				cmd_header.short_id = 0x0000;
				cmd_header.message_length = sizeof(app_msg);

				int frame_index = 1;
				// header
				for (int i = 0; i < sizeof(cmd_header); i++)
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
					frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
				}
				// message
				for (int i = 0; i < sizeof(app_msg_t); i++)
				{
					frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
     338:	a1 e5       	ldi	r26, 0x51	; 81
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	ac 0f       	add	r26, r28
     33e:	bd 1f       	adc	r27, r29
     340:	a2 0f       	add	r26, r18
     342:	b3 1f       	adc	r27, r19
     344:	2c 91       	ld	r18, X
     346:	21 93       	st	Z+, r18
				for (int i = 0; i < sizeof(cmd_header); i++)
				{
					frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
				}
				// message
				for (int i = 0; i < sizeof(app_msg_t); i++)
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	9c 01       	movw	r18, r24
     34c:	85 32       	cpi	r24, 0x25	; 37
     34e:	91 05       	cpc	r25, r1
     350:	99 f7       	brne	.-26     	; 0x338 <wan_tick+0xdc>
				{
					frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
				}
				// checksum
				frame[frame_index++] = 0xFF;
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	8c a7       	std	Y+44, r24	; 0x2c

				PORTD &= ~_BV(PD7);
     356:	5f 98       	cbi	0x0b, 7	; 11
				// push out the lw-mesh radio
				wan_usart_transmit_bytes((char*) frame, frame_index);
     358:	6c e2       	ldi	r22, 0x2C	; 44
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	0e 94 77 04 	call	0x8ee	; 0x8ee <wan_usart_transmit_bytes>
     364:	20 c0       	rjmp	.+64     	; 0x3a6 <wan_tick+0x14a>
					app_msg.messageType = CMD_OUT_PROX;

#ifdef ZB_ACK
				cmd_header.command = CMD_ACK_SEND;
#else
				cmd_header.command = CMD_SEND;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	c5 57       	subi	r28, 0x75	; 117
     36a:	df 4f       	sbci	r29, 0xFF	; 255
     36c:	88 83       	st	Y, r24
     36e:	cb 58       	subi	r28, 0x8B	; 139
     370:	d0 40       	sbci	r29, 0x00	; 0
#endif
				cmd_header.pan_id = 0x1973;
     372:	83 e7       	ldi	r24, 0x73	; 115
     374:	99 e1       	ldi	r25, 0x19	; 25
     376:	c4 57       	subi	r28, 0x74	; 116
     378:	df 4f       	sbci	r29, 0xFF	; 255
     37a:	99 83       	std	Y+1, r25	; 0x01
     37c:	88 83       	st	Y, r24
     37e:	cc 58       	subi	r28, 0x8C	; 140
     380:	d0 40       	sbci	r29, 0x00	; 0
				cmd_header.short_id = 0x0000;
     382:	c2 57       	subi	r28, 0x72	; 114
     384:	df 4f       	sbci	r29, 0xFF	; 255
     386:	18 82       	st	Y, r1
     388:	ce 58       	subi	r28, 0x8E	; 142
     38a:	d0 40       	sbci	r29, 0x00	; 0
				cmd_header.message_length = sizeof(app_msg);
     38c:	85 e2       	ldi	r24, 0x25	; 37
     38e:	c1 57       	subi	r28, 0x71	; 113
     390:	df 4f       	sbci	r29, 0xFF	; 255
     392:	88 83       	st	Y, r24
     394:	cf 58       	subi	r28, 0x8F	; 143
     396:	d0 40       	sbci	r29, 0x00	; 0
     398:	fe 01       	movw	r30, r28
     39a:	32 96       	adiw	r30, 0x02	; 2

				int frame_index = 1;
				// header
				for (int i = 0; i < sizeof(cmd_header); i++)
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	b6 cf       	rjmp	.-148    	; 0x312 <wan_tick+0xb6>
				wan_usart_transmit_bytes((char*) frame, frame_index);

			}
		}
	}
}
     3a6:	c1 57       	subi	r28, 0x71	; 113
     3a8:	df 4f       	sbci	r29, 0xFF	; 255
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	08 95       	ret

000003c2 <wan_enqueue>:
}

queue_results_t wan_enqueue(wan_msg_t *msg)
{
	//queue_results_t result = queue_enqueue(&wan_queue, &msg, sizeof(wan_msg_t));
	queue_results_t result = queue_enqueue(&wan_queue, msg, sizeof(wan_msg_t));
     3c2:	4d e0       	ldi	r20, 0x0D	; 13
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	bc 01       	movw	r22, r24
     3c8:	8e ea       	ldi	r24, 0xAE	; 174
     3ca:	99 e0       	ldi	r25, 0x09	; 9
     3cc:	0e 94 dd 06 	call	0xdba	; 0xdba <queue_enqueue>

	return result;
}
     3d0:	08 95       	ret

000003d2 <wan_get_device_address>:
	SEND_MAC_REQ, CONFIG_NTW_REQ, AWAITING_RESP, FINISHED
};
uint8_t state = SEND_MAC_REQ;

void wan_get_device_address()
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	2a 97       	sbiw	r28, 0x0a	; 10
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
	cmd_header_t cmd_header;
	uint8_t frame[10];
	frame[0] = sizeof(cmd_header) + 1;
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	89 83       	std	Y+1, r24	; 0x01
	cmd_header.command = CMD_GET_ADDRESS;
     3ea:	84 e0       	ldi	r24, 0x04	; 4
	int frame_index = 1;
	// header
	for (int i = 0; i < sizeof(cmd_header); i++)
	{
		frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     3ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	// checksum
	frame[frame_index++] = 0xFF;
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	8b 83       	std	Y+3, r24	; 0x03

	wan_usart_transmit_bytes((char*) frame, frame_index);
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 77 04 	call	0x8ee	; 0x8ee <wan_usart_transmit_bytes>
}
     3fe:	2a 96       	adiw	r28, 0x0a	; 10
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <wan_config_network>:

void wan_config_network()
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	60 97       	sbiw	r28, 0x10	; 16
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
	cmd_config_ntw_t config_ntw;

	config_ntw.command = CMD_CONFIG_NETWORK;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	89 83       	std	Y+1, r24	; 0x01
	config_ntw.pan_id = 0x1973;
     428:	83 e7       	ldi	r24, 0x73	; 115
     42a:	99 e1       	ldi	r25, 0x19	; 25
     42c:	9b 83       	std	Y+3, r25	; 0x03
     42e:	8a 83       	std	Y+2, r24	; 0x02
	config_ntw.short_id = shared.mac & 0x0000FFFF;
     430:	80 91 f4 0b 	lds	r24, 0x0BF4
     434:	90 91 f5 0b 	lds	r25, 0x0BF5
     438:	9d 83       	std	Y+5, r25	; 0x05
     43a:	8c 83       	std	Y+4, r24	; 0x04
	config_ntw.channel = 0x16;
     43c:	86 e1       	ldi	r24, 0x16	; 22
     43e:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message
     440:	87 e0       	ldi	r24, 0x07	; 7
     442:	8f 83       	std	Y+7, r24	; 0x07
     444:	fe 01       	movw	r30, r28
     446:	38 96       	adiw	r30, 0x08	; 8

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
     450:	a1 e0       	ldi	r26, 0x01	; 1
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	ac 0f       	add	r26, r28
     456:	bd 1f       	adc	r27, r29
     458:	a2 0f       	add	r26, r18
     45a:	b3 1f       	adc	r27, r19
     45c:	2c 91       	ld	r18, X
     45e:	21 93       	st	Z+, r18
	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	9c 01       	movw	r18, r24
     464:	86 30       	cpi	r24, 0x06	; 6
     466:	91 05       	cpc	r25, r1
     468:	99 f7       	brne	.-26     	; 0x450 <wan_config_network+0x40>
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
	}
	// checksum
	frame[frame_index++] = 0xFF;
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	8e 87       	std	Y+14, r24	; 0x0e

	wan_usart_transmit_bytes((char*) frame, frame_index);
     46e:	68 e0       	ldi	r22, 0x08	; 8
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	ce 01       	movw	r24, r28
     474:	07 96       	adiw	r24, 0x07	; 7
     476:	0e 94 77 04 	call	0x8ee	; 0x8ee <wan_usart_transmit_bytes>
}
     47a:	60 96       	adiw	r28, 0x10	; 16
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <config_mac_resp>:

	return (state == FINISHED ? true : false);
}

void config_mac_resp(mac_resp_t * resp)
{
     48c:	fc 01       	movw	r30, r24
	shared.mac = resp->wan_device_address;
     48e:	71 81       	ldd	r23, Z+1	; 0x01
     490:	62 81       	ldd	r22, Z+2	; 0x02
     492:	53 81       	ldd	r21, Z+3	; 0x03
     494:	44 81       	ldd	r20, Z+4	; 0x04
     496:	35 81       	ldd	r19, Z+5	; 0x05
     498:	26 81       	ldd	r18, Z+6	; 0x06
     49a:	97 81       	ldd	r25, Z+7	; 0x07
     49c:	80 85       	ldd	r24, Z+8	; 0x08
     49e:	70 93 f4 0b 	sts	0x0BF4, r23
     4a2:	60 93 f5 0b 	sts	0x0BF5, r22
     4a6:	50 93 f6 0b 	sts	0x0BF6, r21
     4aa:	40 93 f7 0b 	sts	0x0BF7, r20
     4ae:	30 93 f8 0b 	sts	0x0BF8, r19
     4b2:	20 93 f9 0b 	sts	0x0BF9, r18
     4b6:	90 93 fa 0b 	sts	0x0BFA, r25
     4ba:	80 93 fb 0b 	sts	0x0BFB, r24
	state = CONFIG_NTW_REQ;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 7e 01 	sts	0x017E, r24
     4c4:	08 95       	ret

000004c6 <wan_config_received>:
	wan_usart_transmit_bytes((char*) frame, frame_index);
}

bool wan_config_received(uint8_t * buff)
{
	resp_type = buff[1];
     4c6:	fc 01       	movw	r30, r24
     4c8:	21 81       	ldd	r18, Z+1	; 0x01
     4ca:	20 93 7f 01 	sts	0x017F, r18
	switch (resp_type)
     4ce:	23 30       	cpi	r18, 0x03	; 3
     4d0:	31 f0       	breq	.+12     	; 0x4de <wan_config_received+0x18>
     4d2:	24 30       	cpi	r18, 0x04	; 4
     4d4:	39 f4       	brne	.+14     	; 0x4e4 <wan_config_received+0x1e>
	{
	case resp_type_address:
		config_mac_resp((mac_resp_t *) &buff[1]);
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	0e 94 46 02 	call	0x48c	; 0x48c <config_mac_resp>
		break;
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <wan_config_received+0x1e>
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	80 93 7e 01 	sts	0x017E, r24
	case resp_type_config_ntw:
		config_ntw_resp((config_ntw_resp_t *) &buff[1]);
		break;
	}

	return (state == FINISHED ? true : false);
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 91 7e 01 	lds	r25, 0x017E
     4ea:	93 30       	cpi	r25, 0x03	; 3
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <wan_config_received+0x2a>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
}
     4f0:	08 95       	ret

000004f2 <config_ntw_resp>:
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	80 93 7e 01 	sts	0x017E, r24
     4f8:	08 95       	ret

000004fa <no_ack_status_resp>:
}

void no_ack_status_resp(no_ack_status_resp_t * resp)
{
	state = FINISHED;
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	80 93 7e 01 	sts	0x017E, r24
     500:	08 95       	ret

00000502 <wan_config_tick>:
}

bool wan_config_tick()
{
	switch (state)
     502:	80 91 7e 01 	lds	r24, 0x017E
     506:	88 23       	and	r24, r24
     508:	19 f0       	breq	.+6      	; 0x510 <wan_config_tick+0xe>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	39 f0       	breq	.+14     	; 0x51c <wan_config_tick+0x1a>
     50e:	0b c0       	rjmp	.+22     	; 0x526 <wan_config_tick+0x24>
	{
	case SEND_MAC_REQ:
		wan_get_device_address();
     510:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <wan_get_device_address>
		state = AWAITING_RESP;
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	80 93 7e 01 	sts	0x017E, r24
		break;
     51a:	05 c0       	rjmp	.+10     	; 0x526 <wan_config_tick+0x24>
	case CONFIG_NTW_REQ:
		wan_config_network();
     51c:	0e 94 08 02 	call	0x410	; 0x410 <wan_config_network>
		state = AWAITING_RESP;
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	80 93 7e 01 	sts	0x017E, r24
	}
	return (state == FINISHED ? true : false);
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 91 7e 01 	lds	r25, 0x017E
     52c:	93 30       	cpi	r25, 0x03	; 3
     52e:	09 f0       	breq	.+2      	; 0x532 <wan_config_tick+0x30>
     530:	80 e0       	ldi	r24, 0x00	; 0
}
     532:	08 95       	ret

00000534 <wan_driver_init>:
	}
}

static void init_buffer()
{
	wan_line_index = 0;
     534:	10 92 81 01 	sts	0x0181, r1
     538:	10 92 80 01 	sts	0x0180, r1
	memset(wan_line_buffer, '\0', sizeof(wan_line_buffer));
     53c:	81 e8       	ldi	r24, 0x81	; 129
     53e:	e3 ec       	ldi	r30, 0xC3	; 195
     540:	f9 e0       	ldi	r31, 0x09	; 9
     542:	df 01       	movw	r26, r30
     544:	98 2f       	mov	r25, r24
     546:	1d 92       	st	X+, r1
     548:	9a 95       	dec	r25
     54a:	e9 f7       	brne	.-6      	; 0x546 <wan_driver_init+0x12>
}

static void init_lines()
{
	memset(wan_lines, '\0', sizeof(wan_lines));
     54c:	e4 e4       	ldi	r30, 0x44	; 68
     54e:	fa e0       	ldi	r31, 0x0A	; 10
     550:	df 01       	movw	r26, r30
     552:	1d 92       	st	X+, r1
     554:	8a 95       	dec	r24
     556:	e9 f7       	brne	.-6      	; 0x552 <wan_driver_init+0x1e>
     558:	08 95       	ret

0000055a <wan_driver_tick>:
	init_lines();
}

void wan_driver_tick()
{
	if (wan_usart_data_available())
     55a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <wan_usart_data_available>
     55e:	08 95       	ret

00000560 <clock_init>:
//volatile clock_time_t future;

void clock_init()
{
	// timer ctc mode
		TCCR0A |= _BV(WGM01);
     560:	84 b5       	in	r24, 0x24	; 36
     562:	82 60       	ori	r24, 0x02	; 2
     564:	84 bd       	out	0x24, r24	; 36

		// F_CPU/64/1000 = 125
		OCR0A = F_CPU/64/1000;
     566:	8d e7       	ldi	r24, 0x7D	; 125
     568:	87 bd       	out	0x27, r24	; 39
		// Enable timer set prescalar to 64
		TCCR0B |= _BV(CS01) | _BV(CS00);
     56a:	85 b5       	in	r24, 0x25	; 37
     56c:	83 60       	ori	r24, 0x03	; 3
     56e:	85 bd       	out	0x25, r24	; 37

		// Enable Output Compare Match A
		TIMSK0 = _BV(OCIE0A);
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	80 93 6e 00 	sts	0x006E, r24
     576:	08 95       	ret

00000578 <clock_time>:
}

clock_time_t clock_time()
{
	return clock_millis;
     578:	60 91 c5 0a 	lds	r22, 0x0AC5
     57c:	70 91 c6 0a 	lds	r23, 0x0AC6
     580:	80 91 c7 0a 	lds	r24, 0x0AC7
     584:	90 91 c8 0a 	lds	r25, 0x0AC8
}
     588:	08 95       	ret

0000058a <delay_millis>:

void delay_millis(clock_time_t millis)
{
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     58e:	00 91 c5 0a 	lds	r16, 0x0AC5
     592:	10 91 c6 0a 	lds	r17, 0x0AC6
     596:	20 91 c7 0a 	lds	r18, 0x0AC7
     59a:	30 91 c8 0a 	lds	r19, 0x0AC8
}

void delay_millis(clock_time_t millis)
{
	clock_time_t future = clock_time() + millis;
     59e:	ab 01       	movw	r20, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	40 0f       	add	r20, r16
     5a4:	51 1f       	adc	r21, r17
     5a6:	62 1f       	adc	r22, r18
     5a8:	73 1f       	adc	r23, r19
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     5aa:	80 91 c5 0a 	lds	r24, 0x0AC5
     5ae:	90 91 c6 0a 	lds	r25, 0x0AC6
     5b2:	a0 91 c7 0a 	lds	r26, 0x0AC7
     5b6:	b0 91 c8 0a 	lds	r27, 0x0AC8
{
	clock_time_t future = clock_time() + millis;

	while(true)
	{
		if(clock_time() > future)
     5ba:	48 17       	cp	r20, r24
     5bc:	59 07       	cpc	r21, r25
     5be:	6a 07       	cpc	r22, r26
     5c0:	7b 07       	cpc	r23, r27
     5c2:	98 f7       	brcc	.-26     	; 0x5aa <delay_millis+0x20>
		{
			break;
		}
	}
}
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	08 95       	ret

000005ca <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
     5ca:	1f 92       	push	r1
     5cc:	0f 92       	push	r0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
	clock_millis++;
     5dc:	80 91 c5 0a 	lds	r24, 0x0AC5
     5e0:	90 91 c6 0a 	lds	r25, 0x0AC6
     5e4:	a0 91 c7 0a 	lds	r26, 0x0AC7
     5e8:	b0 91 c8 0a 	lds	r27, 0x0AC8
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	a1 1d       	adc	r26, r1
     5f0:	b1 1d       	adc	r27, r1
     5f2:	80 93 c5 0a 	sts	0x0AC5, r24
     5f6:	90 93 c6 0a 	sts	0x0AC6, r25
     5fa:	a0 93 c7 0a 	sts	0x0AC7, r26
     5fe:	b0 93 c8 0a 	sts	0x0AC8, r27
}
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <isr_tick>:

void isr_tick()
{
	clock_millis++;
     614:	80 91 c5 0a 	lds	r24, 0x0AC5
     618:	90 91 c6 0a 	lds	r25, 0x0AC6
     61c:	a0 91 c7 0a 	lds	r26, 0x0AC7
     620:	b0 91 c8 0a 	lds	r27, 0x0AC8
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	a1 1d       	adc	r26, r1
     628:	b1 1d       	adc	r27, r1
     62a:	80 93 c5 0a 	sts	0x0AC5, r24
     62e:	90 93 c6 0a 	sts	0x0AC6, r25
     632:	a0 93 c7 0a 	sts	0x0AC7, r26
     636:	b0 93 c8 0a 	sts	0x0AC8, r27
     63a:	08 95       	ret

0000063c <config_init>:

config_t config;

void config_init()
{
	config.var_bool = false;
     63c:	10 92 c9 0a 	sts	0x0AC9, r1
	config.var_int8_t = 0;
     640:	10 92 d0 0a 	sts	0x0AD0, r1
	config.var_int16_t = 0;
     644:	10 92 cf 0a 	sts	0x0ACF, r1
     648:	10 92 ce 0a 	sts	0x0ACE, r1
	config.var_int32_t = 0;
     64c:	10 92 ca 0a 	sts	0x0ACA, r1
     650:	10 92 cb 0a 	sts	0x0ACB, r1
     654:	10 92 cc 0a 	sts	0x0ACC, r1
     658:	10 92 cd 0a 	sts	0x0ACD, r1
	config.var_uint8_t = 0;
     65c:	10 92 d7 0a 	sts	0x0AD7, r1
	config.var_uint16_t = 0;
     660:	10 92 d6 0a 	sts	0x0AD6, r1
     664:	10 92 d5 0a 	sts	0x0AD5, r1
	config.var_uint32_t = 0;
     668:	10 92 d1 0a 	sts	0x0AD1, r1
     66c:	10 92 d2 0a 	sts	0x0AD2, r1
     670:	10 92 d3 0a 	sts	0x0AD3, r1
     674:	10 92 d4 0a 	sts	0x0AD4, r1
     678:	08 95       	ret

0000067a <load_config>:

}


void load_config()
{
     67a:	08 95       	ret

0000067c <write_config>:
}

void write_config()
{
     67c:	08 95       	ret

0000067e <_btle_set_rx_cb>:

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     67e:	90 93 d9 0a 	sts	0x0AD9, r25
     682:	80 93 d8 0a 	sts	0x0AD8, r24
     686:	08 95       	ret

00000688 <btle_usart_init>:
}

void btle_usart_init()
{
	UBRR1H = UBRRH_VALUE;
     688:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     68c:	8c e0       	ldi	r24, 0x0C	; 12
     68e:	80 93 cc 00 	sts	0x00CC, r24

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     692:	e9 ec       	ldi	r30, 0xC9	; 201
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	88 68       	ori	r24, 0x88	; 136
     69a:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     69c:	80 81       	ld	r24, Z
     69e:	88 61       	ori	r24, 0x18	; 24
     6a0:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     6a2:	ea ec       	ldi	r30, 0xCA	; 202
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	86 60       	ori	r24, 0x06	; 6
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <btle_usart_init_cb>:
}

// not in use at this time
void btle_usart_init_cb(btle_rx_cb_t cb)
{
	UBRR1H = UBRRH_VALUE;
     6ae:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     6b2:	2c e0       	ldi	r18, 0x0C	; 12
     6b4:	20 93 cc 00 	sts	0x00CC, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     6b8:	e9 ec       	ldi	r30, 0xC9	; 201
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	20 81       	ld	r18, Z
     6be:	28 68       	ori	r18, 0x88	; 136
     6c0:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     6c2:	20 81       	ld	r18, Z
     6c4:	28 61       	ori	r18, 0x18	; 24
     6c6:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     6c8:	ea ec       	ldi	r30, 0xCA	; 202
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	20 81       	ld	r18, Z
     6ce:	26 60       	ori	r18, 0x06	; 6
     6d0:	20 83       	st	Z, r18

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     6d2:	90 93 d9 0a 	sts	0x0AD9, r25
     6d6:	80 93 d8 0a 	sts	0x0AD8, r24
     6da:	08 95       	ret

000006dc <btle_usart_put_char>:
	_btle_set_rx_cb(cb);
}

void btle_usart_put_char(unsigned char c)
{
	int i = (unsigned int)(btle_buffer.head + 1) % BTLE_RX_BUFFER_SIZE;
     6dc:	40 91 85 03 	lds	r20, 0x0385
     6e0:	50 91 86 03 	lds	r21, 0x0386
     6e4:	9a 01       	movw	r18, r20
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != btle_buffer.tail) {
     6ec:	60 91 87 03 	lds	r22, 0x0387
     6f0:	70 91 88 03 	lds	r23, 0x0388
     6f4:	62 17       	cp	r22, r18
     6f6:	73 07       	cpc	r23, r19
     6f8:	41 f0       	breq	.+16     	; 0x70a <btle_usart_put_char+0x2e>
		btle_buffer.buffer[btle_buffer.head] = c;
     6fa:	fa 01       	movw	r30, r20
     6fc:	eb 57       	subi	r30, 0x7B	; 123
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	80 83       	st	Z, r24
		btle_buffer.head = i;
     702:	30 93 86 03 	sts	0x0386, r19
     706:	20 93 85 03 	sts	0x0385, r18
     70a:	08 95       	ret

0000070c <btle_usart_clear_buffer>:
}


void btle_usart_clear_buffer()
{
	memset(&btle_buffer, 0, sizeof(BTLE_BUFFER));
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	e5 e8       	ldi	r30, 0x85	; 133
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	df 01       	movw	r26, r30
     716:	9c 01       	movw	r18, r24
     718:	1d 92       	st	X+, r1
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	30 40       	sbci	r19, 0x00	; 0
     71e:	e1 f7       	brne	.-8      	; 0x718 <btle_usart_clear_buffer+0xc>
     720:	08 95       	ret

00000722 <btle_usart_data_available>:
}

uint8_t btle_usart_data_available()
{
	return (uint8_t)(BTLE_RX_BUFFER_SIZE + btle_buffer.head - btle_buffer.tail) % BTLE_RX_BUFFER_SIZE;
     722:	80 91 85 03 	lds	r24, 0x0385
     726:	90 91 87 03 	lds	r25, 0x0387
}
     72a:	89 1b       	sub	r24, r25
     72c:	08 95       	ret

0000072e <btle_usart_data_read>:

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
     72e:	20 91 87 03 	lds	r18, 0x0387
     732:	30 91 88 03 	lds	r19, 0x0388
     736:	80 91 85 03 	lds	r24, 0x0385
     73a:	90 91 86 03 	lds	r25, 0x0386
     73e:	82 17       	cp	r24, r18
     740:	93 07       	cpc	r25, r19
     742:	61 f0       	breq	.+24     	; 0x75c <btle_usart_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
     744:	f9 01       	movw	r30, r18
     746:	eb 57       	subi	r30, 0x7B	; 123
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	80 81       	ld	r24, Z
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	31 70       	andi	r19, 0x01	; 1
     752:	30 93 88 03 	sts	0x0388, r19
     756:	20 93 87 03 	sts	0x0387, r18
		return c;
     75a:	08 95       	ret

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
		return -1;
     75c:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
		return c;
	}
}
     75e:	08 95       	ret

00000760 <btle_usart_transmit>:

void btle_usart_transmit(uint8_t data )
{
	while (!( UCSR1A & (1<<UDRE1)));
     760:	e8 ec       	ldi	r30, 0xC8	; 200
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	90 81       	ld	r25, Z
     766:	95 ff       	sbrs	r25, 5
     768:	fd cf       	rjmp	.-6      	; 0x764 <btle_usart_transmit+0x4>
	UDR1 = data;
     76a:	80 93 ce 00 	sts	0x00CE, r24
     76e:	08 95       	ret

00000770 <btle_usart_transmit_bytes>:
}

void btle_usart_transmit_bytes(char data[], int size)
{
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
	for (int i=0;i<size;i++)
     774:	16 16       	cp	r1, r22
     776:	17 06       	cpc	r1, r23
     778:	7c f4       	brge	.+30     	; 0x798 <btle_usart_transmit_bytes+0x28>
     77a:	dc 01       	movw	r26, r24
     77c:	86 0f       	add	r24, r22
     77e:	97 1f       	adc	r25, r23
	{
		while (!( UCSR1A & (1<<UDRE1)));
     780:	e8 ec       	ldi	r30, 0xC8	; 200
     782:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
     784:	ce ec       	ldi	r28, 0xCE	; 206
     786:	d0 e0       	ldi	r29, 0x00	; 0

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
	{
		while (!( UCSR1A & (1<<UDRE1)));
     788:	20 81       	ld	r18, Z
     78a:	25 ff       	sbrs	r18, 5
     78c:	fd cf       	rjmp	.-6      	; 0x788 <btle_usart_transmit_bytes+0x18>
		UDR1 = data[i];
     78e:	2d 91       	ld	r18, X+
     790:	28 83       	st	Y, r18
	UDR1 = data;
}

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
     792:	a8 17       	cp	r26, r24
     794:	b9 07       	cpc	r27, r25
     796:	c1 f7       	brne	.-16     	; 0x788 <btle_usart_transmit_bytes+0x18>
	{
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <btle_usart_transmit_string>:

void btle_usart_transmit_string(char * data)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
	unsigned char c = *data;
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 81       	ld	r18, Z

	while (c) {
     7a6:	22 23       	and	r18, r18
     7a8:	69 f0       	breq	.+26     	; 0x7c4 <btle_usart_transmit_string+0x26>
     7aa:	dc 01       	movw	r26, r24
     7ac:	11 96       	adiw	r26, 0x01	; 1
		while (!( UCSR1A & (1<<UDRE1)));
     7ae:	e8 ec       	ldi	r30, 0xC8	; 200
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = c;
     7b2:	ce ec       	ldi	r28, 0xCE	; 206
     7b4:	d0 e0       	ldi	r29, 0x00	; 0
void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
		while (!( UCSR1A & (1<<UDRE1)));
     7b6:	80 81       	ld	r24, Z
     7b8:	85 ff       	sbrs	r24, 5
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <btle_usart_transmit_string+0x18>
		UDR1 = c;
     7bc:	28 83       	st	Y, r18
		c = *(++data);
     7be:	2d 91       	ld	r18, X+

void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
     7c0:	21 11       	cpse	r18, r1
     7c2:	f9 cf       	rjmp	.-14     	; 0x7b6 <btle_usart_transmit_string+0x18>
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = c;
		c = *(++data);
	}
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <__vector_28>:

ISR(BTLE_ISR_VECTOR)
{
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	0b b6       	in	r0, 0x3b	; 59
     7d6:	0f 92       	push	r0
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	cf 93       	push	r28
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
	char data = UDR1;
     7f2:	c0 91 ce 00 	lds	r28, 0x00CE
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	btle_usart_put_char(data);
     7f6:	8c 2f       	mov	r24, r28
     7f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <btle_usart_put_char>

	// debug callback to main program
	if (btle_rx_cb != 0)
     7fc:	e0 91 d8 0a 	lds	r30, 0x0AD8
     800:	f0 91 d9 0a 	lds	r31, 0x0AD9
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	11 f0       	breq	.+4      	; 0x80c <__vector_28+0x42>
	{
		btle_rx_cb(data);
     808:	8c 2f       	mov	r24, r28
     80a:	09 95       	icall
	}
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	cf 91       	pop	r28
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0b be       	out	0x3b, r0	; 59
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <wan_usart_init>:

WAN_BUFFER wan_buffer = { { 0 }, 0, 0 };

void wan_usart_init()
{
	UBRR0H = UBRRH_VALUE;
     834:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     838:	8c e0       	ldi	r24, 0x0C	; 12
     83a:	80 93 c4 00 	sts	0x00C4, r24

	// Enble receiver and transmitter
	UCSR0B |= (1 << RXCIE0) | (1 << TXEN0);
     83e:	e1 ec       	ldi	r30, 0xC1	; 193
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	88 68       	ori	r24, 0x88	; 136
     846:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     848:	80 81       	ld	r24, Z
     84a:	88 61       	ori	r24, 0x18	; 24
     84c:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     84e:	e2 ec       	ldi	r30, 0xC2	; 194
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	86 60       	ori	r24, 0x06	; 6
     856:	80 83       	st	Z, r24
     858:	08 95       	ret

0000085a <wan_usart_put_char>:
}

void wan_usart_put_char(unsigned char c)
{
	int i = (unsigned int) (wan_buffer.head + 1) % WAN_RX_BUFFER_SIZE;
     85a:	40 91 89 05 	lds	r20, 0x0589
     85e:	50 91 8a 05 	lds	r21, 0x058A
     862:	9a 01       	movw	r18, r20
     864:	2f 5f       	subi	r18, 0xFF	; 255
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != wan_buffer.tail)
     86a:	60 91 8b 05 	lds	r22, 0x058B
     86e:	70 91 8c 05 	lds	r23, 0x058C
     872:	62 17       	cp	r22, r18
     874:	73 07       	cpc	r23, r19
     876:	41 f0       	breq	.+16     	; 0x888 <wan_usart_put_char+0x2e>
	{
		wan_buffer.buffer[wan_buffer.head] = c;
     878:	fa 01       	movw	r30, r20
     87a:	e7 57       	subi	r30, 0x77	; 119
     87c:	fc 4f       	sbci	r31, 0xFC	; 252
     87e:	80 83       	st	Z, r24
		wan_buffer.head = i;
     880:	30 93 8a 05 	sts	0x058A, r19
     884:	20 93 89 05 	sts	0x0589, r18
     888:	08 95       	ret

0000088a <wan_usart_clear_buffer>:
	}
}

void wan_usart_clear_buffer()
{
	memset(&wan_buffer, 0, sizeof(WAN_BUFFER));
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	e9 e8       	ldi	r30, 0x89	; 137
     890:	f3 e0       	ldi	r31, 0x03	; 3
     892:	df 01       	movw	r26, r30
     894:	9c 01       	movw	r18, r24
     896:	1d 92       	st	X+, r1
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	30 40       	sbci	r19, 0x00	; 0
     89c:	e1 f7       	brne	.-8      	; 0x896 <wan_usart_clear_buffer+0xc>
     89e:	08 95       	ret

000008a0 <wan_usart_data_available>:
}

uint8_t wan_usart_data_available(void)
{
	return (uint8_t) (WAN_RX_BUFFER_SIZE + wan_buffer.head - wan_buffer.tail)
     8a0:	80 91 89 05 	lds	r24, 0x0589
     8a4:	90 91 8b 05 	lds	r25, 0x058B
			% WAN_RX_BUFFER_SIZE;
}
     8a8:	89 1b       	sub	r24, r25
     8aa:	08 95       	ret

000008ac <wan_usart_data_read>:

uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
     8ac:	20 91 8b 05 	lds	r18, 0x058B
     8b0:	30 91 8c 05 	lds	r19, 0x058C
     8b4:	80 91 89 05 	lds	r24, 0x0589
     8b8:	90 91 8a 05 	lds	r25, 0x058A
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	61 f0       	breq	.+24     	; 0x8da <wan_usart_data_read+0x2e>
	{
		return -1;
	} else
	{
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
     8c2:	f9 01       	movw	r30, r18
     8c4:	e7 57       	subi	r30, 0x77	; 119
     8c6:	fc 4f       	sbci	r31, 0xFC	; 252
     8c8:	80 81       	ld	r24, Z
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
     8ca:	2f 5f       	subi	r18, 0xFF	; 255
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	31 70       	andi	r19, 0x01	; 1
     8d0:	30 93 8c 05 	sts	0x058C, r19
     8d4:	20 93 8b 05 	sts	0x058B, r18
				% WAN_RX_BUFFER_SIZE;
		return c;
     8d8:	08 95       	ret
uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
	{
		return -1;
     8da:	8f ef       	ldi	r24, 0xFF	; 255
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
				% WAN_RX_BUFFER_SIZE;
		return c;
	}
}
     8dc:	08 95       	ret

000008de <wan_usart_transmit>:

void wan_usart_transmit(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
     8de:	e0 ec       	ldi	r30, 0xC0	; 192
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	90 81       	ld	r25, Z
     8e4:	95 ff       	sbrs	r25, 5
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <wan_usart_transmit+0x4>
		;
	UDR0 = data;
     8e8:	80 93 c6 00 	sts	0x00C6, r24
     8ec:	08 95       	ret

000008ee <wan_usart_transmit_bytes>:
}

void wan_usart_transmit_bytes(char data[], int size)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	for (int i = 0; i < size; i++)
     8f2:	16 16       	cp	r1, r22
     8f4:	17 06       	cpc	r1, r23
     8f6:	7c f4       	brge	.+30     	; 0x916 <wan_usart_transmit_bytes+0x28>
     8f8:	dc 01       	movw	r26, r24
     8fa:	86 0f       	add	r24, r22
     8fc:	97 1f       	adc	r25, r23
	{
		while (!(UCSR0A & (1 << UDRE0)))
     8fe:	e0 ec       	ldi	r30, 0xC0	; 192
     900:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = data[i];
     902:	c6 ec       	ldi	r28, 0xC6	; 198
     904:	d0 e0       	ldi	r29, 0x00	; 0

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     906:	20 81       	ld	r18, Z
     908:	25 ff       	sbrs	r18, 5
     90a:	fd cf       	rjmp	.-6      	; 0x906 <wan_usart_transmit_bytes+0x18>
			;
		UDR0 = data[i];
     90c:	2d 91       	ld	r18, X+
     90e:	28 83       	st	Y, r18
	UDR0 = data;
}

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
     910:	a8 17       	cp	r26, r24
     912:	b9 07       	cpc	r27, r25
     914:	c1 f7       	brne	.-16     	; 0x906 <wan_usart_transmit_bytes+0x18>
	{
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = data[i];
	}
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <wan_usart_transmit_string>:

void wan_usart_transmit_string(char * data)
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
	unsigned char c = *data;
     920:	fc 01       	movw	r30, r24
     922:	20 81       	ld	r18, Z

	while (c)
     924:	22 23       	and	r18, r18
     926:	69 f0       	breq	.+26     	; 0x942 <wan_usart_transmit_string+0x26>
     928:	dc 01       	movw	r26, r24
     92a:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1 << UDRE0)))
     92c:	e0 ec       	ldi	r30, 0xC0	; 192
     92e:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = c;
     930:	c6 ec       	ldi	r28, 0xC6	; 198
     932:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned char c = *data;

	while (c)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     934:	80 81       	ld	r24, Z
     936:	85 ff       	sbrs	r24, 5
     938:	fd cf       	rjmp	.-6      	; 0x934 <wan_usart_transmit_string+0x18>
			;
		UDR0 = c;
     93a:	28 83       	st	Y, r18
		c = *(++data);
     93c:	2d 91       	ld	r18, X+

void wan_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c)
     93e:	21 11       	cpse	r18, r1
     940:	f9 cf       	rjmp	.-14     	; 0x934 <wan_usart_transmit_string+0x18>
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = c;
		c = *(++data);
	}
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <__vector_20>:

ISR(WAN_ISR_VECTOR)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	0b b6       	in	r0, 0x3b	; 59
     954:	0f 92       	push	r0
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
	unsigned char data = UDR0;
     96e:	80 91 c6 00 	lds	r24, 0x00C6
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	wan_usart_put_char(data);
     972:	0e 94 2d 04 	call	0x85a	; 0x85a <wan_usart_put_char>

}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0b be       	out	0x3b, r0	; 59
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <ramdisk_init>:
static btle_msg_t *valid_head;

static btle_msg_t *deleted_head;

void ramdisk_init()
{
     99c:	86 ea       	ldi	r24, 0xA6	; 166
     99e:	95 e0       	ldi	r25, 0x05	; 5
     9a0:	2e e9       	ldi	r18, 0x9E	; 158
     9a2:	37 e0       	ldi	r19, 0x07	; 7
     9a4:	fc 01       	movw	r30, r24
     9a6:	38 97       	sbiw	r30, 0x08	; 8
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
	{
		records[i].next = &records[i + 1];
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
     9ac:	45 96       	adiw	r24, 0x15	; 21

void ramdisk_init()
{
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	c1 f7       	brne	.-16     	; 0x9a4 <ramdisk_init+0x8>
	{
		records[i].next = &records[i + 1];
	}

	records[i].next = NULL;
     9b4:	10 92 97 07 	sts	0x0797, r1
     9b8:	10 92 96 07 	sts	0x0796, r1

	deleted_head = &records[0];
     9bc:	81 e9       	ldi	r24, 0x91	; 145
     9be:	95 e0       	ldi	r25, 0x05	; 5
     9c0:	90 93 8e 05 	sts	0x058E, r25
     9c4:	80 93 8d 05 	sts	0x058D, r24

	valid_head = NULL;
     9c8:	10 92 90 05 	sts	0x0590, r1
     9cc:	10 92 8f 05 	sts	0x058F, r1
     9d0:	08 95       	ret

000009d2 <ramdisk_write>:

}

int ramdisk_write(btle_msg_t to_write)
{
     9d2:	7f 92       	push	r7
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	f8 88       	ldd	r15, Y+16	; 0x10
     9f2:	79 88       	ldd	r7, Y+17	; 0x11
     9f4:	8a 88       	ldd	r8, Y+18	; 0x12
     9f6:	9b 88       	ldd	r9, Y+19	; 0x13
     9f8:	ac 88       	ldd	r10, Y+20	; 0x14
     9fa:	bd 88       	ldd	r11, Y+21	; 0x15
     9fc:	ce 88       	ldd	r12, Y+22	; 0x16
     9fe:	df 88       	ldd	r13, Y+23	; 0x17
     a00:	e8 8c       	ldd	r14, Y+24	; 0x18
     a02:	69 8d       	ldd	r22, Y+25	; 0x19
     a04:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a06:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a08:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0c:	98 a1       	ldd	r25, Y+32	; 0x20
     a0e:	a9 a1       	ldd	r26, Y+33	; 0x21
     a10:	ba a1       	ldd	r27, Y+34	; 0x22
     a12:	0b a1       	ldd	r16, Y+35	; 0x23
     a14:	1c a1       	ldd	r17, Y+36	; 0x24
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
     a16:	e0 91 8d 05 	lds	r30, 0x058D
     a1a:	f0 91 8e 05 	lds	r31, 0x058E
     a1e:	30 97       	sbiw	r30, 0x00	; 0
     a20:	09 f4       	brne	.+2      	; 0xa24 <ramdisk_write+0x52>
     a22:	4b c0       	rjmp	.+150    	; 0xaba <ramdisk_write+0xe8>
		return 0x00;

	//Check for no records
	if (valid_head == NULL )
     a24:	20 91 8f 05 	lds	r18, 0x058F
     a28:	30 91 90 05 	lds	r19, 0x0590
     a2c:	21 15       	cp	r18, r1
     a2e:	31 05       	cpc	r19, r1
     a30:	11 f5       	brne	.+68     	; 0xa76 <ramdisk_write+0xa4>
	{
		temp_1 = deleted_head->next;
     a32:	25 85       	ldd	r18, Z+13	; 0x0d
     a34:	36 85       	ldd	r19, Z+14	; 0x0e
		valid_head = deleted_head;
     a36:	f0 93 90 05 	sts	0x0590, r31
     a3a:	e0 93 8f 05 	sts	0x058F, r30
		deleted_head = temp_1;
     a3e:	30 93 8e 05 	sts	0x058E, r19
     a42:	20 93 8d 05 	sts	0x058D, r18
		valid_head->mac = to_write.mac;
     a46:	71 82       	std	Z+1, r7	; 0x01
     a48:	82 82       	std	Z+2, r8	; 0x02
     a4a:	93 82       	std	Z+3, r9	; 0x03
     a4c:	a4 82       	std	Z+4, r10	; 0x04
     a4e:	b5 82       	std	Z+5, r11	; 0x05
     a50:	c6 82       	std	Z+6, r12	; 0x06
     a52:	d7 82       	std	Z+7, r13	; 0x07
     a54:	e0 86       	std	Z+8, r14	; 0x08
		valid_head->batt = to_write.batt;
     a56:	72 87       	std	Z+10, r23	; 0x0a
     a58:	61 87       	std	Z+9, r22	; 0x09
		valid_head->rssi = to_write.rssi;
     a5a:	f0 82       	st	Z, r15
		valid_head->temp = to_write.temp;
     a5c:	54 87       	std	Z+12, r21	; 0x0c
     a5e:	43 87       	std	Z+11, r20	; 0x0b
		valid_head->next = NULL;
     a60:	16 86       	std	Z+14, r1	; 0x0e
     a62:	15 86       	std	Z+13, r1	; 0x0d
		valid_head->last_sent = to_write.last_sent;
     a64:	87 87       	std	Z+15, r24	; 0x0f
     a66:	90 8b       	std	Z+16, r25	; 0x10
     a68:	a1 8b       	std	Z+17, r26	; 0x11
     a6a:	b2 8b       	std	Z+18, r27	; 0x12
		valid_head->count = to_write.count;
     a6c:	03 8b       	std	Z+19, r16	; 0x13
		valid_head->type = to_write.type;
     a6e:	14 8b       	std	Z+20, r17	; 0x14
		deleted_head = deleted_head->next;
		valid_head->next = temp_1;

	}

	return 0xff;
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	24 c0       	rjmp	.+72     	; 0xabe <ramdisk_write+0xec>
		valid_head->type = to_write.type;
	}

	else
	{
		deleted_head->mac = to_write.mac;
     a76:	71 82       	std	Z+1, r7	; 0x01
     a78:	82 82       	std	Z+2, r8	; 0x02
     a7a:	93 82       	std	Z+3, r9	; 0x03
     a7c:	a4 82       	std	Z+4, r10	; 0x04
     a7e:	b5 82       	std	Z+5, r11	; 0x05
     a80:	c6 82       	std	Z+6, r12	; 0x06
     a82:	d7 82       	std	Z+7, r13	; 0x07
     a84:	e0 86       	std	Z+8, r14	; 0x08
		deleted_head->batt = to_write.batt;
     a86:	72 87       	std	Z+10, r23	; 0x0a
     a88:	61 87       	std	Z+9, r22	; 0x09
		deleted_head->rssi = to_write.rssi;
     a8a:	f0 82       	st	Z, r15
		deleted_head->temp = to_write.temp;
     a8c:	54 87       	std	Z+12, r21	; 0x0c
     a8e:	43 87       	std	Z+11, r20	; 0x0b
		deleted_head->last_sent = to_write.last_sent;
     a90:	87 87       	std	Z+15, r24	; 0x0f
     a92:	90 8b       	std	Z+16, r25	; 0x10
     a94:	a1 8b       	std	Z+17, r26	; 0x11
     a96:	b2 8b       	std	Z+18, r27	; 0x12
		deleted_head->count = to_write.count;
     a98:	03 8b       	std	Z+19, r16	; 0x13
		deleted_head->type = to_write.type;
     a9a:	14 8b       	std	Z+20, r17	; 0x14
		temp_1 = valid_head;
		valid_head = deleted_head;
     a9c:	f0 93 90 05 	sts	0x0590, r31
     aa0:	e0 93 8f 05 	sts	0x058F, r30
		deleted_head = deleted_head->next;
     aa4:	85 85       	ldd	r24, Z+13	; 0x0d
     aa6:	96 85       	ldd	r25, Z+14	; 0x0e
     aa8:	90 93 8e 05 	sts	0x058E, r25
     aac:	80 93 8d 05 	sts	0x058D, r24
		valid_head->next = temp_1;
     ab0:	36 87       	std	Z+14, r19	; 0x0e
     ab2:	25 87       	std	Z+13, r18	; 0x0d

	}

	return 0xff;
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <ramdisk_write+0xec>
{
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
		return 0x00;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0

	}

	return 0xff;

}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	08 95       	ret

00000ada <ramdisk_erase>:

int ramdisk_erase(btle_msg_t to_remove)
{
     ada:	2f 92       	push	r2
     adc:	3f 92       	push	r3
     ade:	4f 92       	push	r4
     ae0:	5f 92       	push	r5
     ae2:	6f 92       	push	r6
     ae4:	7f 92       	push	r7
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	9e 88       	ldd	r9, Y+22	; 0x16
     b04:	8f 88       	ldd	r8, Y+23	; 0x17
     b06:	78 8c       	ldd	r7, Y+24	; 0x18
     b08:	69 8c       	ldd	r6, Y+25	; 0x19
     b0a:	5a 8c       	ldd	r5, Y+26	; 0x1a
     b0c:	4b 8c       	ldd	r4, Y+27	; 0x1b
     b0e:	3c 8c       	ldd	r3, Y+28	; 0x1c
     b10:	2d 8c       	ldd	r2, Y+29	; 0x1d
	btle_msg_t *temp_1 = valid_head;
     b12:	a0 91 8f 05 	lds	r26, 0x058F
     b16:	b0 91 90 05 	lds	r27, 0x0590
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	ac 90       	ld	r10, X
     b1e:	11 97       	sbiw	r26, 0x01	; 1
     b20:	12 96       	adiw	r26, 0x02	; 2
     b22:	bc 90       	ld	r11, X
     b24:	12 97       	sbiw	r26, 0x02	; 2
     b26:	13 96       	adiw	r26, 0x03	; 3
     b28:	cc 90       	ld	r12, X
     b2a:	13 97       	sbiw	r26, 0x03	; 3
     b2c:	14 96       	adiw	r26, 0x04	; 4
     b2e:	dc 90       	ld	r13, X
     b30:	14 97       	sbiw	r26, 0x04	; 4
     b32:	15 96       	adiw	r26, 0x05	; 5
     b34:	ec 90       	ld	r14, X
     b36:	15 97       	sbiw	r26, 0x05	; 5
     b38:	16 96       	adiw	r26, 0x06	; 6
     b3a:	fc 90       	ld	r15, X
     b3c:	16 97       	sbiw	r26, 0x06	; 6
     b3e:	17 96       	adiw	r26, 0x07	; 7
     b40:	0c 91       	ld	r16, X
     b42:	17 97       	sbiw	r26, 0x07	; 7
     b44:	18 96       	adiw	r26, 0x08	; 8
     b46:	1c 91       	ld	r17, X
     b48:	18 97       	sbiw	r26, 0x08	; 8
     b4a:	29 2d       	mov	r18, r9
     b4c:	38 2d       	mov	r19, r8
     b4e:	47 2d       	mov	r20, r7
     b50:	56 2d       	mov	r21, r6
     b52:	65 2d       	mov	r22, r5
     b54:	74 2d       	mov	r23, r4
     b56:	83 2d       	mov	r24, r3
     b58:	92 2d       	mov	r25, r2
     b5a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpdi2>
     b5e:	09 f4       	brne	.+2      	; 0xb62 <ramdisk_erase+0x88>
     b60:	5f c0       	rjmp	.+190    	; 0xc20 <ramdisk_erase+0x146>
     b62:	10 97       	sbiw	r26, 0x00	; 0
     b64:	09 f4       	brne	.+2      	; 0xb68 <ramdisk_erase+0x8e>
     b66:	50 c0       	rjmp	.+160    	; 0xc08 <ramdisk_erase+0x12e>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     b68:	fd 01       	movw	r30, r26
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
	{
		temp_1 = temp_1->next;
     b6a:	05 84       	ldd	r0, Z+13	; 0x0d
     b6c:	f6 85       	ldd	r31, Z+14	; 0x0e
     b6e:	e0 2d       	mov	r30, r0

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     b70:	a1 80       	ldd	r10, Z+1	; 0x01
     b72:	b2 80       	ldd	r11, Z+2	; 0x02
     b74:	c3 80       	ldd	r12, Z+3	; 0x03
     b76:	d4 80       	ldd	r13, Z+4	; 0x04
     b78:	e5 80       	ldd	r14, Z+5	; 0x05
     b7a:	f6 80       	ldd	r15, Z+6	; 0x06
     b7c:	07 81       	ldd	r16, Z+7	; 0x07
     b7e:	10 85       	ldd	r17, Z+8	; 0x08
     b80:	29 2d       	mov	r18, r9
     b82:	38 2d       	mov	r19, r8
     b84:	47 2d       	mov	r20, r7
     b86:	56 2d       	mov	r21, r6
     b88:	65 2d       	mov	r22, r5
     b8a:	74 2d       	mov	r23, r4
     b8c:	83 2d       	mov	r24, r3
     b8e:	92 2d       	mov	r25, r2
     b90:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpdi2>
     b94:	19 f0       	breq	.+6      	; 0xb9c <ramdisk_erase+0xc2>
     b96:	30 97       	sbiw	r30, 0x00	; 0
     b98:	41 f7       	brne	.-48     	; 0xb6a <ramdisk_erase+0x90>
     b9a:	39 c0       	rjmp	.+114    	; 0xc0e <ramdisk_erase+0x134>
	{
		temp_1 = temp_1->next;
     b9c:	9f 01       	movw	r18, r30
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     b9e:	30 97       	sbiw	r30, 0x00	; 0
     ba0:	c9 f1       	breq	.+114    	; 0xc14 <ramdisk_erase+0x13a>
		return 0x00;

	else if (temp_1 == valid_head)
     ba2:	ae 17       	cp	r26, r30
     ba4:	bf 07       	cpc	r27, r31
     ba6:	99 f4       	brne	.+38     	; 0xbce <ramdisk_erase+0xf4>
	{
		valid_head = valid_head->next;
     ba8:	85 85       	ldd	r24, Z+13	; 0x0d
     baa:	96 85       	ldd	r25, Z+14	; 0x0e
     bac:	90 93 90 05 	sts	0x0590, r25
     bb0:	80 93 8f 05 	sts	0x058F, r24
		temp_1->next = deleted_head;
     bb4:	80 91 8d 05 	lds	r24, 0x058D
     bb8:	90 91 8e 05 	lds	r25, 0x058E
     bbc:	96 87       	std	Z+14, r25	; 0x0e
     bbe:	85 87       	std	Z+13, r24	; 0x0d
		deleted_head = temp_1;
     bc0:	f0 93 8e 05 	sts	0x058E, r31
     bc4:	e0 93 8d 05 	sts	0x058D, r30
		temp_2 = deleted_head;
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	2d c0       	rjmp	.+90     	; 0xc28 <ramdisk_erase+0x14e>
	}

	else
	{
		btle_msg_t *temp_2 = valid_head;
		while (temp_2->next != temp_1)
     bce:	1d 96       	adiw	r26, 0x0d	; 13
     bd0:	8d 91       	ld	r24, X+
     bd2:	9c 91       	ld	r25, X
     bd4:	1e 97       	sbiw	r26, 0x0e	; 14
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	11 f0       	breq	.+4      	; 0xbe0 <ramdisk_erase+0x106>
		{
			temp_2 = temp_2->next;
     bdc:	dc 01       	movw	r26, r24
     bde:	f7 cf       	rjmp	.-18     	; 0xbce <ramdisk_erase+0xf4>
		}

		temp_2->next = temp_1->next;
     be0:	f9 01       	movw	r30, r18
     be2:	85 85       	ldd	r24, Z+13	; 0x0d
     be4:	96 85       	ldd	r25, Z+14	; 0x0e
     be6:	1e 96       	adiw	r26, 0x0e	; 14
     be8:	9c 93       	st	X, r25
     bea:	8e 93       	st	-X, r24
     bec:	1d 97       	sbiw	r26, 0x0d	; 13
		temp_2 = deleted_head;
     bee:	80 91 8d 05 	lds	r24, 0x058D
     bf2:	90 91 8e 05 	lds	r25, 0x058E
		deleted_head = temp_1;
     bf6:	30 93 8e 05 	sts	0x058E, r19
     bfa:	20 93 8d 05 	sts	0x058D, r18
		deleted_head->next = temp_2;
     bfe:	96 87       	std	Z+14, r25	; 0x0e
     c00:	85 87       	std	Z+13, r24	; 0x0d
	}

	return 0xff;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <ramdisk_erase+0x14e>
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
		return 0x00;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0d c0       	rjmp	.+26     	; 0xc28 <ramdisk_erase+0x14e>
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <ramdisk_erase+0x14e>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <ramdisk_erase+0x14e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <ramdisk_erase+0x14e>
	{
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     c20:	10 97       	sbiw	r26, 0x00	; 0
     c22:	d9 f3       	breq	.-10     	; 0xc1a <ramdisk_erase+0x140>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     c24:	fd 01       	movw	r30, r26
     c26:	c0 cf       	rjmp	.-128    	; 0xba8 <ramdisk_erase+0xce>
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	9f 90       	pop	r9
     c3e:	8f 90       	pop	r8
     c40:	7f 90       	pop	r7
     c42:	6f 90       	pop	r6
     c44:	5f 90       	pop	r5
     c46:	4f 90       	pop	r4
     c48:	3f 90       	pop	r3
     c4a:	2f 90       	pop	r2
     c4c:	08 95       	ret

00000c4e <ramdisk_find>:

btle_msg_t * ramdisk_find(uint64_t target)
{
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	a2 2f       	mov	r26, r18
     c6c:	b3 2f       	mov	r27, r19
     c6e:	c4 2f       	mov	r28, r20
     c70:	d5 2f       	mov	r29, r21
     c72:	96 2e       	mov	r9, r22
     c74:	87 2e       	mov	r8, r23
     c76:	78 2e       	mov	r7, r24
     c78:	69 2e       	mov	r6, r25
	btle_msg_t *temp_1 = valid_head;
     c7a:	e0 91 8f 05 	lds	r30, 0x058F
     c7e:	f0 91 90 05 	lds	r31, 0x0590

	while (temp_1->mac != target && temp_1 != NULL )
     c82:	21 81       	ldd	r18, Z+1	; 0x01
     c84:	32 81       	ldd	r19, Z+2	; 0x02
     c86:	43 81       	ldd	r20, Z+3	; 0x03
     c88:	54 81       	ldd	r21, Z+4	; 0x04
     c8a:	65 81       	ldd	r22, Z+5	; 0x05
     c8c:	76 81       	ldd	r23, Z+6	; 0x06
     c8e:	87 81       	ldd	r24, Z+7	; 0x07
     c90:	90 85       	ldd	r25, Z+8	; 0x08
     c92:	aa 2e       	mov	r10, r26
     c94:	bb 2e       	mov	r11, r27
     c96:	cc 2e       	mov	r12, r28
     c98:	dd 2e       	mov	r13, r29
     c9a:	e9 2c       	mov	r14, r9
     c9c:	f8 2c       	mov	r15, r8
     c9e:	07 2d       	mov	r16, r7
     ca0:	16 2d       	mov	r17, r6
     ca2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpdi2>
     ca6:	d1 f0       	breq	.+52     	; 0xcdc <ramdisk_find+0x8e>
     ca8:	30 97       	sbiw	r30, 0x00	; 0
     caa:	c1 f0       	breq	.+48     	; 0xcdc <ramdisk_find+0x8e>
	{
		temp_1 = temp_1->next;
     cac:	05 84       	ldd	r0, Z+13	; 0x0d
     cae:	f6 85       	ldd	r31, Z+14	; 0x0e
     cb0:	e0 2d       	mov	r30, r0

btle_msg_t * ramdisk_find(uint64_t target)
{
	btle_msg_t *temp_1 = valid_head;

	while (temp_1->mac != target && temp_1 != NULL )
     cb2:	21 81       	ldd	r18, Z+1	; 0x01
     cb4:	32 81       	ldd	r19, Z+2	; 0x02
     cb6:	43 81       	ldd	r20, Z+3	; 0x03
     cb8:	54 81       	ldd	r21, Z+4	; 0x04
     cba:	65 81       	ldd	r22, Z+5	; 0x05
     cbc:	76 81       	ldd	r23, Z+6	; 0x06
     cbe:	87 81       	ldd	r24, Z+7	; 0x07
     cc0:	90 85       	ldd	r25, Z+8	; 0x08
     cc2:	aa 2e       	mov	r10, r26
     cc4:	bb 2e       	mov	r11, r27
     cc6:	cc 2e       	mov	r12, r28
     cc8:	dd 2e       	mov	r13, r29
     cca:	e9 2c       	mov	r14, r9
     ccc:	f8 2c       	mov	r15, r8
     cce:	07 2d       	mov	r16, r7
     cd0:	16 2d       	mov	r17, r6
     cd2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__cmpdi2>
     cd6:	11 f0       	breq	.+4      	; 0xcdc <ramdisk_find+0x8e>
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	41 f7       	brne	.-48     	; 0xcac <ramdisk_find+0x5e>
	{
		temp_1 = temp_1->next;
	}

	return temp_1;
}
     cdc:	cf 01       	movw	r24, r30
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	08 95       	ret

00000cfc <ramdisk_next>:

btle_msg_t * ramdisk_next(btle_msg_t * target)
{
	if (target == NULL )
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	29 f4       	brne	.+10     	; 0xd0a <ramdisk_next+0xe>
		return valid_head;
     d00:	80 91 8f 05 	lds	r24, 0x058F
     d04:	90 91 90 05 	lds	r25, 0x0590
     d08:	08 95       	ret
	else
		return (target->next);
     d0a:	fc 01       	movw	r30, r24
     d0c:	85 85       	ldd	r24, Z+13	; 0x0d
     d0e:	96 85       	ldd	r25, Z+14	; 0x0e
}
     d10:	08 95       	ret

00000d12 <circular_queue_put_char>:

CIRCULAR_QUEUE circular_queue = {{0},0,0};

void circular_queue_put_char(uint8_t c)
{
	int i = (unsigned int)(circular_queue.head + 1) % CIRCULAR_QUEUE_SIZE;
     d12:	40 91 9e 09 	lds	r20, 0x099E
     d16:	50 91 9f 09 	lds	r21, 0x099F
     d1a:	9a 01       	movw	r18, r20
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	31 70       	andi	r19, 0x01	; 1

	if (i != circular_queue.tail) {
     d22:	60 91 a0 09 	lds	r22, 0x09A0
     d26:	70 91 a1 09 	lds	r23, 0x09A1
     d2a:	62 17       	cp	r22, r18
     d2c:	73 07       	cpc	r23, r19
     d2e:	41 f0       	breq	.+16     	; 0xd40 <circular_queue_put_char+0x2e>
		circular_queue.buffer[circular_queue.head] = c;
     d30:	fa 01       	movw	r30, r20
     d32:	e2 56       	subi	r30, 0x62	; 98
     d34:	f8 4f       	sbci	r31, 0xF8	; 248
     d36:	80 83       	st	Z, r24
		circular_queue.head = i;
     d38:	30 93 9f 09 	sts	0x099F, r19
     d3c:	20 93 9e 09 	sts	0x099E, r18
     d40:	08 95       	ret

00000d42 <circular_queue_clear_buffer>:
}


void circular_queue_clear_buffer()
{
	memset(&circular_queue, 0, sizeof(CIRCULAR_QUEUE));
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	ee e9       	ldi	r30, 0x9E	; 158
     d48:	f7 e0       	ldi	r31, 0x07	; 7
     d4a:	df 01       	movw	r26, r30
     d4c:	9c 01       	movw	r18, r24
     d4e:	1d 92       	st	X+, r1
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	30 40       	sbci	r19, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <circular_queue_clear_buffer+0xc>
     d56:	08 95       	ret

00000d58 <circular_queue_data_available>:
}

uint8_t circular_queue_data_available()
{
	return (uint8_t)(CIRCULAR_QUEUE_SIZE + circular_queue.head - circular_queue.tail) % CIRCULAR_QUEUE_SIZE;
     d58:	80 91 9e 09 	lds	r24, 0x099E
     d5c:	90 91 a0 09 	lds	r25, 0x09A0
}
     d60:	89 1b       	sub	r24, r25
     d62:	08 95       	ret

00000d64 <circular_queue_data_read>:

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
     d64:	20 91 a0 09 	lds	r18, 0x09A0
     d68:	30 91 a1 09 	lds	r19, 0x09A1
     d6c:	80 91 9e 09 	lds	r24, 0x099E
     d70:	90 91 9f 09 	lds	r25, 0x099F
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	61 f0       	breq	.+24     	; 0xd92 <circular_queue_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
     d7a:	f9 01       	movw	r30, r18
     d7c:	e2 56       	subi	r30, 0x62	; 98
     d7e:	f8 4f       	sbci	r31, 0xF8	; 248
     d80:	80 81       	ld	r24, Z
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	31 70       	andi	r19, 0x01	; 1
     d88:	30 93 a1 09 	sts	0x09A1, r19
     d8c:	20 93 a0 09 	sts	0x09A0, r18
		return c;
     d90:	08 95       	ret

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
		return -1;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
		return c;
	}
}
     d94:	08 95       	ret

00000d96 <queue_reset>:
// Calculate memory usage as: DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
#define MEMORY_CALC(r)		(r->data_usage + (r->count * sizeof(queue_header_t)) + (r->count * 4));


void queue_reset(queue_t * q)
{
     d96:	fc 01       	movw	r30, r24
	q->head = 0;
     d98:	15 82       	std	Z+5, r1	; 0x05
     d9a:	14 82       	std	Z+4, r1	; 0x04
	q->tail = 0;
     d9c:	17 82       	std	Z+7, r1	; 0x07
     d9e:	16 82       	std	Z+6, r1	; 0x06
	q->count = 0;
     da0:	13 82       	std	Z+3, r1	; 0x03
     da2:	12 82       	std	Z+2, r1	; 0x02
	q->data_usage = 0;
     da4:	11 86       	std	Z+9, r1	; 0x09
     da6:	10 86       	std	Z+8, r1	; 0x08
	q->memory_usage = 0;
     da8:	13 86       	std	Z+11, r1	; 0x0b
     daa:	12 86       	std	Z+10, r1	; 0x0a
     dac:	08 95       	ret

00000dae <queue_init>:
}

void queue_init(queue_t * r, uint16_t max)
{
	r->max_size = max;
     dae:	fc 01       	movw	r30, r24
     db0:	71 83       	std	Z+1, r23	; 0x01
     db2:	60 83       	st	Z, r22
	queue_reset(r);
     db4:	0e 94 cb 06 	call	0xd96	; 0xd96 <queue_reset>
     db8:	08 95       	ret

00000dba <queue_enqueue>:
}

queue_results_t queue_enqueue(queue_t * r, void * data, uint16_t length)
{
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
     dc8:	7b 01       	movw	r14, r22
     dca:	8a 01       	movw	r16, r20
	queue_header_t header;
	uint16_t new_size;

	if (r->max_size)
     dcc:	88 81       	ld	r24, Y
     dce:	99 81       	ldd	r25, Y+1	; 0x01
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	51 f0       	breq	.+20     	; 0xde8 <queue_enqueue+0x2e>
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
     dd4:	2a 85       	ldd	r18, Y+10	; 0x0a
     dd6:	3b 85       	ldd	r19, Y+11	; 0x0b
     dd8:	26 5f       	subi	r18, 0xF6	; 246
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	24 0f       	add	r18, r20
     dde:	35 1f       	adc	r19, r21
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     de0:	82 17       	cp	r24, r18
     de2:	93 07       	cpc	r25, r19
     de4:	08 f4       	brcc	.+2      	; 0xde8 <queue_enqueue+0x2e>
     de6:	50 c0       	rjmp	.+160    	; 0xe88 <queue_enqueue+0xce>
	}

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);
     de8:	c8 01       	movw	r24, r16
     dea:	06 96       	adiw	r24, 0x06	; 6
     dec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <malloc>

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	09 f4       	brne	.+2      	; 0xdf6 <queue_enqueue+0x3c>
     df4:	4b c0       	rjmp	.+150    	; 0xe8c <queue_enqueue+0xd2>
	header.length = length;
	header.prev = 0;
	header.next = 0;

	// If the queue is empty,
	if (r->head == 0)
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	3d 81       	ldd	r19, Y+5	; 0x05
     dfa:	23 2b       	or	r18, r19
     dfc:	69 f4       	brne	.+26     	; 0xe18 <queue_enqueue+0x5e>
	{
		// ... add this single object, and it doesn't point to anything
		r->head = obj;
     dfe:	9d 83       	std	Y+5, r25	; 0x05
     e00:	8c 83       	std	Y+4, r24	; 0x04
		r->tail = obj;
     e02:	9f 83       	std	Y+7, r25	; 0x07
     e04:	8e 83       	std	Y+6, r24	; 0x06
		r->count = 1;
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	3b 83       	std	Y+3, r19	; 0x03
     e0c:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage = header.length;
     e0e:	19 87       	std	Y+9, r17	; 0x09
     e10:	08 87       	std	Y+8, r16	; 0x08
	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;

	// New tail header
	header.length = length;
	header.prev = 0;
     e12:	e0 e0       	ldi	r30, 0x00	; 0
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	12 c0       	rjmp	.+36     	; 0xe3c <queue_enqueue+0x82>
		header.next = 0;
	}
	else
	{
		// ... otherwise, the tail grows. Make this the new tail and bump the counter
		header.prev = r->tail;
     e18:	ee 81       	ldd	r30, Y+6	; 0x06
     e1a:	ff 81       	ldd	r31, Y+7	; 0x07
		r->tail->next = (queue_header_t *)obj;
     e1c:	93 83       	std	Z+3, r25	; 0x03
     e1e:	82 83       	std	Z+2, r24	; 0x02
		r->tail = (queue_header_t *)obj;
     e20:	9f 83       	std	Y+7, r25	; 0x07
     e22:	8e 83       	std	Y+6, r24	; 0x06
		r->count++;
     e24:	2a 81       	ldd	r18, Y+2	; 0x02
     e26:	3b 81       	ldd	r19, Y+3	; 0x03
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	3b 83       	std	Y+3, r19	; 0x03
     e2e:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage += header.length;
     e30:	28 85       	ldd	r18, Y+8	; 0x08
     e32:	39 85       	ldd	r19, Y+9	; 0x09
     e34:	20 0f       	add	r18, r16
     e36:	31 1f       	adc	r19, r17
     e38:	39 87       	std	Y+9, r19	; 0x09
     e3a:	28 87       	std	Y+8, r18	; 0x08
	}
	r->memory_usage = MEMORY_CALC(r);
     e3c:	2a 81       	ldd	r18, Y+2	; 0x02
     e3e:	3b 81       	ldd	r19, Y+3	; 0x03
     e40:	a9 01       	movw	r20, r18
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	24 0f       	add	r18, r20
     e54:	35 1f       	adc	r19, r21
     e56:	48 85       	ldd	r20, Y+8	; 0x08
     e58:	59 85       	ldd	r21, Y+9	; 0x09
     e5a:	24 0f       	add	r18, r20
     e5c:	35 1f       	adc	r19, r21
     e5e:	3b 87       	std	Y+11, r19	; 0x0b
     e60:	2a 87       	std	Y+10, r18	; 0x0a

	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
     e62:	dc 01       	movw	r26, r24
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	fc 93       	st	X, r31
     e68:	ee 93       	st	-X, r30
     e6a:	13 96       	adiw	r26, 0x03	; 3
     e6c:	1c 92       	st	X, r1
     e6e:	1e 92       	st	-X, r1
     e70:	12 97       	sbiw	r26, 0x02	; 2
     e72:	15 96       	adiw	r26, 0x05	; 5
     e74:	1c 93       	st	X, r17
     e76:	0e 93       	st	-X, r16
     e78:	14 97       	sbiw	r26, 0x04	; 4
	memcpy(QUEUE_DATA(obj), data, length);
     e7a:	a8 01       	movw	r20, r16
     e7c:	b7 01       	movw	r22, r14
     e7e:	06 96       	adiw	r24, 0x06	; 6
     e80:	0e 94 91 0c 	call	0x1922	; 0x1922 <memcpy>

	return QUEUE_SUCCESS;
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <queue_enqueue+0xd4>

	if (r->max_size)
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <queue_enqueue+0xd4>

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
	memcpy(QUEUE_DATA(obj), data, length);

	return QUEUE_SUCCESS;
}
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <queue_dequeue>:

queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	7b 01       	movw	r14, r22
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
     eac:	0c 81       	ldd	r16, Y+4	; 0x04
     eae:	1d 81       	ldd	r17, Y+5	; 0x05
     eb0:	01 15       	cp	r16, r1
     eb2:	11 05       	cpc	r17, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <queue_dequeue+0x1c>
     eb6:	53 c0       	rjmp	.+166    	; 0xf5e <queue_dequeue+0xc2>

	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
     eb8:	d8 01       	movw	r26, r16
     eba:	14 96       	adiw	r26, 0x04	; 4
     ebc:	8d 91       	ld	r24, X+
     ebe:	9c 91       	ld	r25, X
     ec0:	15 97       	sbiw	r26, 0x05	; 5
     ec2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <malloc>
     ec6:	f7 01       	movw	r30, r14
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
	if (dest == 0) return QUEUE_NO_MEMORY;
     ecc:	ef 28       	or	r14, r15
     ece:	09 f4       	brne	.+2      	; 0xed2 <queue_dequeue+0x36>
     ed0:	48 c0       	rjmp	.+144    	; 0xf62 <queue_dequeue+0xc6>
	memcpy(*dest, QUEUE_DATA(header), header->length);
     ed2:	d8 01       	movw	r26, r16
     ed4:	14 96       	adiw	r26, 0x04	; 4
     ed6:	4d 91       	ld	r20, X+
     ed8:	5c 91       	ld	r21, X
     eda:	15 97       	sbiw	r26, 0x05	; 5
     edc:	b8 01       	movw	r22, r16
     ede:	6a 5f       	subi	r22, 0xFA	; 250
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	0e 94 91 0c 	call	0x1922	; 0x1922 <memcpy>

	// If this was the only object, empty the queue
	if (header->next == 0)
     ee6:	d8 01       	movw	r26, r16
     ee8:	12 96       	adiw	r26, 0x02	; 2
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
     eee:	13 97       	sbiw	r26, 0x03	; 3
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	49 f4       	brne	.+18     	; 0xf06 <queue_dequeue+0x6a>
	{
		r->head = 0;
     ef4:	1d 82       	std	Y+5, r1	; 0x05
     ef6:	1c 82       	std	Y+4, r1	; 0x04
		r->tail = 0;
     ef8:	1f 82       	std	Y+7, r1	; 0x07
     efa:	1e 82       	std	Y+6, r1	; 0x06
		r->count = 0;
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	1a 82       	std	Y+2, r1	; 0x02
		r->data_usage = 0;
     f00:	19 86       	std	Y+9, r1	; 0x09
     f02:	18 86       	std	Y+8, r1	; 0x08
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <queue_dequeue+0x92>
	}
	else
	{
		// Ring still has objects, so set the new head and adjust the count
		r->head = header->next;
     f06:	fd 83       	std	Y+5, r31	; 0x05
     f08:	ec 83       	std	Y+4, r30	; 0x04
		r->count--;
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	9b 83       	std	Y+3, r25	; 0x03
     f12:	8a 83       	std	Y+2, r24	; 0x02
		r->data_usage -= header->length;
     f14:	88 85       	ldd	r24, Y+8	; 0x08
     f16:	99 85       	ldd	r25, Y+9	; 0x09
     f18:	d8 01       	movw	r26, r16
     f1a:	14 96       	adiw	r26, 0x04	; 4
     f1c:	2d 91       	ld	r18, X+
     f1e:	3c 91       	ld	r19, X
     f20:	15 97       	sbiw	r26, 0x05	; 5
     f22:	82 1b       	sub	r24, r18
     f24:	93 0b       	sbc	r25, r19
     f26:	99 87       	std	Y+9, r25	; 0x09
     f28:	88 87       	std	Y+8, r24	; 0x08
		((queue_header_t*)r->head)->prev = 0;
     f2a:	11 82       	std	Z+1, r1	; 0x01
     f2c:	10 82       	st	Z, r1
	}
	r->memory_usage = MEMORY_CALC(r);
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	9c 01       	movw	r18, r24
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	28 85       	ldd	r18, Y+8	; 0x08
     f4a:	39 85       	ldd	r19, Y+9	; 0x09
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	9b 87       	std	Y+11, r25	; 0x0b
     f52:	8a 87       	std	Y+10, r24	; 0x0a

	// Finally, free the memory
	free((void*) header);
     f54:	c8 01       	movw	r24, r16
     f56:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <free>

	return QUEUE_SUCCESS;
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <queue_dequeue+0xc8>
queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <queue_dequeue+0xc8>
	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
	if (dest == 0) return QUEUE_NO_MEMORY;
     f62:	81 e0       	ldi	r24, 0x01	; 1

	// Finally, free the memory
	free((void*) header);

	return QUEUE_SUCCESS;
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	08 95       	ret

00000f72 <queue_find>:

queue_results_t queue_find(queue_t * q, void * src, uint16_t length, queue_header_t ** dest)
{
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	8b 01       	movw	r16, r22
     f84:	7a 01       	movw	r14, r20
     f86:	69 01       	movw	r12, r18
	queue_header_t * h;
	uint8_t comp = 0;

	if (q->count == 0)
     f88:	fc 01       	movw	r30, r24
     f8a:	22 81       	ldd	r18, Z+2	; 0x02
     f8c:	33 81       	ldd	r19, Z+3	; 0x03
     f8e:	23 2b       	or	r18, r19
     f90:	29 f4       	brne	.+10     	; 0xf9c <queue_find+0x2a>
	{
		*dest = 0;
     f92:	f6 01       	movw	r30, r12
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	10 82       	st	Z, r1
		return QUEUE_EMPTY;
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	1b c0       	rjmp	.+54     	; 0xfd2 <queue_find+0x60>
	}

	h = q->head;
     f9c:	fc 01       	movw	r30, r24
     f9e:	c4 81       	ldd	r28, Z+4	; 0x04
     fa0:	d5 81       	ldd	r29, Z+5	; 0x05
	while (h)
     fa2:	20 97       	sbiw	r28, 0x00	; 0
     fa4:	99 f0       	breq	.+38     	; 0xfcc <queue_find+0x5a>
	{
		comp = memcmp(QUEUE_DATA(h), src, length);
     fa6:	a7 01       	movw	r20, r14
     fa8:	b8 01       	movw	r22, r16
     faa:	ce 01       	movw	r24, r28
     fac:	06 96       	adiw	r24, 0x06	; 6
     fae:	0e 94 84 0c 	call	0x1908	; 0x1908 <memcmp>
		if (comp == 0)
     fb2:	81 11       	cpse	r24, r1
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <queue_find+0x4e>
		{
			*dest = h;
     fb6:	f6 01       	movw	r30, r12
     fb8:	d1 83       	std	Z+1, r29	; 0x01
     fba:	c0 83       	st	Z, r28
			return QUEUE_SUCCESS;
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <queue_find+0x60>
		}
		h = h->next;
     fc0:	0a 80       	ldd	r0, Y+2	; 0x02
     fc2:	db 81       	ldd	r29, Y+3	; 0x03
     fc4:	c0 2d       	mov	r28, r0
		*dest = 0;
		return QUEUE_EMPTY;
	}

	h = q->head;
	while (h)
     fc6:	20 97       	sbiw	r28, 0x00	; 0
     fc8:	71 f7       	brne	.-36     	; 0xfa6 <queue_find+0x34>
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <queue_find+0x5e>
		}
		h = h->next;
	}

	// If we got here, it wasn't found
	return QUEUE_NOT_FOUND;
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <queue_find+0x60>
     fd0:	84 e0       	ldi	r24, 0x04	; 4
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <queue_remove>:

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
     fea:	fb 01       	movw	r30, r22
	if (q->count == 0)
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	09 f4       	brne	.+2      	; 0xff6 <queue_remove+0x12>
     ff4:	47 c0       	rjmp	.+142    	; 0x1084 <queue_remove+0xa0>
	{
		return QUEUE_EMPTY;
	}
	else if (q->count == 1)
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	41 f4       	brne	.+16     	; 0x100a <queue_remove+0x26>
	{
		free((void*)x);
     ffa:	cb 01       	movw	r24, r22
     ffc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <free>
		queue_reset(q);
    1000:	ce 01       	movw	r24, r28
    1002:	0e 94 cb 06 	call	0xd96	; 0xd96 <queue_reset>
		return QUEUE_SUCCESS;
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <queue_remove+0xa2>
	}
	else
	{
		if ((queue_header_t *)(x->prev))
    100a:	a0 81       	ld	r26, Z
    100c:	b1 81       	ldd	r27, Z+1	; 0x01
    100e:	10 97       	sbiw	r26, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <queue_remove+0x3c>
			((queue_header_t *)(x->prev))->next = x->next;
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	13 96       	adiw	r26, 0x03	; 3
    1018:	9c 93       	st	X, r25
    101a:	8e 93       	st	-X, r24
    101c:	12 97       	sbiw	r26, 0x02	; 2
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <queue_remove+0x44>
		else
			q->head = x->next;
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	9d 83       	std	Y+5, r25	; 0x05
    1026:	8c 83       	std	Y+4, r24	; 0x04

		if ((queue_header_t *)(x->next))
    1028:	a2 81       	ldd	r26, Z+2	; 0x02
    102a:	b3 81       	ldd	r27, Z+3	; 0x03
    102c:	10 97       	sbiw	r26, 0x00	; 0
    102e:	29 f0       	breq	.+10     	; 0x103a <queue_remove+0x56>
			((queue_header_t *)(x->next))->prev = x->prev;
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	8d 93       	st	X+, r24
    1036:	9c 93       	st	X, r25
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <queue_remove+0x5e>
		else
			q->tail = x->prev;
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	9f 83       	std	Y+7, r25	; 0x07
    1040:	8e 83       	std	Y+6, r24	; 0x06

		q->count--;
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	8a 83       	std	Y+2, r24	; 0x02
		q->data_usage -= x->length;
    104c:	28 85       	ldd	r18, Y+8	; 0x08
    104e:	39 85       	ldd	r19, Y+9	; 0x09
    1050:	44 81       	ldd	r20, Z+4	; 0x04
    1052:	55 81       	ldd	r21, Z+5	; 0x05
    1054:	24 1b       	sub	r18, r20
    1056:	35 0b       	sbc	r19, r21
    1058:	39 87       	std	Y+9, r19	; 0x09
    105a:	28 87       	std	Y+8, r18	; 0x08
		q->memory_usage = MEMORY_CALC(q);
    105c:	ac 01       	movw	r20, r24
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	84 0f       	add	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	28 0f       	add	r18, r24
    1074:	39 1f       	adc	r19, r25
    1076:	3b 87       	std	Y+11, r19	; 0x0b
    1078:	2a 87       	std	Y+10, r18	; 0x0a
		free((void*)x);
    107a:	cf 01       	movw	r24, r30
    107c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <free>
		return QUEUE_SUCCESS;
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <queue_remove+0xa2>

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
	if (q->count == 0)
	{
		return QUEUE_EMPTY;
    1084:	83 e0       	ldi	r24, 0x03	; 3
		q->data_usage -= x->length;
		q->memory_usage = MEMORY_CALC(q);
		free((void*)x);
		return QUEUE_SUCCESS;
	}
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <queue_peek_length>:

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    108c:	dc 01       	movw	r26, r24
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	15 97       	sbiw	r26, 0x05	; 5
    1096:	30 97       	sbiw	r30, 0x00	; 0
    1098:	39 f0       	breq	.+14     	; 0x10a8 <queue_peek_length+0x1c>
	*length = ((queue_header_t *)r->head)->length;
    109a:	84 81       	ldd	r24, Z+4	; 0x04
    109c:	95 81       	ldd	r25, Z+5	; 0x05
    109e:	fb 01       	movw	r30, r22
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
	return QUEUE_SUCCESS;
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	08 95       	ret
	}
}

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    10a8:	83 e0       	ldi	r24, 0x03	; 3
	*length = ((queue_header_t *)r->head)->length;
	return QUEUE_SUCCESS;
}
    10aa:	08 95       	ret

000010ac <queue_clear>:

queue_results_t queue_clear(queue_t * r)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	8c 01       	movw	r16, r24
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
    10b6:	fc 01       	movw	r30, r24
    10b8:	84 81       	ldd	r24, Z+4	; 0x04
    10ba:	95 81       	ldd	r25, Z+5	; 0x05
	while (obj)
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	49 f0       	breq	.+18     	; 0x10d2 <queue_clear+0x26>
	{
		next = obj->next;
    10c0:	fc 01       	movw	r30, r24
    10c2:	c2 81       	ldd	r28, Z+2	; 0x02
    10c4:	d3 81       	ldd	r29, Z+3	; 0x03
		free((void *)obj);
    10c6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <free>
{
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
	while (obj)
    10ca:	20 97       	sbiw	r28, 0x00	; 0
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <queue_clear+0x26>
	{
		next = obj->next;
		free((void *)obj);
		obj = next;
    10ce:	ce 01       	movw	r24, r28
    10d0:	f7 cf       	rjmp	.-18     	; 0x10c0 <queue_clear+0x14>
	}

	queue_reset(r);
    10d2:	c8 01       	movw	r24, r16
    10d4:	0e 94 cb 06 	call	0xd96	; 0xd96 <queue_reset>

	return QUEUE_SUCCESS;
}
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <eeprom_read>:
#include "eeprom.h"


uint8_t eeprom_read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
    10e4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__eerd_byte_m1284p>
}
    10e8:	08 95       	ret

000010ea <eeprom_write>:

void eeprom_write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
    10ea:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__eewr_byte_m1284p>
    10ee:	08 95       	ret

000010f0 <btle_set_cts>:
}

void btle_set_cts()
{
	//pd5 low
	PORTD &= ~_BV(PD5);
    10f0:	5d 98       	cbi	0x0b, 5	; 11
    10f2:	08 95       	ret

000010f4 <btle_init>:

void btle_init()
{
	//btle_usart_init();
	// set portd bit 5 as output
	DDRD |= _BV(PD5);
    10f4:	55 9a       	sbi	0x0a, 5	; 10
	// set portd bit 4 as input
	DDRD &= ~_BV(PD4);
    10f6:	54 98       	cbi	0x0a, 4	; 10

	btle_driver_init();
    10f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <btle_driver_init>
	btle_set_cts();
    10fc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <btle_set_cts>
    1100:	08 95       	ret

00001102 <btle_get_rts>:
}

uint8_t btle_get_rts()
{
	// return logic high or low
	return (PIND & _BV(PD4));
    1102:	89 b1       	in	r24, 0x09	; 9
}
    1104:	80 71       	andi	r24, 0x10	; 16
    1106:	08 95       	ret

00001108 <btle_tick>:

void btle_tick()
{
	btle_driver_tick();
    1108:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <btle_driver_tick>
#ifdef BYPASSS_MODE
#else
	ramdisk_clean_tick();
    110c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ramdisk_clean_tick>
    1110:	08 95       	ret

00001112 <btle_enqueue>:
}

queue_results_t btle_enqueue(btle_msg_t *msg)
{
	//queue_results_t result = queue_enqueue(&btle_queue, &msg, sizeof(btle_msg_t));
	queue_results_t result = queue_enqueue(&btle_queue, msg,
    1112:	45 e1       	ldi	r20, 0x15	; 21
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	bc 01       	movw	r22, r24
    1118:	86 ee       	ldi	r24, 0xE6	; 230
    111a:	9a e0       	ldi	r25, 0x0A	; 10
    111c:	0e 94 dd 06 	call	0xdba	; 0xdba <queue_enqueue>
			sizeof(btle_msg_t));

	return result;
}
    1120:	08 95       	ret

00001122 <btle_parse_nybble>:

}

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
    1122:	9f eb       	ldi	r25, 0xBF	; 191
    1124:	98 0f       	add	r25, r24
    1126:	96 30       	cpi	r25, 0x06	; 6
    1128:	08 f4       	brcc	.+2      	; 0x112c <btle_parse_nybble+0xa>
		c = c | 0x20;
    112a:	80 62       	ori	r24, 0x20	; 32
	for (uint8_t i = 0; i < 16; i++)
	{
		if (HEX_DIGITS[i] == c)
    112c:	90 91 17 01 	lds	r25, 0x0117
    1130:	98 17       	cp	r25, r24
    1132:	51 f0       	breq	.+20     	; 0x1148 <btle_parse_nybble+0x26>
    1134:	e8 e1       	ldi	r30, 0x18	; 24
    1136:	f1 e0       	ldi	r31, 0x01	; 1

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    1138:	91 e0       	ldi	r25, 0x01	; 1
	{
		if (HEX_DIGITS[i] == c)
    113a:	21 91       	ld	r18, Z+
    113c:	28 17       	cp	r18, r24
    113e:	31 f0       	breq	.+12     	; 0x114c <btle_parse_nybble+0x2a>

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    1140:	9f 5f       	subi	r25, 0xFF	; 255
    1142:	90 31       	cpi	r25, 0x10	; 16
    1144:	d1 f7       	brne	.-12     	; 0x113a <btle_parse_nybble+0x18>
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <btle_parse_nybble+0x2e>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret
    114c:	89 2f       	mov	r24, r25
    114e:	08 95       	ret
	{
		if (HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
    1150:	80 e8       	ldi	r24, 0x80	; 128
}
    1152:	08 95       	ret

00001154 <btle_driver_init>:

static btle_msg_t *next_msg = NULL;

void btle_driver_init()
{
	queue_init(&btle_queue, MSG_QUEUE_SIZE);
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	70 e2       	ldi	r23, 0x20	; 32
    1158:	86 ee       	ldi	r24, 0xE6	; 230
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	0e 94 d7 06 	call	0xdae	; 0xdae <queue_init>
	queue_init(&packet_queue, MSG_QUEUE_SIZE);
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e2       	ldi	r23, 0x20	; 32
    1164:	8a ed       	ldi	r24, 0xDA	; 218
    1166:	9a e0       	ldi	r25, 0x0A	; 10
    1168:	0e 94 d7 06 	call	0xdae	; 0xdae <queue_init>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    116c:	10 92 a5 09 	sts	0x09A5, r1
    1170:	10 92 a4 09 	sts	0x09A4, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    1174:	81 e8       	ldi	r24, 0x81	; 129
    1176:	e3 e7       	ldi	r30, 0x73	; 115
    1178:	fb e0       	ldi	r31, 0x0B	; 11
    117a:	df 01       	movw	r26, r30
    117c:	98 2f       	mov	r25, r24
    117e:	1d 92       	st	X+, r1
    1180:	9a 95       	dec	r25
    1182:	e9 f7       	brne	.-6      	; 0x117e <btle_driver_init+0x2a>
}

static void init_lines()
{
	memset(btle_lines, '\0', sizeof(btle_lines));
    1184:	e2 ef       	ldi	r30, 0xF2	; 242
    1186:	fa e0       	ldi	r31, 0x0A	; 10
    1188:	df 01       	movw	r26, r30
    118a:	1d 92       	st	X+, r1
    118c:	8a 95       	dec	r24
    118e:	e9 f7       	brne	.-6      	; 0x118a <btle_driver_init+0x36>
    1190:	08 95       	ret

00001192 <enqueue_packet>:
		}
	}
}

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	8b 01       	movw	r16, r22
	msg->type = msg_type;
    119c:	fb 01       	movw	r30, r22
    119e:	84 8b       	std	Z+20, r24	; 0x14
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
    11a8:	f8 01       	movw	r30, r16
    11aa:	e8 0f       	add	r30, r24
    11ac:	f9 1f       	adc	r31, r25
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 89 06 	call	0xd12	; 0xd12 <circular_queue_put_char>

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
	msg->type = msg_type;
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    11b4:	21 96       	adiw	r28, 0x01	; 1
    11b6:	ce 01       	movw	r24, r28
    11b8:	c5 31       	cpi	r28, 0x15	; 21
    11ba:	d1 05       	cpc	r29, r1
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <enqueue_packet+0x16>
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <btle_driver_tick>:
	init_buffer();
	init_lines();
}

void btle_driver_tick()
{
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	e6 97       	sbiw	r28, 0x36	; 54
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61

	if (btle_usart_data_available())
    11f2:	0e 94 91 03 	call	0x722	; 0x722 <btle_usart_data_available>
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <btle_driver_tick+0x34>
    11fa:	3a c1       	rjmp	.+628    	; 0x1470 <btle_driver_tick+0x2a8>

// check to see if we have a new line
bool handle_data()
{

	char c = btle_usart_data_read();
    11fc:	0e 94 97 03 	call	0x72e	; 0x72e <btle_usart_data_read>

	// ignore null terminated strings
	if (c == '\0')
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <btle_driver_tick+0x3e>
    1204:	35 c1       	rjmp	.+618    	; 0x1470 <btle_driver_tick+0x2a8>
		return false;
	// prevent buffer overrun
	if (btle_line_index >= BTLE_MAX_CHARS)
    1206:	20 91 a4 09 	lds	r18, 0x09A4
    120a:	30 91 a5 09 	lds	r19, 0x09A5
    120e:	20 38       	cpi	r18, 0x80	; 128
    1210:	31 05       	cpc	r19, r1
    1212:	0c f0       	brlt	.+2      	; 0x1216 <btle_driver_tick+0x4e>
    1214:	2d c1       	rjmp	.+602    	; 0x1470 <btle_driver_tick+0x2a8>
		return false;

	// store character in btle_line_buffer
	btle_line_buffer[btle_line_index] = c;
    1216:	f9 01       	movw	r30, r18
    1218:	ed 58       	subi	r30, 0x8D	; 141
    121a:	f4 4f       	sbci	r31, 0xF4	; 244
    121c:	80 83       	st	Z, r24
	btle_line_index++;
    121e:	2f 5f       	subi	r18, 0xFF	; 255
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	30 93 a5 09 	sts	0x09A5, r19
    1226:	20 93 a4 09 	sts	0x09A4, r18

	// check for end of line
	if (c == BTLE_TKEND[0])
    122a:	8a 30       	cpi	r24, 0x0A	; 10
    122c:	09 f0       	breq	.+2      	; 0x1230 <btle_driver_tick+0x68>
    122e:	20 c1       	rjmp	.+576    	; 0x1470 <btle_driver_tick+0x2a8>
	{
		// copy new message into buffer
		strcpy(btle_lines, btle_line_buffer);
    1230:	63 e7       	ldi	r22, 0x73	; 115
    1232:	7b e0       	ldi	r23, 0x0B	; 11
    1234:	82 ef       	ldi	r24, 0xF2	; 242
    1236:	9a e0       	ldi	r25, 0x0A	; 10
    1238:	0e 94 a5 0c 	call	0x194a	; 0x194a <strcpy>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    123c:	10 92 a5 09 	sts	0x09A5, r1
    1240:	10 92 a4 09 	sts	0x09A4, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    1244:	81 e8       	ldi	r24, 0x81	; 129
    1246:	e3 e7       	ldi	r30, 0x73	; 115
    1248:	fb e0       	ldi	r31, 0x0B	; 11
    124a:	df 01       	movw	r26, r30
    124c:	1d 92       	st	X+, r1
    124e:	8a 95       	dec	r24
    1250:	e9 f7       	brne	.-6      	; 0x124c <btle_driver_tick+0x84>
}

static uint8_t parse_data(const char *token, char **out)
{
	char* ptr = NULL;
	if ((ptr = strstr(btle_lines, token)))
    1252:	6a e2       	ldi	r22, 0x2A	; 42
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	82 ef       	ldi	r24, 0xF2	; 242
    1258:	9a e0       	ldi	r25, 0x0A	; 10
    125a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <strchr>
    125e:	8c 01       	movw	r16, r24
		{

			char *ptr = NULL;
			// handle the new line

			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND)
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	09 f4       	brne	.+2      	; 0x1266 <btle_driver_tick+0x9e>
    1264:	05 c1       	rjmp	.+522    	; 0x1470 <btle_driver_tick+0x2a8>

btle_msg_t btle_handle_le_packet(char * buffer)
{
	btle_msg_t btle_msg;

	memset(&btle_msg, 0, sizeof(btle_msg_t));
    1266:	fe 01       	movw	r30, r28
    1268:	31 96       	adiw	r30, 0x01	; 1
    126a:	85 e1       	ldi	r24, 0x15	; 21
    126c:	df 01       	movw	r26, r30
    126e:	1d 92       	st	X+, r1
    1270:	8a 95       	dec	r24
    1272:	e9 f7       	brne	.-6      	; 0x126e <btle_driver_tick+0xa6>
	uint64_t mac;
	int i;

	// Validate checksum in bytes 27-28
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
    1274:	f8 01       	movw	r30, r16
    1276:	83 8d       	ldd	r24, Z+27	; 0x1b
    1278:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    127c:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[28]);
    127e:	d8 01       	movw	r26, r16
    1280:	5c 96       	adiw	r26, 0x1c	; 28
    1282:	8c 91       	ld	r24, X
    1284:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	ck = (msb << 4) | lsb;
    1288:	b0 e1       	ldi	r27, 0x10	; 16
    128a:	fb 9e       	mul	r15, r27
    128c:	90 01       	movw	r18, r0
    128e:	11 24       	eor	r1, r1
    1290:	82 2b       	or	r24, r18
    1292:	f8 01       	movw	r30, r16
	ckx = 0;
    1294:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i <= 26; i++)
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
		ckx ^= buffer[i];
    129a:	41 91       	ld	r20, Z+
    129c:	94 27       	eor	r25, r20
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
	lsb = btle_parse_nybble(buffer[28]);
	ck = (msb << 4) | lsb;
	ckx = 0;
	for (i = 0; i <= 26; i++)
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	2b 31       	cpi	r18, 0x1B	; 27
    12a4:	31 05       	cpc	r19, r1
    12a6:	c9 f7       	brne	.-14     	; 0x129a <btle_driver_tick+0xd2>
		ckx ^= buffer[i];
	if (ck != ckx)
    12a8:	89 17       	cp	r24, r25
    12aa:	51 f0       	breq	.+20     	; 0x12c0 <btle_driver_tick+0xf8>
	{
		return btle_msg;
    12ac:	85 e1       	ldi	r24, 0x15	; 21
    12ae:	fe 01       	movw	r30, r28
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	de 01       	movw	r26, r28
    12b4:	56 96       	adiw	r26, 0x16	; 22
    12b6:	01 90       	ld	r0, Z+
    12b8:	0d 92       	st	X+, r0
    12ba:	8a 95       	dec	r24
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <btle_driver_tick+0xee>
    12be:	d2 c0       	rjmp	.+420    	; 0x1464 <btle_driver_tick+0x29c>
	}

	// MAC address - incoming 48bits
	//
	num = (uint8_t *) &mac;
	num[7] = 0;
    12c0:	1a aa       	std	Y+50, r1	; 0x32
	num[6] = 0;
    12c2:	19 aa       	std	Y+49, r1	; 0x31
	msb = btle_parse_nybble(buffer[1]);
    12c4:	f8 01       	movw	r30, r16
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    12cc:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[2]);
    12ce:	d8 01       	movw	r26, r16
    12d0:	12 96       	adiw	r26, 0x02	; 2
    12d2:	8c 91       	ld	r24, X
    12d4:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[5] = (msb << 4) | lsb;
    12d8:	b0 e1       	ldi	r27, 0x10	; 16
    12da:	fb 9e       	mul	r15, r27
    12dc:	90 01       	movw	r18, r0
    12de:	11 24       	eor	r1, r1
    12e0:	f8 2e       	mov	r15, r24
    12e2:	f2 2a       	or	r15, r18
    12e4:	f8 aa       	std	Y+48, r15	; 0x30
	msb = btle_parse_nybble(buffer[3]);
    12e6:	f8 01       	movw	r30, r16
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    12ee:	e8 2e       	mov	r14, r24
	lsb = btle_parse_nybble(buffer[4]);
    12f0:	d8 01       	movw	r26, r16
    12f2:	14 96       	adiw	r26, 0x04	; 4
    12f4:	8c 91       	ld	r24, X
    12f6:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[4] = (msb << 4) | lsb;
    12fa:	b0 e1       	ldi	r27, 0x10	; 16
    12fc:	eb 9e       	mul	r14, r27
    12fe:	90 01       	movw	r18, r0
    1300:	11 24       	eor	r1, r1
    1302:	e8 2e       	mov	r14, r24
    1304:	e2 2a       	or	r14, r18
    1306:	ef a6       	std	Y+47, r14	; 0x2f
	msb = btle_parse_nybble(buffer[5]);
    1308:	f8 01       	movw	r30, r16
    130a:	85 81       	ldd	r24, Z+5	; 0x05
    130c:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    1310:	d8 2e       	mov	r13, r24
	lsb = btle_parse_nybble(buffer[6]);
    1312:	d8 01       	movw	r26, r16
    1314:	16 96       	adiw	r26, 0x06	; 6
    1316:	8c 91       	ld	r24, X
    1318:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[3] = (msb << 4) | lsb;
    131c:	b0 e1       	ldi	r27, 0x10	; 16
    131e:	db 9e       	mul	r13, r27
    1320:	90 01       	movw	r18, r0
    1322:	11 24       	eor	r1, r1
    1324:	d8 2e       	mov	r13, r24
    1326:	d2 2a       	or	r13, r18
    1328:	de a6       	std	Y+46, r13	; 0x2e
	msb = btle_parse_nybble(buffer[7]);
    132a:	f8 01       	movw	r30, r16
    132c:	87 81       	ldd	r24, Z+7	; 0x07
    132e:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    1332:	c8 2e       	mov	r12, r24
	lsb = btle_parse_nybble(buffer[8]);
    1334:	d8 01       	movw	r26, r16
    1336:	18 96       	adiw	r26, 0x08	; 8
    1338:	8c 91       	ld	r24, X
    133a:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[2] = (msb << 4) | lsb;
    133e:	b0 e1       	ldi	r27, 0x10	; 16
    1340:	cb 9e       	mul	r12, r27
    1342:	90 01       	movw	r18, r0
    1344:	11 24       	eor	r1, r1
    1346:	c8 2e       	mov	r12, r24
    1348:	c2 2a       	or	r12, r18
    134a:	cd a6       	std	Y+45, r12	; 0x2d
	msb = btle_parse_nybble(buffer[9]);
    134c:	f8 01       	movw	r30, r16
    134e:	81 85       	ldd	r24, Z+9	; 0x09
    1350:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    1354:	b8 2e       	mov	r11, r24
	lsb = btle_parse_nybble(buffer[10]);
    1356:	d8 01       	movw	r26, r16
    1358:	1a 96       	adiw	r26, 0x0a	; 10
    135a:	8c 91       	ld	r24, X
    135c:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    1360:	b0 e1       	ldi	r27, 0x10	; 16
    1362:	bb 9e       	mul	r11, r27
    1364:	90 01       	movw	r18, r0
    1366:	11 24       	eor	r1, r1
    1368:	b8 2e       	mov	r11, r24
    136a:	b2 2a       	or	r11, r18
    136c:	bc a6       	std	Y+44, r11	; 0x2c
	msb = btle_parse_nybble(buffer[11]);
    136e:	f8 01       	movw	r30, r16
    1370:	83 85       	ldd	r24, Z+11	; 0x0b
    1372:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    1376:	a8 2e       	mov	r10, r24
	lsb = btle_parse_nybble(buffer[12]);
    1378:	d8 01       	movw	r26, r16
    137a:	1c 96       	adiw	r26, 0x0c	; 12
    137c:	8c 91       	ld	r24, X
    137e:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    1382:	b0 e1       	ldi	r27, 0x10	; 16
    1384:	ab 9e       	mul	r10, r27
    1386:	90 01       	movw	r18, r0
    1388:	11 24       	eor	r1, r1
    138a:	a8 2e       	mov	r10, r24
    138c:	a2 2a       	or	r10, r18
    138e:	ab a6       	std	Y+43, r10	; 0x2b

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
    1390:	f8 01       	movw	r30, r16
    1392:	86 85       	ldd	r24, Z+14	; 0x0e
    1394:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    1398:	88 2e       	mov	r8, r24
	lsb = btle_parse_nybble(buffer[15]);
    139a:	d8 01       	movw	r26, r16
    139c:	1f 96       	adiw	r26, 0x0f	; 15
    139e:	8c 91       	ld	r24, X
    13a0:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    13a4:	98 2e       	mov	r9, r24
	rssi = (msb << 4) | lsb;

	// Temperature
	//
	num = (uint8_t *) &temp;
	msb = btle_parse_nybble(buffer[17]);
    13a6:	f8 01       	movw	r30, r16
    13a8:	81 89       	ldd	r24, Z+17	; 0x11
    13aa:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    13ae:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[18]);
    13b0:	d8 01       	movw	r26, r16
    13b2:	52 96       	adiw	r26, 0x12	; 18
    13b4:	8c 91       	ld	r24, X
    13b6:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    13ba:	b0 e1       	ldi	r27, 0x10	; 16
    13bc:	7b 9e       	mul	r7, r27
    13be:	90 01       	movw	r18, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	82 2b       	or	r24, r18
    13c4:	8b ab       	std	Y+51, r24	; 0x33
	msb = btle_parse_nybble(buffer[19]);
    13c6:	f8 01       	movw	r30, r16
    13c8:	83 89       	ldd	r24, Z+19	; 0x13
    13ca:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    13ce:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[20]);
    13d0:	d8 01       	movw	r26, r16
    13d2:	54 96       	adiw	r26, 0x14	; 20
    13d4:	8c 91       	ld	r24, X
    13d6:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    13da:	b0 e1       	ldi	r27, 0x10	; 16
    13dc:	7b 9e       	mul	r7, r27
    13de:	90 01       	movw	r18, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	82 2b       	or	r24, r18
    13e4:	8c ab       	std	Y+52, r24	; 0x34

	// Battery
	//
	num = (uint8_t *) &batt;
	msb = btle_parse_nybble(buffer[22]);
    13e6:	f8 01       	movw	r30, r16
    13e8:	86 89       	ldd	r24, Z+22	; 0x16
    13ea:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    13ee:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[23]);
    13f0:	d8 01       	movw	r26, r16
    13f2:	57 96       	adiw	r26, 0x17	; 23
    13f4:	8c 91       	ld	r24, X
    13f6:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    13fa:	b0 e1       	ldi	r27, 0x10	; 16
    13fc:	7b 9e       	mul	r7, r27
    13fe:	90 01       	movw	r18, r0
    1400:	11 24       	eor	r1, r1
    1402:	82 2b       	or	r24, r18
    1404:	8d ab       	std	Y+53, r24	; 0x35
	msb = btle_parse_nybble(buffer[24]);
    1406:	f8 01       	movw	r30, r16
    1408:	80 8d       	ldd	r24, Z+24	; 0x18
    140a:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
    140e:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[25]);
    1410:	d8 01       	movw	r26, r16
    1412:	59 96       	adiw	r26, 0x19	; 25
    1414:	8c 91       	ld	r24, X
    1416:	0e 94 91 08 	call	0x1122	; 0x1122 <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    141a:	b0 e1       	ldi	r27, 0x10	; 16
    141c:	7b 9e       	mul	r7, r27
    141e:	90 01       	movw	r18, r0
    1420:	11 24       	eor	r1, r1
    1422:	82 2b       	or	r24, r18
    1424:	8e ab       	std	Y+54, r24	; 0x36

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
	lsb = btle_parse_nybble(buffer[15]);
	rssi = (msb << 4) | lsb;
    1426:	e0 e1       	ldi	r30, 0x10	; 16
    1428:	8e 9e       	mul	r8, r30
    142a:	c0 01       	movw	r24, r0
    142c:	11 24       	eor	r1, r1
    142e:	89 29       	or	r24, r9
	num[0] = (msb << 4) | lsb;
	msb = btle_parse_nybble(buffer[24]);
	lsb = btle_parse_nybble(buffer[25]);
	num[1] = (msb << 4) | lsb;

	btle_msg.rssi = rssi;
    1430:	89 83       	std	Y+1, r24	; 0x01
	btle_msg.mac = mac;
    1432:	aa 82       	std	Y+2, r10	; 0x02
    1434:	bb 82       	std	Y+3, r11	; 0x03
    1436:	cc 82       	std	Y+4, r12	; 0x04
    1438:	dd 82       	std	Y+5, r13	; 0x05
    143a:	ee 82       	std	Y+6, r14	; 0x06
    143c:	ff 82       	std	Y+7, r15	; 0x07
    143e:	18 86       	std	Y+8, r1	; 0x08
    1440:	19 86       	std	Y+9, r1	; 0x09
	btle_msg.batt = batt;
    1442:	8d a9       	ldd	r24, Y+53	; 0x35
    1444:	9e a9       	ldd	r25, Y+54	; 0x36
    1446:	9b 87       	std	Y+11, r25	; 0x0b
    1448:	8a 87       	std	Y+10, r24	; 0x0a
	btle_msg.temp = temp;
    144a:	8b a9       	ldd	r24, Y+51	; 0x33
    144c:	9c a9       	ldd	r25, Y+52	; 0x34
    144e:	9d 87       	std	Y+13, r25	; 0x0d
    1450:	8c 87       	std	Y+12, r24	; 0x0c

	return btle_msg;
    1452:	85 e1       	ldi	r24, 0x15	; 21
    1454:	fe 01       	movw	r30, r28
    1456:	31 96       	adiw	r30, 0x01	; 1
    1458:	de 01       	movw	r26, r28
    145a:	56 96       	adiw	r26, 0x16	; 22
    145c:	01 90       	ld	r0, Z+
    145e:	0d 92       	st	X+, r0
    1460:	8a 95       	dec	r24
    1462:	e1 f7       	brne	.-8      	; 0x145c <btle_driver_tick+0x294>
			{
				// TODO: handle the message
				btle_msg_t msg = btle_handle_le_packet(ptr);

#ifdef BYPASS_MODE
				enqueue_packet(MSG_TYPE_NORM, &msg);
    1464:	be 01       	movw	r22, r28
    1466:	6a 5e       	subi	r22, 0xEA	; 234
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	0e 94 c9 08 	call	0x1192	; 0x1192 <enqueue_packet>
				}
#endif
			}
		}
	}
}
    1470:	e6 96       	adiw	r28, 0x36	; 54
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	9f 90       	pop	r9
    1492:	8f 90       	pop	r8
    1494:	7f 90       	pop	r7
    1496:	08 95       	ret

00001498 <ramdisk_clean_tick>:
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}

void ramdisk_clean_tick()
{
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
	btle_msg_t *msg;
	if (next_msg != NULL)
    14a0:	c0 91 a2 09 	lds	r28, 0x09A2
    14a4:	d0 91 a3 09 	lds	r29, 0x09A3
    14a8:	20 97       	sbiw	r28, 0x00	; 0
    14aa:	c1 f1       	breq	.+112    	; 0x151c <ramdisk_clean_tick+0x84>
	{
		msg = next_msg;
		next_msg = ramdisk_next(next_msg);
    14ac:	ce 01       	movw	r24, r28
    14ae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <ramdisk_next>
    14b2:	90 93 a3 09 	sts	0x09A3, r25
    14b6:	80 93 a2 09 	sts	0x09A2, r24
		if ((clock_time() - msg->last_sent) >= 10000)
    14ba:	0e 94 bc 02 	call	0x578	; 0x578 <clock_time>
    14be:	0f 85       	ldd	r16, Y+15	; 0x0f
    14c0:	18 89       	ldd	r17, Y+16	; 0x10
    14c2:	29 89       	ldd	r18, Y+17	; 0x11
    14c4:	3a 89       	ldd	r19, Y+18	; 0x12
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	80 1b       	sub	r24, r16
    14cc:	91 0b       	sbc	r25, r17
    14ce:	a2 0b       	sbc	r26, r18
    14d0:	b3 0b       	sbc	r27, r19
    14d2:	80 31       	cpi	r24, 0x10	; 16
    14d4:	97 42       	sbci	r25, 0x27	; 39
    14d6:	a1 05       	cpc	r26, r1
    14d8:	b1 05       	cpc	r27, r1
    14da:	40 f1       	brcs	.+80     	; 0x152c <ramdisk_clean_tick+0x94>
		{
			//send "is out of prox packet"
			enqueue_packet(MSG_TYPE_OUT_PROX, msg);
    14dc:	be 01       	movw	r22, r28
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	0e 94 c9 08 	call	0x1192	; 0x1192 <enqueue_packet>
			// erase the packet
			ramdisk_erase(*msg);
    14e4:	8d b7       	in	r24, 0x3d	; 61
    14e6:	9e b7       	in	r25, 0x3e	; 62
    14e8:	45 97       	sbiw	r24, 0x15	; 21
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	9e bf       	out	0x3e, r25	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	8d bf       	out	0x3d, r24	; 61
    14f4:	ad b7       	in	r26, 0x3d	; 61
    14f6:	be b7       	in	r27, 0x3e	; 62
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	85 e1       	ldi	r24, 0x15	; 21
    14fc:	fe 01       	movw	r30, r28
    14fe:	01 90       	ld	r0, Z+
    1500:	0d 92       	st	X+, r0
    1502:	8a 95       	dec	r24
    1504:	e1 f7       	brne	.-8      	; 0x14fe <ramdisk_clean_tick+0x66>
    1506:	0e 94 6d 05 	call	0xada	; 0xada <ramdisk_erase>
    150a:	8d b7       	in	r24, 0x3d	; 61
    150c:	9e b7       	in	r25, 0x3e	; 62
    150e:	45 96       	adiw	r24, 0x15	; 21
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	9e bf       	out	0x3e, r25	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	8d bf       	out	0x3d, r24	; 61
    151a:	08 c0       	rjmp	.+16     	; 0x152c <ramdisk_clean_tick+0x94>
		}

	}
	else
	{
		next_msg = ramdisk_next(NULL);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 7e 06 	call	0xcfc	; 0xcfc <ramdisk_next>
    1524:	90 93 a3 09 	sts	0x09A3, r25
    1528:	80 93 a2 09 	sts	0x09A2, r24
	}

}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <encode_string>:

void encode_string(btle_msg_t * value);

#define DEBUG_OUTPUT "rssi=%d batt=%d temp=%d mac=%d \r\n\0"
void encode_string(btle_msg_t * value)
{
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	e2 97       	sbiw	r28, 0x32	; 50
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	fc 01       	movw	r30, r24
	char tmp[50];

	memset(tmp, '\0', 50);
    1550:	8e 01       	movw	r16, r28
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	82 e3       	ldi	r24, 0x32	; 50
    1558:	d8 01       	movw	r26, r16
    155a:	1d 92       	st	X+, r1
    155c:	8a 95       	dec	r24
    155e:	e9 f7       	brne	.-6      	; 0x155a <encode_string+0x24>
	sprintf_P(tmp, PSTR(DEBUG_OUTPUT), value->rssi, value->batt, value->temp,
    1560:	80 85       	ldd	r24, Z+8	; 0x08
    1562:	8f 93       	push	r24
    1564:	87 81       	ldd	r24, Z+7	; 0x07
    1566:	8f 93       	push	r24
    1568:	86 81       	ldd	r24, Z+6	; 0x06
    156a:	8f 93       	push	r24
    156c:	85 81       	ldd	r24, Z+5	; 0x05
    156e:	8f 93       	push	r24
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	8f 93       	push	r24
    1574:	83 81       	ldd	r24, Z+3	; 0x03
    1576:	8f 93       	push	r24
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	8f 93       	push	r24
    157c:	81 81       	ldd	r24, Z+1	; 0x01
    157e:	8f 93       	push	r24
    1580:	84 85       	ldd	r24, Z+12	; 0x0c
    1582:	8f 93       	push	r24
    1584:	83 85       	ldd	r24, Z+11	; 0x0b
    1586:	8f 93       	push	r24
    1588:	82 85       	ldd	r24, Z+10	; 0x0a
    158a:	8f 93       	push	r24
    158c:	81 85       	ldd	r24, Z+9	; 0x09
    158e:	8f 93       	push	r24
    1590:	80 81       	ld	r24, Z
    1592:	1f 92       	push	r1
    1594:	8f 93       	push	r24
    1596:	8d e9       	ldi	r24, 0x9D	; 157
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9f 93       	push	r25
    159c:	8f 93       	push	r24
    159e:	1f 93       	push	r17
    15a0:	0f 93       	push	r16
    15a2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <sprintf_P>
			value->mac);
	//LOG("%s\r\n", tmp);
	wan_usart_transmit_string(tmp);
    15a6:	c8 01       	movw	r24, r16
    15a8:	0e 94 8e 04 	call	0x91c	; 0x91c <wan_usart_transmit_string>
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
}
    15b6:	e2 96       	adiw	r28, 0x32	; 50
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <terminal_in_cb>:
bool timeout();
void set_timer(clock_time_t timeout);

void terminal_in_cb(uint8_t c)
{
	term_in = c;
    15cc:	80 93 ad 09 	sts	0x09AD, r24
    15d0:	08 95       	ret

000015d2 <set_timer>:

	}
}

void set_timer(clock_time_t timeout)
{
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	6b 01       	movw	r12, r22
    15dc:	7c 01       	movw	r14, r24
	future = clock_time() + timeout;
    15de:	0e 94 bc 02 	call	0x578	; 0x578 <clock_time>
    15e2:	c6 0e       	add	r12, r22
    15e4:	d7 1e       	adc	r13, r23
    15e6:	e8 1e       	adc	r14, r24
    15e8:	f9 1e       	adc	r15, r25
    15ea:	c0 92 a9 09 	sts	0x09A9, r12
    15ee:	d0 92 aa 09 	sts	0x09AA, r13
    15f2:	e0 92 ab 09 	sts	0x09AB, r14
    15f6:	f0 92 ac 09 	sts	0x09AC, r15
}
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	08 95       	ret

00001604 <timeout>:

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
	bool timeout = false;

	if(clock_time() >= future)
    1608:	0e 94 bc 02 	call	0x578	; 0x578 <clock_time>
    160c:	00 91 a9 09 	lds	r16, 0x09A9
    1610:	10 91 aa 09 	lds	r17, 0x09AA
    1614:	20 91 ab 09 	lds	r18, 0x09AB
    1618:	30 91 ac 09 	lds	r19, 0x09AC
    161c:	60 17       	cp	r22, r16
    161e:	71 07       	cpc	r23, r17
    1620:	82 07       	cpc	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	40 f0       	brcs	.+16     	; 0x1636 <timeout+0x32>
	{
		set_timer(1000);
    1626:	68 ee       	ldi	r22, 0xE8	; 232
    1628:	73 e0       	ldi	r23, 0x03	; 3
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <set_timer>
		timeout = true;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <timeout+0x34>

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
	bool timeout = false;
    1636:	80 e0       	ldi	r24, 0x00	; 0
		timeout = true;

	}

	return timeout;
}
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	08 95       	ret

0000163e <main>:

}

int main()
{
	DDRD |= _BV(PD6); // data direction bit
    163e:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= _BV(PD7); // green (D2) output
    1640:	57 9a       	sbi	0x0a, 7	; 10

	PORTD |= _BV(PD7); // set led green off
    1642:	5f 9a       	sbi	0x0b, 7	; 11

	DDRB &= _BV(PB0); // WAN_INT_01
    1644:	84 b1       	in	r24, 0x04	; 4
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	84 b9       	out	0x04, r24	; 4

	//debug_init(terminal_in_cb);
	btle_usart_init_cb(terminal_in_cb);
    164a:	86 ee       	ldi	r24, 0xE6	; 230
    164c:	9a e0       	ldi	r25, 0x0A	; 10
    164e:	0e 94 57 03 	call	0x6ae	; 0x6ae <btle_usart_init_cb>

	clock_init();
    1652:	0e 94 b0 02 	call	0x560	; 0x560 <clock_init>
	config_init();
    1656:	0e 94 1e 03 	call	0x63c	; 0x63c <config_init>
	ramdisk_init();
    165a:	0e 94 ce 04 	call	0x99c	; 0x99c <ramdisk_init>
	/*
	 * load configuration
	 */

	// btle is on usart1
	btle_init();
    165e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <btle_init>

	// wan is on usart0
	wan_init();
    1662:	0e 94 81 00 	call	0x102	; 0x102 <wan_init>


	sei();
    1666:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1668:	2f ef       	ldi	r18, 0xFF	; 255
    166a:	89 e6       	ldi	r24, 0x69	; 105
    166c:	98 e1       	ldi	r25, 0x18	; 24
    166e:	21 50       	subi	r18, 0x01	; 1
    1670:	80 40       	sbci	r24, 0x00	; 0
    1672:	90 40       	sbci	r25, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <main+0x30>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <main+0x3a>
    1678:	00 00       	nop
		term_in = 0;

		if(timeout()){
			// just exercising timer
			set_timer(1000);
			PORTD ^= _BV(PD6);
    167a:	c0 e4       	ldi	r28, 0x40	; 64
	sei();

	_delay_ms(1000);

	while(true){
		btle_tick();
    167c:	0e 94 84 08 	call	0x1108	; 0x1108 <btle_tick>
		wan_tick();
    1680:	0e 94 2e 01 	call	0x25c	; 0x25c <wan_tick>

		if(term_in > 0)
    1684:	80 91 ad 09 	lds	r24, 0x09AD
		{
			//wan_usart_transmit((char*)term_in);
		}

		term_in = 0;
    1688:	10 92 ad 09 	sts	0x09AD, r1

		if(timeout()){
    168c:	0e 94 02 0b 	call	0x1604	; 0x1604 <timeout>
    1690:	88 23       	and	r24, r24
    1692:	a1 f3       	breq	.-24     	; 0x167c <main+0x3e>
			// just exercising timer
			set_timer(1000);
    1694:	68 ee       	ldi	r22, 0xE8	; 232
    1696:	73 e0       	ldi	r23, 0x03	; 3
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <set_timer>
			PORTD ^= _BV(PD6);
    16a0:	8b b1       	in	r24, 0x0b	; 11
    16a2:	8c 27       	eor	r24, r28
    16a4:	8b b9       	out	0x0b, r24	; 11
    16a6:	ea cf       	rjmp	.-44     	; 0x167c <main+0x3e>

000016a8 <__cmpdi2>:
    16a8:	2a 15       	cp	r18, r10
    16aa:	3b 05       	cpc	r19, r11
    16ac:	4c 05       	cpc	r20, r12
    16ae:	5d 05       	cpc	r21, r13
    16b0:	6e 05       	cpc	r22, r14
    16b2:	7f 05       	cpc	r23, r15
    16b4:	80 07       	cpc	r24, r16
    16b6:	91 07       	cpc	r25, r17
    16b8:	08 95       	ret

000016ba <malloc>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	91 05       	cpc	r25, r1
    16c2:	10 f4       	brcc	.+4      	; 0x16c8 <malloc+0xe>
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	e0 91 fe 0b 	lds	r30, 0x0BFE
    16cc:	f0 91 ff 0b 	lds	r31, 0x0BFF
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	a0 e0       	ldi	r26, 0x00	; 0
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	39 f1       	breq	.+78     	; 0x172a <malloc+0x70>
    16dc:	40 81       	ld	r20, Z
    16de:	51 81       	ldd	r21, Z+1	; 0x01
    16e0:	48 17       	cp	r20, r24
    16e2:	59 07       	cpc	r21, r25
    16e4:	b8 f0       	brcs	.+46     	; 0x1714 <malloc+0x5a>
    16e6:	48 17       	cp	r20, r24
    16e8:	59 07       	cpc	r21, r25
    16ea:	71 f4       	brne	.+28     	; 0x1708 <malloc+0x4e>
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	10 97       	sbiw	r26, 0x00	; 0
    16f2:	29 f0       	breq	.+10     	; 0x16fe <malloc+0x44>
    16f4:	13 96       	adiw	r26, 0x03	; 3
    16f6:	9c 93       	st	X, r25
    16f8:	8e 93       	st	-X, r24
    16fa:	12 97       	sbiw	r26, 0x02	; 2
    16fc:	2c c0       	rjmp	.+88     	; 0x1756 <malloc+0x9c>
    16fe:	90 93 ff 0b 	sts	0x0BFF, r25
    1702:	80 93 fe 0b 	sts	0x0BFE, r24
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <malloc+0x9c>
    1708:	21 15       	cp	r18, r1
    170a:	31 05       	cpc	r19, r1
    170c:	31 f0       	breq	.+12     	; 0x171a <malloc+0x60>
    170e:	42 17       	cp	r20, r18
    1710:	53 07       	cpc	r21, r19
    1712:	18 f0       	brcs	.+6      	; 0x171a <malloc+0x60>
    1714:	a9 01       	movw	r20, r18
    1716:	db 01       	movw	r26, r22
    1718:	01 c0       	rjmp	.+2      	; 0x171c <malloc+0x62>
    171a:	ef 01       	movw	r28, r30
    171c:	9a 01       	movw	r18, r20
    171e:	bd 01       	movw	r22, r26
    1720:	df 01       	movw	r26, r30
    1722:	02 80       	ldd	r0, Z+2	; 0x02
    1724:	f3 81       	ldd	r31, Z+3	; 0x03
    1726:	e0 2d       	mov	r30, r0
    1728:	d7 cf       	rjmp	.-82     	; 0x16d8 <malloc+0x1e>
    172a:	21 15       	cp	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	f9 f0       	breq	.+62     	; 0x176e <malloc+0xb4>
    1730:	28 1b       	sub	r18, r24
    1732:	39 0b       	sbc	r19, r25
    1734:	24 30       	cpi	r18, 0x04	; 4
    1736:	31 05       	cpc	r19, r1
    1738:	80 f4       	brcc	.+32     	; 0x175a <malloc+0xa0>
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	61 15       	cp	r22, r1
    1740:	71 05       	cpc	r23, r1
    1742:	21 f0       	breq	.+8      	; 0x174c <malloc+0x92>
    1744:	fb 01       	movw	r30, r22
    1746:	93 83       	std	Z+3, r25	; 0x03
    1748:	82 83       	std	Z+2, r24	; 0x02
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <malloc+0x9a>
    174c:	90 93 ff 0b 	sts	0x0BFF, r25
    1750:	80 93 fe 0b 	sts	0x0BFE, r24
    1754:	fe 01       	movw	r30, r28
    1756:	32 96       	adiw	r30, 0x02	; 2
    1758:	44 c0       	rjmp	.+136    	; 0x17e2 <malloc+0x128>
    175a:	fe 01       	movw	r30, r28
    175c:	e2 0f       	add	r30, r18
    175e:	f3 1f       	adc	r31, r19
    1760:	81 93       	st	Z+, r24
    1762:	91 93       	st	Z+, r25
    1764:	22 50       	subi	r18, 0x02	; 2
    1766:	31 09       	sbc	r19, r1
    1768:	39 83       	std	Y+1, r19	; 0x01
    176a:	28 83       	st	Y, r18
    176c:	3a c0       	rjmp	.+116    	; 0x17e2 <malloc+0x128>
    176e:	20 91 fc 0b 	lds	r18, 0x0BFC
    1772:	30 91 fd 0b 	lds	r19, 0x0BFD
    1776:	23 2b       	or	r18, r19
    1778:	41 f4       	brne	.+16     	; 0x178a <malloc+0xd0>
    177a:	20 91 02 01 	lds	r18, 0x0102
    177e:	30 91 03 01 	lds	r19, 0x0103
    1782:	30 93 fd 0b 	sts	0x0BFD, r19
    1786:	20 93 fc 0b 	sts	0x0BFC, r18
    178a:	20 91 00 01 	lds	r18, 0x0100
    178e:	30 91 01 01 	lds	r19, 0x0101
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	41 f4       	brne	.+16     	; 0x17a8 <malloc+0xee>
    1798:	2d b7       	in	r18, 0x3d	; 61
    179a:	3e b7       	in	r19, 0x3e	; 62
    179c:	40 91 04 01 	lds	r20, 0x0104
    17a0:	50 91 05 01 	lds	r21, 0x0105
    17a4:	24 1b       	sub	r18, r20
    17a6:	35 0b       	sbc	r19, r21
    17a8:	e0 91 fc 0b 	lds	r30, 0x0BFC
    17ac:	f0 91 fd 0b 	lds	r31, 0x0BFD
    17b0:	e2 17       	cp	r30, r18
    17b2:	f3 07       	cpc	r31, r19
    17b4:	a0 f4       	brcc	.+40     	; 0x17de <malloc+0x124>
    17b6:	2e 1b       	sub	r18, r30
    17b8:	3f 0b       	sbc	r19, r31
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	78 f0       	brcs	.+30     	; 0x17de <malloc+0x124>
    17c0:	ac 01       	movw	r20, r24
    17c2:	4e 5f       	subi	r20, 0xFE	; 254
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	24 17       	cp	r18, r20
    17c8:	35 07       	cpc	r19, r21
    17ca:	48 f0       	brcs	.+18     	; 0x17de <malloc+0x124>
    17cc:	4e 0f       	add	r20, r30
    17ce:	5f 1f       	adc	r21, r31
    17d0:	50 93 fd 0b 	sts	0x0BFD, r21
    17d4:	40 93 fc 0b 	sts	0x0BFC, r20
    17d8:	81 93       	st	Z+, r24
    17da:	91 93       	st	Z+, r25
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <malloc+0x128>
    17de:	e0 e0       	ldi	r30, 0x00	; 0
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	cf 01       	movw	r24, r30
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <free>:
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <free+0xa>
    17f2:	87 c0       	rjmp	.+270    	; 0x1902 <free+0x118>
    17f4:	fc 01       	movw	r30, r24
    17f6:	32 97       	sbiw	r30, 0x02	; 2
    17f8:	13 82       	std	Z+3, r1	; 0x03
    17fa:	12 82       	std	Z+2, r1	; 0x02
    17fc:	c0 91 fe 0b 	lds	r28, 0x0BFE
    1800:	d0 91 ff 0b 	lds	r29, 0x0BFF
    1804:	20 97       	sbiw	r28, 0x00	; 0
    1806:	81 f4       	brne	.+32     	; 0x1828 <free+0x3e>
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	28 0f       	add	r18, r24
    180e:	39 1f       	adc	r19, r25
    1810:	80 91 fc 0b 	lds	r24, 0x0BFC
    1814:	90 91 fd 0b 	lds	r25, 0x0BFD
    1818:	82 17       	cp	r24, r18
    181a:	93 07       	cpc	r25, r19
    181c:	79 f5       	brne	.+94     	; 0x187c <free+0x92>
    181e:	f0 93 fd 0b 	sts	0x0BFD, r31
    1822:	e0 93 fc 0b 	sts	0x0BFC, r30
    1826:	6d c0       	rjmp	.+218    	; 0x1902 <free+0x118>
    1828:	de 01       	movw	r26, r28
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	ae 17       	cp	r26, r30
    1830:	bf 07       	cpc	r27, r31
    1832:	50 f4       	brcc	.+20     	; 0x1848 <free+0x5e>
    1834:	12 96       	adiw	r26, 0x02	; 2
    1836:	4d 91       	ld	r20, X+
    1838:	5c 91       	ld	r21, X
    183a:	13 97       	sbiw	r26, 0x03	; 3
    183c:	9d 01       	movw	r18, r26
    183e:	41 15       	cp	r20, r1
    1840:	51 05       	cpc	r21, r1
    1842:	09 f1       	breq	.+66     	; 0x1886 <free+0x9c>
    1844:	da 01       	movw	r26, r20
    1846:	f3 cf       	rjmp	.-26     	; 0x182e <free+0x44>
    1848:	b3 83       	std	Z+3, r27	; 0x03
    184a:	a2 83       	std	Z+2, r26	; 0x02
    184c:	40 81       	ld	r20, Z
    184e:	51 81       	ldd	r21, Z+1	; 0x01
    1850:	84 0f       	add	r24, r20
    1852:	95 1f       	adc	r25, r21
    1854:	8a 17       	cp	r24, r26
    1856:	9b 07       	cpc	r25, r27
    1858:	71 f4       	brne	.+28     	; 0x1876 <free+0x8c>
    185a:	8d 91       	ld	r24, X+
    185c:	9c 91       	ld	r25, X
    185e:	11 97       	sbiw	r26, 0x01	; 1
    1860:	84 0f       	add	r24, r20
    1862:	95 1f       	adc	r25, r21
    1864:	02 96       	adiw	r24, 0x02	; 2
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	12 96       	adiw	r26, 0x02	; 2
    186c:	8d 91       	ld	r24, X+
    186e:	9c 91       	ld	r25, X
    1870:	13 97       	sbiw	r26, 0x03	; 3
    1872:	93 83       	std	Z+3, r25	; 0x03
    1874:	82 83       	std	Z+2, r24	; 0x02
    1876:	21 15       	cp	r18, r1
    1878:	31 05       	cpc	r19, r1
    187a:	29 f4       	brne	.+10     	; 0x1886 <free+0x9c>
    187c:	f0 93 ff 0b 	sts	0x0BFF, r31
    1880:	e0 93 fe 0b 	sts	0x0BFE, r30
    1884:	3e c0       	rjmp	.+124    	; 0x1902 <free+0x118>
    1886:	d9 01       	movw	r26, r18
    1888:	13 96       	adiw	r26, 0x03	; 3
    188a:	fc 93       	st	X, r31
    188c:	ee 93       	st	-X, r30
    188e:	12 97       	sbiw	r26, 0x02	; 2
    1890:	4d 91       	ld	r20, X+
    1892:	5d 91       	ld	r21, X+
    1894:	a4 0f       	add	r26, r20
    1896:	b5 1f       	adc	r27, r21
    1898:	ea 17       	cp	r30, r26
    189a:	fb 07       	cpc	r31, r27
    189c:	79 f4       	brne	.+30     	; 0x18bc <free+0xd2>
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	84 0f       	add	r24, r20
    18a4:	95 1f       	adc	r25, r21
    18a6:	02 96       	adiw	r24, 0x02	; 2
    18a8:	d9 01       	movw	r26, r18
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	9c 93       	st	X, r25
    18ae:	8e 93       	st	-X, r24
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	13 96       	adiw	r26, 0x03	; 3
    18b6:	9c 93       	st	X, r25
    18b8:	8e 93       	st	-X, r24
    18ba:	12 97       	sbiw	r26, 0x02	; 2
    18bc:	e0 e0       	ldi	r30, 0x00	; 0
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	9b 81       	ldd	r25, Y+3	; 0x03
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	19 f0       	breq	.+6      	; 0x18ce <free+0xe4>
    18c8:	fe 01       	movw	r30, r28
    18ca:	ec 01       	movw	r28, r24
    18cc:	f9 cf       	rjmp	.-14     	; 0x18c0 <free+0xd6>
    18ce:	ce 01       	movw	r24, r28
    18d0:	02 96       	adiw	r24, 0x02	; 2
    18d2:	28 81       	ld	r18, Y
    18d4:	39 81       	ldd	r19, Y+1	; 0x01
    18d6:	82 0f       	add	r24, r18
    18d8:	93 1f       	adc	r25, r19
    18da:	20 91 fc 0b 	lds	r18, 0x0BFC
    18de:	30 91 fd 0b 	lds	r19, 0x0BFD
    18e2:	28 17       	cp	r18, r24
    18e4:	39 07       	cpc	r19, r25
    18e6:	69 f4       	brne	.+26     	; 0x1902 <free+0x118>
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <free+0x10c>
    18ec:	10 92 ff 0b 	sts	0x0BFF, r1
    18f0:	10 92 fe 0b 	sts	0x0BFE, r1
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <free+0x110>
    18f6:	13 82       	std	Z+3, r1	; 0x03
    18f8:	12 82       	std	Z+2, r1	; 0x02
    18fa:	d0 93 fd 0b 	sts	0x0BFD, r29
    18fe:	c0 93 fc 0b 	sts	0x0BFC, r28
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <memcmp>:
    1908:	fb 01       	movw	r30, r22
    190a:	dc 01       	movw	r26, r24
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <memcmp+0xe>
    190e:	8d 91       	ld	r24, X+
    1910:	01 90       	ld	r0, Z+
    1912:	80 19       	sub	r24, r0
    1914:	21 f4       	brne	.+8      	; 0x191e <memcmp+0x16>
    1916:	41 50       	subi	r20, 0x01	; 1
    1918:	50 40       	sbci	r21, 0x00	; 0
    191a:	c8 f7       	brcc	.-14     	; 0x190e <memcmp+0x6>
    191c:	88 1b       	sub	r24, r24
    191e:	99 0b       	sbc	r25, r25
    1920:	08 95       	ret

00001922 <memcpy>:
    1922:	fb 01       	movw	r30, r22
    1924:	dc 01       	movw	r26, r24
    1926:	02 c0       	rjmp	.+4      	; 0x192c <memcpy+0xa>
    1928:	01 90       	ld	r0, Z+
    192a:	0d 92       	st	X+, r0
    192c:	41 50       	subi	r20, 0x01	; 1
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	d8 f7       	brcc	.-10     	; 0x1928 <memcpy+0x6>
    1932:	08 95       	ret

00001934 <strchr>:
    1934:	fc 01       	movw	r30, r24
    1936:	81 91       	ld	r24, Z+
    1938:	86 17       	cp	r24, r22
    193a:	21 f0       	breq	.+8      	; 0x1944 <strchr+0x10>
    193c:	88 23       	and	r24, r24
    193e:	d9 f7       	brne	.-10     	; 0x1936 <strchr+0x2>
    1940:	99 27       	eor	r25, r25
    1942:	08 95       	ret
    1944:	31 97       	sbiw	r30, 0x01	; 1
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret

0000194a <strcpy>:
    194a:	fb 01       	movw	r30, r22
    194c:	dc 01       	movw	r26, r24
    194e:	01 90       	ld	r0, Z+
    1950:	0d 92       	st	X+, r0
    1952:	00 20       	and	r0, r0
    1954:	e1 f7       	brne	.-8      	; 0x194e <strcpy+0x4>
    1956:	08 95       	ret

00001958 <sprintf_P>:
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	2e 97       	sbiw	r28, 0x0e	; 14
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	0d 89       	ldd	r16, Y+21	; 0x15
    1972:	1e 89       	ldd	r17, Y+22	; 0x16
    1974:	8e e0       	ldi	r24, 0x0E	; 14
    1976:	8c 83       	std	Y+4, r24	; 0x04
    1978:	1a 83       	std	Y+2, r17	; 0x02
    197a:	09 83       	std	Y+1, r16	; 0x01
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	9f e7       	ldi	r25, 0x7F	; 127
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	ae 01       	movw	r20, r28
    1986:	47 5e       	subi	r20, 0xE7	; 231
    1988:	5f 4f       	sbci	r21, 0xFF	; 255
    198a:	6f 89       	ldd	r22, Y+23	; 0x17
    198c:	78 8d       	ldd	r23, Y+24	; 0x18
    198e:	ce 01       	movw	r24, r28
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <vfprintf>
    1996:	ef 81       	ldd	r30, Y+7	; 0x07
    1998:	f8 85       	ldd	r31, Y+8	; 0x08
    199a:	e0 0f       	add	r30, r16
    199c:	f1 1f       	adc	r31, r17
    199e:	10 82       	st	Z, r1
    19a0:	2e 96       	adiw	r28, 0x0e	; 14
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <vfprintf>:
    19b6:	2f 92       	push	r2
    19b8:	3f 92       	push	r3
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	2c 97       	sbiw	r28, 0x0c	; 12
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	7c 01       	movw	r14, r24
    19ec:	6b 01       	movw	r12, r22
    19ee:	8a 01       	movw	r16, r20
    19f0:	fc 01       	movw	r30, r24
    19f2:	17 82       	std	Z+7, r1	; 0x07
    19f4:	16 82       	std	Z+6, r1	; 0x06
    19f6:	83 81       	ldd	r24, Z+3	; 0x03
    19f8:	81 ff       	sbrs	r24, 1
    19fa:	bd c1       	rjmp	.+890    	; 0x1d76 <vfprintf+0x3c0>
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	4c 01       	movw	r8, r24
    1a02:	f7 01       	movw	r30, r14
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	f6 01       	movw	r30, r12
    1a08:	93 fd       	sbrc	r25, 3
    1a0a:	85 91       	lpm	r24, Z+
    1a0c:	93 ff       	sbrs	r25, 3
    1a0e:	81 91       	ld	r24, Z+
    1a10:	6f 01       	movw	r12, r30
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <vfprintf+0x62>
    1a16:	ab c1       	rjmp	.+854    	; 0x1d6e <vfprintf+0x3b8>
    1a18:	85 32       	cpi	r24, 0x25	; 37
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <vfprintf+0x74>
    1a1c:	93 fd       	sbrc	r25, 3
    1a1e:	85 91       	lpm	r24, Z+
    1a20:	93 ff       	sbrs	r25, 3
    1a22:	81 91       	ld	r24, Z+
    1a24:	6f 01       	movw	r12, r30
    1a26:	85 32       	cpi	r24, 0x25	; 37
    1a28:	29 f4       	brne	.+10     	; 0x1a34 <vfprintf+0x7e>
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1a32:	e7 cf       	rjmp	.-50     	; 0x1a02 <vfprintf+0x4c>
    1a34:	51 2c       	mov	r5, r1
    1a36:	31 2c       	mov	r3, r1
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	20 32       	cpi	r18, 0x20	; 32
    1a3c:	a0 f4       	brcc	.+40     	; 0x1a66 <vfprintf+0xb0>
    1a3e:	8b 32       	cpi	r24, 0x2B	; 43
    1a40:	69 f0       	breq	.+26     	; 0x1a5c <vfprintf+0xa6>
    1a42:	30 f4       	brcc	.+12     	; 0x1a50 <vfprintf+0x9a>
    1a44:	80 32       	cpi	r24, 0x20	; 32
    1a46:	59 f0       	breq	.+22     	; 0x1a5e <vfprintf+0xa8>
    1a48:	83 32       	cpi	r24, 0x23	; 35
    1a4a:	69 f4       	brne	.+26     	; 0x1a66 <vfprintf+0xb0>
    1a4c:	20 61       	ori	r18, 0x10	; 16
    1a4e:	2c c0       	rjmp	.+88     	; 0x1aa8 <vfprintf+0xf2>
    1a50:	8d 32       	cpi	r24, 0x2D	; 45
    1a52:	39 f0       	breq	.+14     	; 0x1a62 <vfprintf+0xac>
    1a54:	80 33       	cpi	r24, 0x30	; 48
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <vfprintf+0xb0>
    1a58:	21 60       	ori	r18, 0x01	; 1
    1a5a:	26 c0       	rjmp	.+76     	; 0x1aa8 <vfprintf+0xf2>
    1a5c:	22 60       	ori	r18, 0x02	; 2
    1a5e:	24 60       	ori	r18, 0x04	; 4
    1a60:	23 c0       	rjmp	.+70     	; 0x1aa8 <vfprintf+0xf2>
    1a62:	28 60       	ori	r18, 0x08	; 8
    1a64:	21 c0       	rjmp	.+66     	; 0x1aa8 <vfprintf+0xf2>
    1a66:	27 fd       	sbrc	r18, 7
    1a68:	27 c0       	rjmp	.+78     	; 0x1ab8 <vfprintf+0x102>
    1a6a:	30 ed       	ldi	r19, 0xD0	; 208
    1a6c:	38 0f       	add	r19, r24
    1a6e:	3a 30       	cpi	r19, 0x0A	; 10
    1a70:	78 f4       	brcc	.+30     	; 0x1a90 <vfprintf+0xda>
    1a72:	26 ff       	sbrs	r18, 6
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfprintf+0xcc>
    1a76:	fa e0       	ldi	r31, 0x0A	; 10
    1a78:	5f 9e       	mul	r5, r31
    1a7a:	30 0d       	add	r19, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	53 2e       	mov	r5, r19
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <vfprintf+0xf2>
    1a82:	8a e0       	ldi	r24, 0x0A	; 10
    1a84:	38 9e       	mul	r3, r24
    1a86:	30 0d       	add	r19, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	33 2e       	mov	r3, r19
    1a8c:	20 62       	ori	r18, 0x20	; 32
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <vfprintf+0xf2>
    1a90:	8e 32       	cpi	r24, 0x2E	; 46
    1a92:	21 f4       	brne	.+8      	; 0x1a9c <vfprintf+0xe6>
    1a94:	26 fd       	sbrc	r18, 6
    1a96:	6b c1       	rjmp	.+726    	; 0x1d6e <vfprintf+0x3b8>
    1a98:	20 64       	ori	r18, 0x40	; 64
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <vfprintf+0xf2>
    1a9c:	8c 36       	cpi	r24, 0x6C	; 108
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <vfprintf+0xee>
    1aa0:	20 68       	ori	r18, 0x80	; 128
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0xf2>
    1aa4:	88 36       	cpi	r24, 0x68	; 104
    1aa6:	41 f4       	brne	.+16     	; 0x1ab8 <vfprintf+0x102>
    1aa8:	f6 01       	movw	r30, r12
    1aaa:	93 fd       	sbrc	r25, 3
    1aac:	85 91       	lpm	r24, Z+
    1aae:	93 ff       	sbrs	r25, 3
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	6f 01       	movw	r12, r30
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	c1 cf       	rjmp	.-126    	; 0x1a3a <vfprintf+0x84>
    1ab8:	98 2f       	mov	r25, r24
    1aba:	9f 7d       	andi	r25, 0xDF	; 223
    1abc:	95 54       	subi	r25, 0x45	; 69
    1abe:	93 30       	cpi	r25, 0x03	; 3
    1ac0:	28 f4       	brcc	.+10     	; 0x1acc <vfprintf+0x116>
    1ac2:	0c 5f       	subi	r16, 0xFC	; 252
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	ff e3       	ldi	r31, 0x3F	; 63
    1ac8:	f9 83       	std	Y+1, r31	; 0x01
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <vfprintf+0x130>
    1acc:	83 36       	cpi	r24, 0x63	; 99
    1ace:	31 f0       	breq	.+12     	; 0x1adc <vfprintf+0x126>
    1ad0:	83 37       	cpi	r24, 0x73	; 115
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <vfprintf+0x13a>
    1ad4:	83 35       	cpi	r24, 0x53	; 83
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <vfprintf+0x124>
    1ad8:	5b c0       	rjmp	.+182    	; 0x1b90 <vfprintf+0x1da>
    1ada:	22 c0       	rjmp	.+68     	; 0x1b20 <vfprintf+0x16a>
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	0e 5f       	subi	r16, 0xFE	; 254
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	44 24       	eor	r4, r4
    1ae8:	43 94       	inc	r4
    1aea:	51 2c       	mov	r5, r1
    1aec:	54 01       	movw	r10, r8
    1aee:	15 c0       	rjmp	.+42     	; 0x1b1a <vfprintf+0x164>
    1af0:	38 01       	movw	r6, r16
    1af2:	f2 e0       	ldi	r31, 0x02	; 2
    1af4:	6f 0e       	add	r6, r31
    1af6:	71 1c       	adc	r7, r1
    1af8:	f8 01       	movw	r30, r16
    1afa:	a0 80       	ld	r10, Z
    1afc:	b1 80       	ldd	r11, Z+1	; 0x01
    1afe:	26 ff       	sbrs	r18, 6
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <vfprintf+0x152>
    1b02:	65 2d       	mov	r22, r5
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <vfprintf+0x156>
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	2c 87       	std	Y+12, r18	; 0x0c
    1b10:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <strnlen>
    1b14:	2c 01       	movw	r4, r24
    1b16:	83 01       	movw	r16, r6
    1b18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b1a:	2f 77       	andi	r18, 0x7F	; 127
    1b1c:	22 2e       	mov	r2, r18
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <vfprintf+0x198>
    1b20:	38 01       	movw	r6, r16
    1b22:	f2 e0       	ldi	r31, 0x02	; 2
    1b24:	6f 0e       	add	r6, r31
    1b26:	71 1c       	adc	r7, r1
    1b28:	f8 01       	movw	r30, r16
    1b2a:	a0 80       	ld	r10, Z
    1b2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b2e:	26 ff       	sbrs	r18, 6
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <vfprintf+0x182>
    1b32:	65 2d       	mov	r22, r5
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x186>
    1b38:	6f ef       	ldi	r22, 0xFF	; 255
    1b3a:	7f ef       	ldi	r23, 0xFF	; 255
    1b3c:	c5 01       	movw	r24, r10
    1b3e:	2c 87       	std	Y+12, r18	; 0x0c
    1b40:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <strnlen_P>
    1b44:	2c 01       	movw	r4, r24
    1b46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b48:	20 68       	ori	r18, 0x80	; 128
    1b4a:	22 2e       	mov	r2, r18
    1b4c:	83 01       	movw	r16, r6
    1b4e:	23 fc       	sbrc	r2, 3
    1b50:	1b c0       	rjmp	.+54     	; 0x1b88 <vfprintf+0x1d2>
    1b52:	83 2d       	mov	r24, r3
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	48 16       	cp	r4, r24
    1b58:	59 06       	cpc	r5, r25
    1b5a:	b0 f4       	brcc	.+44     	; 0x1b88 <vfprintf+0x1d2>
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	80 e2       	ldi	r24, 0x20	; 32
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1b66:	3a 94       	dec	r3
    1b68:	f4 cf       	rjmp	.-24     	; 0x1b52 <vfprintf+0x19c>
    1b6a:	f5 01       	movw	r30, r10
    1b6c:	27 fc       	sbrc	r2, 7
    1b6e:	85 91       	lpm	r24, Z+
    1b70:	27 fe       	sbrs	r2, 7
    1b72:	81 91       	ld	r24, Z+
    1b74:	5f 01       	movw	r10, r30
    1b76:	b7 01       	movw	r22, r14
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1b7e:	31 10       	cpse	r3, r1
    1b80:	3a 94       	dec	r3
    1b82:	f1 e0       	ldi	r31, 0x01	; 1
    1b84:	4f 1a       	sub	r4, r31
    1b86:	51 08       	sbc	r5, r1
    1b88:	41 14       	cp	r4, r1
    1b8a:	51 04       	cpc	r5, r1
    1b8c:	71 f7       	brne	.-36     	; 0x1b6a <vfprintf+0x1b4>
    1b8e:	e5 c0       	rjmp	.+458    	; 0x1d5a <vfprintf+0x3a4>
    1b90:	84 36       	cpi	r24, 0x64	; 100
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <vfprintf+0x1e2>
    1b94:	89 36       	cpi	r24, 0x69	; 105
    1b96:	39 f5       	brne	.+78     	; 0x1be6 <vfprintf+0x230>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	27 ff       	sbrs	r18, 7
    1b9c:	07 c0       	rjmp	.+14     	; 0x1bac <vfprintf+0x1f6>
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	0c 5f       	subi	r16, 0xFC	; 252
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	08 c0       	rjmp	.+16     	; 0x1bbc <vfprintf+0x206>
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	88 27       	eor	r24, r24
    1bb2:	77 fd       	sbrc	r23, 7
    1bb4:	80 95       	com	r24
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	0e 5f       	subi	r16, 0xFE	; 254
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	2f 76       	andi	r18, 0x6F	; 111
    1bbe:	b2 2e       	mov	r11, r18
    1bc0:	97 ff       	sbrs	r25, 7
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <vfprintf+0x220>
    1bc4:	90 95       	com	r25
    1bc6:	80 95       	com	r24
    1bc8:	70 95       	com	r23
    1bca:	61 95       	neg	r22
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	20 68       	ori	r18, 0x80	; 128
    1bd4:	b2 2e       	mov	r11, r18
    1bd6:	2a e0       	ldi	r18, 0x0A	; 10
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	a4 01       	movw	r20, r8
    1bdc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__ultoa_invert>
    1be0:	a8 2e       	mov	r10, r24
    1be2:	a8 18       	sub	r10, r8
    1be4:	44 c0       	rjmp	.+136    	; 0x1c6e <vfprintf+0x2b8>
    1be6:	85 37       	cpi	r24, 0x75	; 117
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <vfprintf+0x23e>
    1bea:	2f 7e       	andi	r18, 0xEF	; 239
    1bec:	b2 2e       	mov	r11, r18
    1bee:	2a e0       	ldi	r18, 0x0A	; 10
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	25 c0       	rjmp	.+74     	; 0x1c3e <vfprintf+0x288>
    1bf4:	f2 2f       	mov	r31, r18
    1bf6:	f9 7f       	andi	r31, 0xF9	; 249
    1bf8:	bf 2e       	mov	r11, r31
    1bfa:	8f 36       	cpi	r24, 0x6F	; 111
    1bfc:	c1 f0       	breq	.+48     	; 0x1c2e <vfprintf+0x278>
    1bfe:	18 f4       	brcc	.+6      	; 0x1c06 <vfprintf+0x250>
    1c00:	88 35       	cpi	r24, 0x58	; 88
    1c02:	79 f0       	breq	.+30     	; 0x1c22 <vfprintf+0x26c>
    1c04:	b4 c0       	rjmp	.+360    	; 0x1d6e <vfprintf+0x3b8>
    1c06:	80 37       	cpi	r24, 0x70	; 112
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <vfprintf+0x25a>
    1c0a:	88 37       	cpi	r24, 0x78	; 120
    1c0c:	21 f0       	breq	.+8      	; 0x1c16 <vfprintf+0x260>
    1c0e:	af c0       	rjmp	.+350    	; 0x1d6e <vfprintf+0x3b8>
    1c10:	2f 2f       	mov	r18, r31
    1c12:	20 61       	ori	r18, 0x10	; 16
    1c14:	b2 2e       	mov	r11, r18
    1c16:	b4 fe       	sbrs	r11, 4
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <vfprintf+0x27e>
    1c1a:	8b 2d       	mov	r24, r11
    1c1c:	84 60       	ori	r24, 0x04	; 4
    1c1e:	b8 2e       	mov	r11, r24
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <vfprintf+0x27e>
    1c22:	24 ff       	sbrs	r18, 4
    1c24:	0a c0       	rjmp	.+20     	; 0x1c3a <vfprintf+0x284>
    1c26:	9f 2f       	mov	r25, r31
    1c28:	96 60       	ori	r25, 0x06	; 6
    1c2a:	b9 2e       	mov	r11, r25
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <vfprintf+0x284>
    1c2e:	28 e0       	ldi	r18, 0x08	; 8
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	05 c0       	rjmp	.+10     	; 0x1c3e <vfprintf+0x288>
    1c34:	20 e1       	ldi	r18, 0x10	; 16
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x288>
    1c3a:	20 e1       	ldi	r18, 0x10	; 16
    1c3c:	32 e0       	ldi	r19, 0x02	; 2
    1c3e:	f8 01       	movw	r30, r16
    1c40:	b7 fe       	sbrs	r11, 7
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <vfprintf+0x29c>
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	0c 5f       	subi	r16, 0xFC	; 252
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <vfprintf+0x2a8>
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 5f       	subi	r16, 0xFE	; 254
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	a4 01       	movw	r20, r8
    1c60:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__ultoa_invert>
    1c64:	a8 2e       	mov	r10, r24
    1c66:	a8 18       	sub	r10, r8
    1c68:	fb 2d       	mov	r31, r11
    1c6a:	ff 77       	andi	r31, 0x7F	; 127
    1c6c:	bf 2e       	mov	r11, r31
    1c6e:	b6 fe       	sbrs	r11, 6
    1c70:	0b c0       	rjmp	.+22     	; 0x1c88 <vfprintf+0x2d2>
    1c72:	2b 2d       	mov	r18, r11
    1c74:	2e 7f       	andi	r18, 0xFE	; 254
    1c76:	a5 14       	cp	r10, r5
    1c78:	50 f4       	brcc	.+20     	; 0x1c8e <vfprintf+0x2d8>
    1c7a:	b4 fe       	sbrs	r11, 4
    1c7c:	0a c0       	rjmp	.+20     	; 0x1c92 <vfprintf+0x2dc>
    1c7e:	b2 fc       	sbrc	r11, 2
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <vfprintf+0x2dc>
    1c82:	2b 2d       	mov	r18, r11
    1c84:	2e 7e       	andi	r18, 0xEE	; 238
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <vfprintf+0x2dc>
    1c88:	7a 2c       	mov	r7, r10
    1c8a:	2b 2d       	mov	r18, r11
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <vfprintf+0x2de>
    1c8e:	7a 2c       	mov	r7, r10
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <vfprintf+0x2de>
    1c92:	75 2c       	mov	r7, r5
    1c94:	24 ff       	sbrs	r18, 4
    1c96:	0d c0       	rjmp	.+26     	; 0x1cb2 <vfprintf+0x2fc>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ea 0d       	add	r30, r10
    1c9c:	f1 1d       	adc	r31, r1
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 33       	cpi	r24, 0x30	; 48
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <vfprintf+0x2f2>
    1ca4:	29 7e       	andi	r18, 0xE9	; 233
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <vfprintf+0x304>
    1ca8:	22 ff       	sbrs	r18, 2
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <vfprintf+0x302>
    1cac:	73 94       	inc	r7
    1cae:	73 94       	inc	r7
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <vfprintf+0x304>
    1cb2:	82 2f       	mov	r24, r18
    1cb4:	86 78       	andi	r24, 0x86	; 134
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0x304>
    1cb8:	73 94       	inc	r7
    1cba:	23 fd       	sbrc	r18, 3
    1cbc:	13 c0       	rjmp	.+38     	; 0x1ce4 <vfprintf+0x32e>
    1cbe:	20 ff       	sbrs	r18, 0
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x318>
    1cc2:	5a 2c       	mov	r5, r10
    1cc4:	73 14       	cp	r7, r3
    1cc6:	18 f4       	brcc	.+6      	; 0x1cce <vfprintf+0x318>
    1cc8:	53 0c       	add	r5, r3
    1cca:	57 18       	sub	r5, r7
    1ccc:	73 2c       	mov	r7, r3
    1cce:	73 14       	cp	r7, r3
    1cd0:	68 f4       	brcc	.+26     	; 0x1cec <vfprintf+0x336>
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	2c 87       	std	Y+12, r18	; 0x0c
    1cda:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1cde:	73 94       	inc	r7
    1ce0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce2:	f5 cf       	rjmp	.-22     	; 0x1cce <vfprintf+0x318>
    1ce4:	73 14       	cp	r7, r3
    1ce6:	10 f4       	brcc	.+4      	; 0x1cec <vfprintf+0x336>
    1ce8:	37 18       	sub	r3, r7
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <vfprintf+0x338>
    1cec:	31 2c       	mov	r3, r1
    1cee:	24 ff       	sbrs	r18, 4
    1cf0:	12 c0       	rjmp	.+36     	; 0x1d16 <vfprintf+0x360>
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	80 e3       	ldi	r24, 0x30	; 48
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	2c 87       	std	Y+12, r18	; 0x0c
    1cfa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1cfe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d00:	22 ff       	sbrs	r18, 2
    1d02:	17 c0       	rjmp	.+46     	; 0x1d32 <vfprintf+0x37c>
    1d04:	21 ff       	sbrs	r18, 1
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x358>
    1d08:	88 e5       	ldi	r24, 0x58	; 88
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x35c>
    1d0e:	88 e7       	ldi	r24, 0x78	; 120
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	b7 01       	movw	r22, r14
    1d14:	0c c0       	rjmp	.+24     	; 0x1d2e <vfprintf+0x378>
    1d16:	82 2f       	mov	r24, r18
    1d18:	86 78       	andi	r24, 0x86	; 134
    1d1a:	59 f0       	breq	.+22     	; 0x1d32 <vfprintf+0x37c>
    1d1c:	21 fd       	sbrc	r18, 1
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <vfprintf+0x36e>
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <vfprintf+0x370>
    1d24:	8b e2       	ldi	r24, 0x2B	; 43
    1d26:	27 fd       	sbrc	r18, 7
    1d28:	8d e2       	ldi	r24, 0x2D	; 45
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1d32:	a5 14       	cp	r10, r5
    1d34:	38 f4       	brcc	.+14     	; 0x1d44 <vfprintf+0x38e>
    1d36:	b7 01       	movw	r22, r14
    1d38:	80 e3       	ldi	r24, 0x30	; 48
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1d40:	5a 94       	dec	r5
    1d42:	f7 cf       	rjmp	.-18     	; 0x1d32 <vfprintf+0x37c>
    1d44:	aa 94       	dec	r10
    1d46:	f4 01       	movw	r30, r8
    1d48:	ea 0d       	add	r30, r10
    1d4a:	f1 1d       	adc	r31, r1
    1d4c:	80 81       	ld	r24, Z
    1d4e:	b7 01       	movw	r22, r14
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1d56:	a1 10       	cpse	r10, r1
    1d58:	f5 cf       	rjmp	.-22     	; 0x1d44 <vfprintf+0x38e>
    1d5a:	33 20       	and	r3, r3
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <vfprintf+0x3aa>
    1d5e:	51 ce       	rjmp	.-862    	; 0x1a02 <vfprintf+0x4c>
    1d60:	b7 01       	movw	r22, r14
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1d6a:	3a 94       	dec	r3
    1d6c:	f6 cf       	rjmp	.-20     	; 0x1d5a <vfprintf+0x3a4>
    1d6e:	f7 01       	movw	r30, r14
    1d70:	86 81       	ldd	r24, Z+6	; 0x06
    1d72:	97 81       	ldd	r25, Z+7	; 0x07
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x3c4>
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	2c 96       	adiw	r28, 0x0c	; 12
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	3f 90       	pop	r3
    1da8:	2f 90       	pop	r2
    1daa:	08 95       	ret

00001dac <__eerd_byte_m1284p>:
    1dac:	f9 99       	sbic	0x1f, 1	; 31
    1dae:	fe cf       	rjmp	.-4      	; 0x1dac <__eerd_byte_m1284p>
    1db0:	92 bd       	out	0x22, r25	; 34
    1db2:	81 bd       	out	0x21, r24	; 33
    1db4:	f8 9a       	sbi	0x1f, 0	; 31
    1db6:	99 27       	eor	r25, r25
    1db8:	80 b5       	in	r24, 0x20	; 32
    1dba:	08 95       	ret

00001dbc <__eewr_byte_m1284p>:
    1dbc:	26 2f       	mov	r18, r22

00001dbe <__eewr_r18_m1284p>:
    1dbe:	f9 99       	sbic	0x1f, 1	; 31
    1dc0:	fe cf       	rjmp	.-4      	; 0x1dbe <__eewr_r18_m1284p>
    1dc2:	1f ba       	out	0x1f, r1	; 31
    1dc4:	92 bd       	out	0x22, r25	; 34
    1dc6:	81 bd       	out	0x21, r24	; 33
    1dc8:	20 bd       	out	0x20, r18	; 32
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	fa 9a       	sbi	0x1f, 2	; 31
    1dd0:	f9 9a       	sbi	0x1f, 1	; 31
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	08 95       	ret

00001dd8 <strnlen_P>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	05 90       	lpm	r0, Z+
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	70 40       	sbci	r23, 0x00	; 0
    1de0:	01 10       	cpse	r0, r1
    1de2:	d8 f7       	brcc	.-10     	; 0x1dda <strnlen_P+0x2>
    1de4:	80 95       	com	r24
    1de6:	90 95       	com	r25
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	08 95       	ret

00001dee <strnlen>:
    1dee:	fc 01       	movw	r30, r24
    1df0:	61 50       	subi	r22, 0x01	; 1
    1df2:	70 40       	sbci	r23, 0x00	; 0
    1df4:	01 90       	ld	r0, Z+
    1df6:	01 10       	cpse	r0, r1
    1df8:	d8 f7       	brcc	.-10     	; 0x1df0 <strnlen+0x2>
    1dfa:	80 95       	com	r24
    1dfc:	90 95       	com	r25
    1dfe:	8e 0f       	add	r24, r30
    1e00:	9f 1f       	adc	r25, r31
    1e02:	08 95       	ret

00001e04 <fputc>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	18 2f       	mov	r17, r24
    1e0e:	09 2f       	mov	r16, r25
    1e10:	eb 01       	movw	r28, r22
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	81 fd       	sbrc	r24, 1
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <fputc+0x1a>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
    1e1c:	20 c0       	rjmp	.+64     	; 0x1e5e <fputc+0x5a>
    1e1e:	82 ff       	sbrs	r24, 2
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <fputc+0x3e>
    1e22:	4e 81       	ldd	r20, Y+6	; 0x06
    1e24:	5f 81       	ldd	r21, Y+7	; 0x07
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	42 17       	cp	r20, r18
    1e2c:	53 07       	cpc	r21, r19
    1e2e:	7c f4       	brge	.+30     	; 0x1e4e <fputc+0x4a>
    1e30:	e8 81       	ld	r30, Y
    1e32:	f9 81       	ldd	r31, Y+1	; 0x01
    1e34:	9f 01       	movw	r18, r30
    1e36:	2f 5f       	subi	r18, 0xFF	; 255
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	39 83       	std	Y+1, r19	; 0x01
    1e3c:	28 83       	st	Y, r18
    1e3e:	10 83       	st	Z, r17
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <fputc+0x4a>
    1e42:	e8 85       	ldd	r30, Y+8	; 0x08
    1e44:	f9 85       	ldd	r31, Y+9	; 0x09
    1e46:	81 2f       	mov	r24, r17
    1e48:	09 95       	icall
    1e4a:	89 2b       	or	r24, r25
    1e4c:	29 f7       	brne	.-54     	; 0x1e18 <fputc+0x14>
    1e4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e50:	3f 81       	ldd	r19, Y+7	; 0x07
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	3f 83       	std	Y+7, r19	; 0x07
    1e58:	2e 83       	std	Y+6, r18	; 0x06
    1e5a:	81 2f       	mov	r24, r17
    1e5c:	90 2f       	mov	r25, r16
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <__ultoa_invert>:
    1e68:	fa 01       	movw	r30, r20
    1e6a:	aa 27       	eor	r26, r26
    1e6c:	28 30       	cpi	r18, 0x08	; 8
    1e6e:	51 f1       	breq	.+84     	; 0x1ec4 <__ultoa_invert+0x5c>
    1e70:	20 31       	cpi	r18, 0x10	; 16
    1e72:	81 f1       	breq	.+96     	; 0x1ed4 <__ultoa_invert+0x6c>
    1e74:	e8 94       	clt
    1e76:	6f 93       	push	r22
    1e78:	6e 7f       	andi	r22, 0xFE	; 254
    1e7a:	6e 5f       	subi	r22, 0xFE	; 254
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	af 4f       	sbci	r26, 0xFF	; 255
    1e84:	b1 e0       	ldi	r27, 0x01	; 1
    1e86:	3e d0       	rcall	.+124    	; 0x1f04 <__ultoa_invert+0x9c>
    1e88:	b4 e0       	ldi	r27, 0x04	; 4
    1e8a:	3c d0       	rcall	.+120    	; 0x1f04 <__ultoa_invert+0x9c>
    1e8c:	67 0f       	add	r22, r23
    1e8e:	78 1f       	adc	r23, r24
    1e90:	89 1f       	adc	r24, r25
    1e92:	9a 1f       	adc	r25, r26
    1e94:	a1 1d       	adc	r26, r1
    1e96:	68 0f       	add	r22, r24
    1e98:	79 1f       	adc	r23, r25
    1e9a:	8a 1f       	adc	r24, r26
    1e9c:	91 1d       	adc	r25, r1
    1e9e:	a1 1d       	adc	r26, r1
    1ea0:	6a 0f       	add	r22, r26
    1ea2:	71 1d       	adc	r23, r1
    1ea4:	81 1d       	adc	r24, r1
    1ea6:	91 1d       	adc	r25, r1
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	20 d0       	rcall	.+64     	; 0x1eec <__ultoa_invert+0x84>
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <__ultoa_invert+0x48>
    1eae:	68 94       	set
    1eb0:	3f 91       	pop	r19
    1eb2:	2a e0       	ldi	r18, 0x0A	; 10
    1eb4:	26 9f       	mul	r18, r22
    1eb6:	11 24       	eor	r1, r1
    1eb8:	30 19       	sub	r19, r0
    1eba:	30 5d       	subi	r19, 0xD0	; 208
    1ebc:	31 93       	st	Z+, r19
    1ebe:	de f6       	brtc	.-74     	; 0x1e76 <__ultoa_invert+0xe>
    1ec0:	cf 01       	movw	r24, r30
    1ec2:	08 95       	ret
    1ec4:	46 2f       	mov	r20, r22
    1ec6:	47 70       	andi	r20, 0x07	; 7
    1ec8:	40 5d       	subi	r20, 0xD0	; 208
    1eca:	41 93       	st	Z+, r20
    1ecc:	b3 e0       	ldi	r27, 0x03	; 3
    1ece:	0f d0       	rcall	.+30     	; 0x1eee <__ultoa_invert+0x86>
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0x5c>
    1ed2:	f6 cf       	rjmp	.-20     	; 0x1ec0 <__ultoa_invert+0x58>
    1ed4:	46 2f       	mov	r20, r22
    1ed6:	4f 70       	andi	r20, 0x0F	; 15
    1ed8:	40 5d       	subi	r20, 0xD0	; 208
    1eda:	4a 33       	cpi	r20, 0x3A	; 58
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <__ultoa_invert+0x7c>
    1ede:	49 5d       	subi	r20, 0xD9	; 217
    1ee0:	31 fd       	sbrc	r19, 1
    1ee2:	40 52       	subi	r20, 0x20	; 32
    1ee4:	41 93       	st	Z+, r20
    1ee6:	02 d0       	rcall	.+4      	; 0x1eec <__ultoa_invert+0x84>
    1ee8:	a9 f7       	brne	.-22     	; 0x1ed4 <__ultoa_invert+0x6c>
    1eea:	ea cf       	rjmp	.-44     	; 0x1ec0 <__ultoa_invert+0x58>
    1eec:	b4 e0       	ldi	r27, 0x04	; 4
    1eee:	a6 95       	lsr	r26
    1ef0:	97 95       	ror	r25
    1ef2:	87 95       	ror	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	ba 95       	dec	r27
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__ultoa_invert+0x86>
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	61 05       	cpc	r22, r1
    1f00:	71 05       	cpc	r23, r1
    1f02:	08 95       	ret
    1f04:	9b 01       	movw	r18, r22
    1f06:	ac 01       	movw	r20, r24
    1f08:	0a 2e       	mov	r0, r26
    1f0a:	06 94       	lsr	r0
    1f0c:	57 95       	ror	r21
    1f0e:	47 95       	ror	r20
    1f10:	37 95       	ror	r19
    1f12:	27 95       	ror	r18
    1f14:	ba 95       	dec	r27
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0xa2>
    1f18:	62 0f       	add	r22, r18
    1f1a:	73 1f       	adc	r23, r19
    1f1c:	84 1f       	adc	r24, r20
    1f1e:	95 1f       	adc	r25, r21
    1f20:	a0 1d       	adc	r26, r0
    1f22:	08 95       	ret

00001f24 <_exit>:
    1f24:	f8 94       	cli

00001f26 <__stop_program>:
    1f26:	ff cf       	rjmp	.-2      	; 0x1f26 <__stop_program>
