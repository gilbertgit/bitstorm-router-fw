
spike_bitstorm_router.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00002f12  00002fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000656  00800138  00800138  00002fde  2**0
                  ALLOC
  3 .stab         000056b8  00000000  00000000  00002fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d90  00000000  00000000  00008698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b428  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  0000b440  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fc  00000000  00000000  0000b4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000050  00000000  00000000  0000b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000175  00000000  00000000  0000b80c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_20>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__vector_28>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	64 65       	ori	r22, 0x54	; 84
      8e:	62 75       	andi	r22, 0x52	; 82
      90:	67 3a       	cpi	r22, 0xA7	; 167
      92:	20 00       	.word	0x0020	; ????

00000094 <DEBUG_hex>:
      94:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000000a5 <__c.2280>:
      a5:	25 6c 75 20 00                                      %lu .

000000aa <__c.2286>:
      aa:	48 45 4c 4c 4f 20 57 4f 52 4c 44 0d 0a 00           HELLO WORLD...

000000b8 <BTLE_hex>:
      b8:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000000c9 <__c.2201>:
      c9:	72 73 73 69 3d 25 64 20 62 61 74 74 3d 25 64 20     rssi=%d batt=%d 
      d9:	74 65 6d 70 3d 25 64 20 6d 61 63 3d 25 64 20 0d     temp=%d mac=%d .
      e9:	0a 00 00                                            ...

000000ec <_tag>:
      ec:	6d 61 69 6e 3a 20 00 00                             main: ..

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d0 e4       	ldi	r29, 0x40	; 64
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e2 e1       	ldi	r30, 0x12	; 18
     108:	ff e2       	ldi	r31, 0x2F	; 47
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 33       	cpi	r26, 0x38	; 56
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	27 e0       	ldi	r18, 0x07	; 7
     11c:	a8 e3       	ldi	r26, 0x38	; 56
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ae 38       	cpi	r26, 0x8E	; 142
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <main>
     12e:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <wan_init>:

// queue management
queue_t wan_queue;

void wan_init()
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
	wan_usart_init();
     13e:	0e 94 1b 08 	call	0x1036	; 0x1036 <wan_usart_init>


	//wan_driver_init();
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <wan_set_cts>:

void wan_set_cts()
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
	//pd0 low
	PORTD &= ~_BV(PD0);
     150:	8b e2       	ldi	r24, 0x2B	; 43
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2b e2       	ldi	r18, 0x2B	; 43
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	2e 7f       	andi	r18, 0xFE	; 254
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <wan_get_rts>:

uint8_t wan_get_rts()
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
	// return logic high or low
	return (PIND & _BV(PD1));
     170:	89 e2       	ldi	r24, 0x29	; 41
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	fc 01       	movw	r30, r24
     176:	80 81       	ld	r24, Z
     178:	82 70       	andi	r24, 0x02	; 2
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <wan_tick>:


void wan_tick()
{
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	00 d0       	rcall	.+0      	; 0x186 <wan_tick+0x6>
     186:	00 d0       	rcall	.+0      	; 0x188 <wan_tick+0x8>
     188:	1f 92       	push	r1
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
	wan_driver_tick();
     18e:	0e 94 0e 01 	call	0x21c	; 0x21c <wan_driver_tick>

	// check to see if we have a new message
	if(wan_queue.count > 0) {
     192:	80 91 51 05 	lds	r24, 0x0551
     196:	90 91 52 05 	lds	r25, 0x0552
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	99 f0       	breq	.+38     	; 0x1c4 <wan_tick+0x44>

		queue_header_t *qh;
		qh = wan_queue.head;
     19e:	80 91 53 05 	lds	r24, 0x0553
     1a2:	90 91 54 05 	lds	r25, 0x0554
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01

		wan_msg_t *msg = (wan_msg_t *) QUEUE_DATA(qh);
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	06 96       	adiw	r24, 0x06	; 6
     1b0:	9c 83       	std	Y+4, r25	; 0x04
     1b2:	8b 83       	std	Y+3, r24	; 0x03
		// TODO: Handle Messages
		// do something with the message

		// Dequeue the message
		queue_results_t  result = queue_remove(&wan_queue, (queue_header_t*) msg);
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	9c 81       	ldd	r25, Y+4	; 0x04
     1b8:	bc 01       	movw	r22, r24
     1ba:	8f e4       	ldi	r24, 0x4F	; 79
     1bc:	95 e0       	ldi	r25, 0x05	; 5
     1be:	0e 94 9d 0b 	call	0x173a	; 0x173a <queue_remove>
     1c2:	8d 83       	std	Y+5, r24	; 0x05

	}
}
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <wan_enqueue>:

queue_results_t wan_enqueue(wan_msg_t *msg)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <wan_enqueue+0x6>
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	9b 83       	std	Y+3, r25	; 0x03
     1e2:	8a 83       	std	Y+2, r24	; 0x02
	//queue_results_t result = queue_enqueue(&wan_queue, &msg, sizeof(wan_msg_t));
	queue_results_t result = queue_enqueue(&wan_queue, msg, sizeof(wan_msg_t));
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	9b 81       	ldd	r25, Y+3	; 0x03
     1e8:	4d e0       	ldi	r20, 0x0D	; 13
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	bc 01       	movw	r22, r24
     1ee:	8f e4       	ldi	r24, 0x4F	; 79
     1f0:	95 e0       	ldi	r25, 0x05	; 5
     1f2:	0e 94 bf 09 	call	0x137e	; 0x137e <queue_enqueue>
     1f6:	89 83       	std	Y+1, r24	; 0x01

	return result;
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <wan_driver_init>:

static uint8_t wan_parse_nybble(char c);
static wan_msg_t wan_handle_packet(char * buffer);

void wan_driver_init()
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	//queue_init(&wan_queue, WAN_MSG_QUEUE_SIZE);
	init_buffer();
     20e:	0e 94 2d 01 	call	0x25a	; 0x25a <init_buffer>
	init_lines();
     212:	0e 94 40 01 	call	0x280	; 0x280 <init_lines>
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <wan_driver_tick>:

void wan_driver_tick()
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <wan_driver_tick+0x6>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	if(wan_usart_data_available()) {
     226:	0e 94 82 08 	call	0x1104	; 0x1104 <wan_usart_data_available>
     22a:	88 23       	and	r24, r24
     22c:	89 f0       	breq	.+34     	; 0x250 <wan_driver_tick+0x34>
		if(handle_data()) {
     22e:	0e 94 4f 01 	call	0x29e	; 0x29e <handle_data>
     232:	88 23       	and	r24, r24
     234:	69 f0       	breq	.+26     	; 0x250 <wan_driver_tick+0x34>

			char *ptr = NULL;
     236:	1a 82       	std	Y+2, r1	; 0x02
     238:	19 82       	std	Y+1, r1	; 0x01
			// handle the new line
			// TODO: review warning
			if(parse_data(WAN_TKSTART, &ptr) == WAN_TKFOUND) {
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	bc 01       	movw	r22, r24
     240:	8a e2       	ldi	r24, 0x2A	; 42
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 89 01 	call	0x312	; 0x312 <parse_data>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	11 f4       	brne	.+4      	; 0x250 <wan_driver_tick+0x34>

				// TODO: enqueue the message that came into USART1
				//if(msg.mac != 0) {
					//queue_results_t result = wan_enqueue(&msg);
				//}
				init_lines();
     24c:	0e 94 40 01 	call	0x280	; 0x280 <init_lines>
			}
		}
	}
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <init_buffer>:

static void init_buffer()
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
	wan_line_index = 0;
     262:	10 92 3c 01 	sts	0x013C, r1
     266:	10 92 3b 01 	sts	0x013B, r1
	memset(wan_line_buffer, '\0', sizeof(wan_line_buffer));
     26a:	41 e8       	ldi	r20, 0x81	; 129
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	8b e5       	ldi	r24, 0x5B	; 91
     274:	95 e0       	ldi	r25, 0x05	; 5
     276:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <init_lines>:

static void init_lines()
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
	memset(wan_lines, '\0', sizeof(wan_lines));
     288:	41 e8       	ldi	r20, 0x81	; 129
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	8c ed       	ldi	r24, 0xDC	; 220
     292:	95 e0       	ldi	r25, 0x05	; 5
     294:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <handle_data>:

bool handle_data()
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62

	char c = wan_usart_data_read();
     2a8:	0e 94 95 08 	call	0x112a	; 0x112a <wan_usart_data_read>
     2ac:	89 83       	std	Y+1, r24	; 0x01

	// ignore null terminated strings
	if(c == '\0') return false;
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	88 23       	and	r24, r24
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <handle_data+0x1a>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	29 c0       	rjmp	.+82     	; 0x30a <handle_data+0x6c>
	// prevent buffer overrun
	if(wan_line_index >= WAN_MAX_CHARS) return false;
     2b8:	80 91 3b 01 	lds	r24, 0x013B
     2bc:	90 91 3c 01 	lds	r25, 0x013C
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	91 05       	cpc	r25, r1
     2c4:	14 f0       	brlt	.+4      	; 0x2ca <handle_data+0x2c>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	20 c0       	rjmp	.+64     	; 0x30a <handle_data+0x6c>

	// store character in btle_line_buffer
	wan_line_buffer[wan_line_index] = c;
     2ca:	80 91 3b 01 	lds	r24, 0x013B
     2ce:	90 91 3c 01 	lds	r25, 0x013C
     2d2:	85 5a       	subi	r24, 0xA5	; 165
     2d4:	9a 4f       	sbci	r25, 0xFA	; 250
     2d6:	29 81       	ldd	r18, Y+1	; 0x01
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
	wan_line_index++;
     2dc:	80 91 3b 01 	lds	r24, 0x013B
     2e0:	90 91 3c 01 	lds	r25, 0x013C
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	90 93 3c 01 	sts	0x013C, r25
     2ea:	80 93 3b 01 	sts	0x013B, r24

	// check for end of line
	if(c == WAN_TKEND) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	8a 30       	cpi	r24, 0x0A	; 10
     2f2:	51 f4       	brne	.+20     	; 0x308 <handle_data+0x6a>
		// copy new message into buffer
		strcpy(wan_lines, wan_line_buffer);
     2f4:	6b e5       	ldi	r22, 0x5B	; 91
     2f6:	75 e0       	ldi	r23, 0x05	; 5
     2f8:	8c ed       	ldi	r24, 0xDC	; 220
     2fa:	95 e0       	ldi	r25, 0x05	; 5
     2fc:	0e 94 e6 13 	call	0x27cc	; 0x27cc <strcpy>
		init_buffer();
     300:	0e 94 2d 01 	call	0x25a	; 0x25a <init_buffer>
		return true;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	01 c0       	rjmp	.+2      	; 0x30a <handle_data+0x6c>
	}

	return false;
     308:	80 e0       	ldi	r24, 0x00	; 0
}
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <parse_data>:

static uint8_t parse_data(char *token, char **out)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <parse_data+0x6>
     318:	00 d0       	rcall	.+0      	; 0x31a <parse_data+0x8>
     31a:	00 d0       	rcall	.+0      	; 0x31c <parse_data+0xa>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	9c 83       	std	Y+4, r25	; 0x04
     322:	8b 83       	std	Y+3, r24	; 0x03
     324:	7e 83       	std	Y+6, r23	; 0x06
     326:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t *ptr = NULL;
     328:	1a 82       	std	Y+2, r1	; 0x02
     32a:	19 82       	std	Y+1, r1	; 0x01
	// TODO: review warning
	if((ptr == strstr(wan_lines, token)))
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
     32e:	9c 81       	ldd	r25, Y+4	; 0x04
     330:	bc 01       	movw	r22, r24
     332:	8c ed       	ldi	r24, 0xDC	; 220
     334:	95 e0       	ldi	r25, 0x05	; 5
     336:	0e 94 ed 13 	call	0x27da	; 0x27da <strstr>
     33a:	9c 01       	movw	r18, r24
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	69 f4       	brne	.+26     	; 0x360 <parse_data+0x4e>
	{
		if(out != NULL) *out = ptr;
     346:	8d 81       	ldd	r24, Y+5	; 0x05
     348:	9e 81       	ldd	r25, Y+6	; 0x06
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	39 f0       	breq	.+14     	; 0x35c <parse_data+0x4a>
     34e:	8d 81       	ldd	r24, Y+5	; 0x05
     350:	9e 81       	ldd	r25, Y+6	; 0x06
     352:	29 81       	ldd	r18, Y+1	; 0x01
     354:	3a 81       	ldd	r19, Y+2	; 0x02
     356:	fc 01       	movw	r30, r24
     358:	31 83       	std	Z+1, r19	; 0x01
     35a:	20 83       	st	Z, r18
		return WAN_TKFOUND;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <parse_data+0x50>
	}
	else
		return WAN_TKNOTFOUND;
     360:	80 e0       	ldi	r24, 0x00	; 0
}
     362:	26 96       	adiw	r28, 0x06	; 6
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <wan_handle_packet>:

wan_msg_t wan_handle_packet(char * buffer)
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	61 97       	sbiw	r28, 0x11	; 17
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	9f 87       	std	Y+15, r25	; 0x0f
     38a:	8e 87       	std	Y+14, r24	; 0x0e
     38c:	79 8b       	std	Y+17, r23	; 0x11
     38e:	68 8b       	std	Y+16, r22	; 0x10
	wan_msg_t wan_msg;



	return wan_msg;
     390:	8e 85       	ldd	r24, Y+14	; 0x0e
     392:	9f 85       	ldd	r25, Y+15	; 0x0f
     394:	4d e0       	ldi	r20, 0x0D	; 13
     396:	9e 01       	movw	r18, r28
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	f9 01       	movw	r30, r18
     39e:	dc 01       	movw	r26, r24
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	4a 95       	dec	r20
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <wan_handle_packet+0x2c>

}
     3a8:	8e 85       	ldd	r24, Y+14	; 0x0e
     3aa:	9f 85       	ldd	r25, Y+15	; 0x0f
     3ac:	61 96       	adiw	r28, 0x11	; 17
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <wan_parse_nybble>:

uint8_t wan_parse_nybble(char c)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <wan_parse_nybble+0x6>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	8a 83       	std	Y+2, r24	; 0x02
	if (c >= 'A' && c <= 'F')
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	81 34       	cpi	r24, 0x41	; 65
     3ce:	30 f0       	brcs	.+12     	; 0x3dc <wan_parse_nybble+0x1e>
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	87 34       	cpi	r24, 0x47	; 71
     3d4:	18 f4       	brcc	.+6      	; 0x3dc <wan_parse_nybble+0x1e>
		c = c | 0x20;
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	80 62       	ori	r24, 0x20	; 32
     3da:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i=0; i<16; i++)
     3dc:	19 82       	std	Y+1, r1	; 0x01
     3de:	0f c0       	rjmp	.+30     	; 0x3fe <wan_parse_nybble+0x40>
	{
		if (WAN_HEX_DIGITS[i] == c)
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	8a 5f       	subi	r24, 0xFA	; 250
     3e8:	9e 4f       	sbci	r25, 0xFE	; 254
     3ea:	fc 01       	movw	r30, r24
     3ec:	90 81       	ld	r25, Z
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	98 17       	cp	r25, r24
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <wan_parse_nybble+0x3a>
			return i;
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <wan_parse_nybble+0x48>

uint8_t wan_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i=0; i<16; i++)
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	89 83       	std	Y+1, r24	; 0x01
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	80 31       	cpi	r24, 0x10	; 16
     402:	70 f3       	brcs	.-36     	; 0x3e0 <wan_parse_nybble+0x22>
	{
		if (WAN_HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
     404:	80 e8       	ldi	r24, 0x80	; 128
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <clock_init>:

volatile clock_time_t clock_millis;
//volatile clock_time_t future;

void clock_init()
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
	// timer ctc mode
		TCCR0A |= _BV(WGM01);
     418:	84 e4       	ldi	r24, 0x44	; 68
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	24 e4       	ldi	r18, 0x44	; 68
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	f9 01       	movw	r30, r18
     422:	20 81       	ld	r18, Z
     424:	22 60       	ori	r18, 0x02	; 2
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18

		// F_CPU/64/1000 = 125
		OCR0A = F_CPU/64/1000;
     42a:	87 e4       	ldi	r24, 0x47	; 71
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	2d e7       	ldi	r18, 0x7D	; 125
     430:	fc 01       	movw	r30, r24
     432:	20 83       	st	Z, r18
		// Enable timer set prescalar to 64
		TCCR0B |= _BV(CS01) | _BV(CS00);
     434:	85 e4       	ldi	r24, 0x45	; 69
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	25 e4       	ldi	r18, 0x45	; 69
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	23 60       	ori	r18, 0x03	; 3
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18

		// Enable Output Compare Match A
		TIMSK0 = _BV(OCIE0A);
     446:	8e e6       	ldi	r24, 0x6E	; 110
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	22 e0       	ldi	r18, 0x02	; 2
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <clock_time>:

clock_time_t clock_time()
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	return clock_millis;
     45e:	80 91 5d 06 	lds	r24, 0x065D
     462:	90 91 5e 06 	lds	r25, 0x065E
     466:	a0 91 5f 06 	lds	r26, 0x065F
     46a:	b0 91 60 06 	lds	r27, 0x0660
}
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <delay_millis>:

void delay_millis(clock_time_t millis)
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	28 97       	sbiw	r28, 0x08	; 8
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	6d 83       	std	Y+5, r22	; 0x05
     48e:	7e 83       	std	Y+6, r23	; 0x06
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	98 87       	std	Y+8, r25	; 0x08
	clock_time_t future = clock_time() + millis;
     494:	0e 94 2b 02 	call	0x456	; 0x456 <clock_time>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
     49c:	8d 81       	ldd	r24, Y+5	; 0x05
     49e:	9e 81       	ldd	r25, Y+6	; 0x06
     4a0:	af 81       	ldd	r26, Y+7	; 0x07
     4a2:	b8 85       	ldd	r27, Y+8	; 0x08
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	a4 1f       	adc	r26, r20
     4aa:	b5 1f       	adc	r27, r21
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	ab 83       	std	Y+3, r26	; 0x03
     4b2:	bc 83       	std	Y+4, r27	; 0x04

	while(true)
	{
		if(clock_time() > future)
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <clock_time>
     4b8:	9b 01       	movw	r18, r22
     4ba:	ac 01       	movw	r20, r24
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	ab 81       	ldd	r26, Y+3	; 0x03
     4c2:	bc 81       	ldd	r27, Y+4	; 0x04
     4c4:	82 17       	cp	r24, r18
     4c6:	93 07       	cpc	r25, r19
     4c8:	a4 07       	cpc	r26, r20
     4ca:	b5 07       	cpc	r27, r21
     4cc:	08 f4       	brcc	.+2      	; 0x4d0 <delay_millis+0x58>
		{
			break;
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <delay_millis+0x5a>
		}
	}
     4d0:	f1 cf       	rjmp	.-30     	; 0x4b4 <delay_millis+0x3c>
}
     4d2:	28 96       	adiw	r28, 0x08	; 8
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	00 90 5f 00 	lds	r0, 0x005F
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	af 93       	push	r26
     4f6:	bf 93       	push	r27
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	clock_millis++;
     500:	80 91 5d 06 	lds	r24, 0x065D
     504:	90 91 5e 06 	lds	r25, 0x065E
     508:	a0 91 5f 06 	lds	r26, 0x065F
     50c:	b0 91 60 06 	lds	r27, 0x0660
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	a1 1d       	adc	r26, r1
     514:	b1 1d       	adc	r27, r1
     516:	80 93 5d 06 	sts	0x065D, r24
     51a:	90 93 5e 06 	sts	0x065E, r25
     51e:	a0 93 5f 06 	sts	0x065F, r26
     522:	b0 93 60 06 	sts	0x0660, r27
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	0f 90       	pop	r0
     534:	00 92 5f 00 	sts	0x005F, r0
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <isr_tick>:

void isr_tick()
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
	clock_millis++;
     546:	80 91 5d 06 	lds	r24, 0x065D
     54a:	90 91 5e 06 	lds	r25, 0x065E
     54e:	a0 91 5f 06 	lds	r26, 0x065F
     552:	b0 91 60 06 	lds	r27, 0x0660
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	a1 1d       	adc	r26, r1
     55a:	b1 1d       	adc	r27, r1
     55c:	80 93 5d 06 	sts	0x065D, r24
     560:	90 93 5e 06 	sts	0x065E, r25
     564:	a0 93 5f 06 	sts	0x065F, r26
     568:	b0 93 60 06 	sts	0x0660, r27
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <config_init>:
//#include "../math/fast_math.h"

config_t config;

void config_init()
{
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	config.var_bool = false;
     57a:	10 92 61 06 	sts	0x0661, r1
	config.var_int8_t = 0;
     57e:	10 92 68 06 	sts	0x0668, r1
	config.var_int16_t = 0;
     582:	10 92 67 06 	sts	0x0667, r1
     586:	10 92 66 06 	sts	0x0666, r1
	config.var_int32_t = 0;
     58a:	10 92 62 06 	sts	0x0662, r1
     58e:	10 92 63 06 	sts	0x0663, r1
     592:	10 92 64 06 	sts	0x0664, r1
     596:	10 92 65 06 	sts	0x0665, r1
	config.var_uint8_t = 0;
     59a:	10 92 6f 06 	sts	0x066F, r1
	config.var_uint16_t = 0;
     59e:	10 92 6e 06 	sts	0x066E, r1
     5a2:	10 92 6d 06 	sts	0x066D, r1
	config.var_uint32_t = 0;
     5a6:	10 92 69 06 	sts	0x0669, r1
     5aa:	10 92 6a 06 	sts	0x066A, r1
     5ae:	10 92 6b 06 	sts	0x066B, r1
     5b2:	10 92 6c 06 	sts	0x066C, r1

}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <load_config>:


void load_config()
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <write_config>:

void write_config()
{
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62

}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <_debug_init>:
debug_out_cb_t debug_out_cb;

int _debug_putch(char data, FILE *dummy);

void _debug_init(debug_rx_cb_t cb)
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	00 d0       	rcall	.+0      	; 0x5de <_debug_init+0x6>
     5de:	1f 92       	push	r1
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	9b 83       	std	Y+3, r25	; 0x03
     5e6:	8a 83       	std	Y+2, r24	; 0x02
	//UBRR0H = UBRRH_VALUE;
	//UBRR0L = UBRRL_VALUE;

	uint8_t baudrate = 51; // 9600
     5e8:	83 e3       	ldi	r24, 0x33	; 51
     5ea:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char) (baudrate>>8);
     5ec:	85 ec       	ldi	r24, 0xC5	; 197
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	29 81       	ldd	r18, Y+1	; 0x01
     5f2:	22 2f       	mov	r18, r18
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	23 2f       	mov	r18, r19
     5f8:	33 0f       	add	r19, r19
     5fa:	33 0b       	sbc	r19, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) baudrate;
     600:	84 ec       	ldi	r24, 0xC4	; 196
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	29 81       	ldd	r18, Y+1	; 0x01
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18

	UCSR0B |= (1<<RXCIE0);
     60a:	81 ec       	ldi	r24, 0xC1	; 193
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	21 ec       	ldi	r18, 0xC1	; 193
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	20 68       	ori	r18, 0x80	; 128
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
	//UCSR0A |= _BV(U2X0);
//#else
	//UCSR0A &= ~(_BV(U2X0));
//#endif

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     61c:	81 ec       	ldi	r24, 0xC1	; 193
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	21 ec       	ldi	r18, 0xC1	; 193
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	28 61       	ori	r18, 0x18	; 24
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     62e:	82 ec       	ldi	r24, 0xC2	; 194
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	22 ec       	ldi	r18, 0xC2	; 194
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	26 60       	ori	r18, 0x06	; 6
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18

	_debug_set_rx_cb(cb);
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_debug_set_rx_cb>
	fdevopen(_debug_putch, NULL);
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	88 e9       	ldi	r24, 0x98	; 152
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 07 14 	call	0x280e	; 0x280e <fdevopen>
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <USART_RX_vect>:


ISR(DEBUG_ISR_VECTOR)
{
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	00 90 5f 00 	lds	r0, 0x005F
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	00 90 5b 00 	lds	r0, 0x005B
     670:	0f 92       	push	r0
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
     678:	5f 93       	push	r21
     67a:	6f 93       	push	r22
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	char data = UDR0;
     694:	86 ec       	ldi	r24, 0xC6	; 198
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	89 83       	std	Y+1, r24	; 0x01
	if (debug_rx_cb != 0) debug_rx_cb(data);
     69e:	80 91 72 06 	lds	r24, 0x0672
     6a2:	90 91 73 06 	lds	r25, 0x0673
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <USART_RX_vect+0x58>
     6aa:	20 91 72 06 	lds	r18, 0x0672
     6ae:	30 91 73 06 	lds	r19, 0x0673
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	f9 01       	movw	r30, r18
     6b6:	09 95       	icall
}
     6b8:	0f 90       	pop	r0
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	ff 91       	pop	r31
     6c0:	ef 91       	pop	r30
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	7f 91       	pop	r23
     6cc:	6f 91       	pop	r22
     6ce:	5f 91       	pop	r21
     6d0:	4f 91       	pop	r20
     6d2:	3f 91       	pop	r19
     6d4:	2f 91       	pop	r18
     6d6:	0f 90       	pop	r0
     6d8:	00 92 5b 00 	sts	0x005B, r0
     6dc:	0f 90       	pop	r0
     6de:	00 92 5f 00 	sts	0x005F, r0
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <_debug_set_rx_cb>:

void _debug_set_rx_cb(debug_rx_cb_t cb)
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <_debug_set_rx_cb+0x6>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	9a 83       	std	Y+2, r25	; 0x02
     6f4:	89 83       	std	Y+1, r24	; 0x01
	debug_rx_cb = cb;
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	90 93 73 06 	sts	0x0673, r25
     6fe:	80 93 72 06 	sts	0x0672, r24
}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_debug_set_out_cb>:

void _debug_set_out_cb(debug_out_cb_t func)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <_debug_set_out_cb+0x6>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	89 83       	std	Y+1, r24	; 0x01
	debug_out_cb = func;
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	90 93 71 06 	sts	0x0671, r25
     722:	80 93 70 06 	sts	0x0670, r24
}
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <_debug_putch>:

int _debug_putch(char data, FILE *dummy)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <_debug_putch+0x6>
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	7b 83       	std	Y+3, r23	; 0x03
     740:	6a 83       	std	Y+2, r22	; 0x02
	_debug_byte((uint8_t) data);
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_debug_byte>

	if (debug_out_cb)
     748:	80 91 70 06 	lds	r24, 0x0670
     74c:	90 91 71 06 	lds	r25, 0x0671
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	39 f0       	breq	.+14     	; 0x762 <_debug_putch+0x32>
	debug_out_cb((uint8_t)data);
     754:	20 91 70 06 	lds	r18, 0x0670
     758:	30 91 71 06 	lds	r19, 0x0671
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	f9 01       	movw	r30, r18
     760:	09 95       	icall

	return 0;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
}
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <_debug_stringz>:

void _debug_stringz( char* data )
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <_debug_stringz+0x6>
     778:	1f 92       	push	r1
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	9b 83       	std	Y+3, r25	; 0x03
     780:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c = *data;
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	9b 81       	ldd	r25, Y+3	; 0x03
     786:	fc 01       	movw	r30, r24
     788:	80 81       	ld	r24, Z
     78a:	89 83       	std	Y+1, r24	; 0x01

	while (c) {
     78c:	1a c0       	rjmp	.+52     	; 0x7c2 <_debug_stringz+0x50>
		while (!( UCSR0A & (1<<UDRE0)));
     78e:	00 00       	nop
     790:	80 ec       	ldi	r24, 0xC0	; 192
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fc 01       	movw	r30, r24
     796:	80 81       	ld	r24, Z
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	80 72       	andi	r24, 0x20	; 32
     79e:	99 27       	eor	r25, r25
     7a0:	00 97       	sbiw	r24, 0x00	; 0
     7a2:	b1 f3       	breq	.-20     	; 0x790 <_debug_stringz+0x1e>
		UDR0 = c;
     7a4:	86 ec       	ldi	r24, 0xC6	; 198
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	29 81       	ldd	r18, Y+1	; 0x01
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
		c = *(++data);
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	9b 83       	std	Y+3, r25	; 0x03
     7b6:	8a 83       	std	Y+2, r24	; 0x02
     7b8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ba:	9b 81       	ldd	r25, Y+3	; 0x03
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	89 83       	std	Y+1, r24	; 0x01

void _debug_stringz( char* data )
{
	unsigned char c = *data;

	while (c) {
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	88 23       	and	r24, r24
     7c6:	19 f7       	brne	.-58     	; 0x78e <_debug_stringz+0x1c>
		while (!( UCSR0A & (1<<UDRE0)));
		UDR0 = c;
		c = *(++data);
	}
}
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <_debug_byte>:

void _debug_byte(uint8_t b)
{
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSR0A & (1<<UDRE0)));
     7e0:	00 00       	nop
     7e2:	80 ec       	ldi	r24, 0xC0	; 192
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	80 72       	andi	r24, 0x20	; 32
     7f0:	99 27       	eor	r25, r25
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	b1 f3       	breq	.-20     	; 0x7e2 <_debug_byte+0xe>
	UDR0 = b;
     7f6:	86 ec       	ldi	r24, 0xC6	; 198
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	29 81       	ldd	r18, Y+1	; 0x01
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
}
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <_debug_byte_as_hex>:

void _debug_byte_as_hex( unsigned char byte )
{
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	28 97       	sbiw	r28, 0x08	; 8
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	88 87       	std	Y+8, r24	; 0x08
	unsigned char c;

	c = pgm_read_byte(&DEBUG_hex[(byte >> 4)]);
     81e:	88 85       	ldd	r24, Y+8	; 0x08
     820:	82 95       	swap	r24
     822:	8f 70       	andi	r24, 0x0F	; 15
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	8c 56       	subi	r24, 0x6C	; 108
     82a:	9f 4f       	sbci	r25, 0xFF	; 255
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	9a 81       	ldd	r25, Y+2	; 0x02
     834:	fc 01       	movw	r30, r24
     836:	84 91       	lpm	r24, Z
     838:	8b 83       	std	Y+3, r24	; 0x03
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	8c 83       	std	Y+4, r24	; 0x04
	while ( !( UCSR0A & (1<<UDRE0)));
     83e:	00 00       	nop
     840:	80 ec       	ldi	r24, 0xC0	; 192
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	80 72       	andi	r24, 0x20	; 32
     84e:	99 27       	eor	r25, r25
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	b1 f3       	breq	.-20     	; 0x840 <_debug_byte_as_hex+0x38>
	UDR0 = c;
     854:	86 ec       	ldi	r24, 0xC6	; 198
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2c 81       	ldd	r18, Y+4	; 0x04
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18

	c = pgm_read_byte(&DEBUG_hex[(byte & 0x0f)]);
     85e:	88 85       	ldd	r24, Y+8	; 0x08
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	8f 70       	andi	r24, 0x0F	; 15
     866:	99 27       	eor	r25, r25
     868:	8c 56       	subi	r24, 0x6C	; 108
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	9e 83       	std	Y+6, r25	; 0x06
     86e:	8d 83       	std	Y+5, r24	; 0x05
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9e 81       	ldd	r25, Y+6	; 0x06
     874:	fc 01       	movw	r30, r24
     876:	84 91       	lpm	r24, Z
     878:	8f 83       	std	Y+7, r24	; 0x07
     87a:	8f 81       	ldd	r24, Y+7	; 0x07
     87c:	8c 83       	std	Y+4, r24	; 0x04
	while ( !( UCSR0A & (1<<UDRE0)));
     87e:	00 00       	nop
     880:	80 ec       	ldi	r24, 0xC0	; 192
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 72       	andi	r24, 0x20	; 32
     88e:	99 27       	eor	r25, r25
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	b1 f3       	breq	.-20     	; 0x880 <_debug_byte_as_hex+0x78>
	UDR0 = c;
     894:	86 ec       	ldi	r24, 0xC6	; 198
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	2c 81       	ldd	r18, Y+4	; 0x04
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
}
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_debug_hex_dump>:

void _debug_hex_dump( uint8_t * data, int length)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <_debug_hex_dump+0x6>
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <_debug_hex_dump+0x8>
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <_debug_hex_dump+0xa>
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	9c 83       	std	Y+4, r25	; 0x04
     8c0:	8b 83       	std	Y+3, r24	; 0x03
     8c2:	7e 83       	std	Y+6, r23	; 0x06
     8c4:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<length;i++)
     8c6:	1a 82       	std	Y+2, r1	; 0x02
     8c8:	19 82       	std	Y+1, r1	; 0x01
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <_debug_hex_dump+0x40>
	{
		//printf_P(PSTR("%02X "), (uint8_t)data[i]);
		_debug_byte_as_hex((unsigned char)data[i]);
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	2b 81       	ldd	r18, Y+3	; 0x03
     8d2:	3c 81       	ldd	r19, Y+4	; 0x04
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	0e 94 04 04 	call	0x808	; 0x808 <_debug_byte_as_hex>
		_debug_byte((uint8_t)' ');
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_debug_byte>
	UDR0 = c;
}

void _debug_hex_dump( uint8_t * data, int length)
{
	for (int i=0;i<length;i++)
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	9a 83       	std	Y+2, r25	; 0x02
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	29 81       	ldd	r18, Y+1	; 0x01
     8f2:	3a 81       	ldd	r19, Y+2	; 0x02
     8f4:	8d 81       	ldd	r24, Y+5	; 0x05
     8f6:	9e 81       	ldd	r25, Y+6	; 0x06
     8f8:	28 17       	cp	r18, r24
     8fa:	39 07       	cpc	r19, r25
     8fc:	3c f3       	brlt	.-50     	; 0x8cc <_debug_hex_dump+0x1c>
	{
		//printf_P(PSTR("%02X "), (uint8_t)data[i]);
		_debug_byte_as_hex((unsigned char)data[i]);
		_debug_byte((uint8_t)' ');
	}
	_debug_byte((uint8_t)'\r');
     8fe:	8d e0       	ldi	r24, 0x0D	; 13
     900:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_debug_byte>
	_debug_byte((uint8_t)'\n');
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_debug_byte>
	//printf_P(PSTR("\r\n"));
}
     90a:	26 96       	adiw	r28, 0x06	; 6
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <_debug_log>:

void _debug_log(const char * prefix, const char * fmt, ...)
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	00 d0       	rcall	.+0      	; 0x922 <_debug_log+0x6>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	if (prefix)
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	29 f1       	breq	.+74     	; 0x978 <_debug_log+0x5c>
	{
		printf_P(PSTR("%lu "), clock_millis);
     92e:	80 91 5d 06 	lds	r24, 0x065D
     932:	90 91 5e 06 	lds	r25, 0x065E
     936:	a0 91 5f 06 	lds	r26, 0x065F
     93a:	b0 91 60 06 	lds	r27, 0x0660
     93e:	25 ea       	ldi	r18, 0xA5	; 165
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	4b 2f       	mov	r20, r27
     944:	4f 93       	push	r20
     946:	4a 2f       	mov	r20, r26
     948:	4f 93       	push	r20
     94a:	49 2f       	mov	r20, r25
     94c:	4f 93       	push	r20
     94e:	8f 93       	push	r24
     950:	83 2f       	mov	r24, r19
     952:	8f 93       	push	r24
     954:	82 2f       	mov	r24, r18
     956:	8f 93       	push	r24
     958:	0e 94 52 14 	call	0x28a4	; 0x28a4 <printf_P>
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
		printf_P(prefix);
     968:	88 85       	ldd	r24, Y+8	; 0x08
     96a:	8f 93       	push	r24
     96c:	8f 81       	ldd	r24, Y+7	; 0x07
     96e:	8f 93       	push	r24
     970:	0e 94 52 14 	call	0x28a4	; 0x28a4 <printf_P>
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
	}
	va_list argptr;
	va_start(argptr, fmt);
     978:	ce 01       	movw	r24, r28
     97a:	0b 96       	adiw	r24, 0x0b	; 11
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	// Important to use vfprintf_P due to variatic signature
	// Note that there is no vprintf_P - we have to manually direct to stdout
	vfprintf_P(stdout, fmt, argptr);
     980:	49 81       	ldd	r20, Y+1	; 0x01
     982:	5a 81       	ldd	r21, Y+2	; 0x02
     984:	80 91 8a 07 	lds	r24, 0x078A
     988:	90 91 8b 07 	lds	r25, 0x078B
     98c:	29 85       	ldd	r18, Y+9	; 0x09
     98e:	3a 85       	ldd	r19, Y+10	; 0x0a
     990:	b9 01       	movw	r22, r18
     992:	0e 94 a5 14 	call	0x294a	; 0x294a <vfprintf_P>
	va_end(argptr);
};
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <debug_test>:


void debug_test(void)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	aa 97       	sbiw	r28, 0x2a	; 42
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	LOG("HELLO WORLD\r\n");
     9b4:	8a ea       	ldi	r24, 0xAA	; 170
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	29 2f       	mov	r18, r25
     9ba:	2f 93       	push	r18
     9bc:	8f 93       	push	r24
     9be:	8c e8       	ldi	r24, 0x8C	; 140
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	89 2f       	mov	r24, r25
     9c4:	8f 93       	push	r24
     9c6:	8c e8       	ldi	r24, 0x8C	; 140
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	8f 93       	push	r24
     9cc:	0e 94 8e 04 	call	0x91c	; 0x91c <_debug_log>
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
	// Serial
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <debug_test+0x44>
	UDR0 = 'C';
     9da:	86 ec       	ldi	r24, 0xC6	; 198
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	23 e4       	ldi	r18, 0x43	; 67
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
void debug_test(void)
{
	LOG("HELLO WORLD\r\n");
	// Serial
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     9e4:	80 ec       	ldi	r24, 0xC0	; 192
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	80 72       	andi	r24, 0x20	; 32
     9f2:	99 27       	eor	r25, r25
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	89 f3       	breq	.-30     	; 0x9da <debug_test+0x3a>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	aa ef       	ldi	r26, 0xFA	; 250
     9fe:	b3 e4       	ldi	r27, 0x43	; 67
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	9a 83       	std	Y+2, r25	; 0x02
     a04:	ab 83       	std	Y+3, r26	; 0x03
     a06:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a ef       	ldi	r20, 0xFA	; 250
     a0e:	54 e4       	ldi	r21, 0x44	; 68
     a10:	69 81       	ldd	r22, Y+1	; 0x01
     a12:	7a 81       	ldd	r23, Y+2	; 0x02
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	8d 83       	std	Y+5, r24	; 0x05
     a22:	9e 83       	std	Y+6, r25	; 0x06
     a24:	af 83       	std	Y+7, r26	; 0x07
     a26:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e8       	ldi	r20, 0x80	; 128
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	6d 81       	ldd	r22, Y+5	; 0x05
     a32:	7e 81       	ldd	r23, Y+6	; 0x06
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	98 85       	ldd	r25, Y+8	; 0x08
     a38:	0e 94 96 11 	call	0x232c	; 0x232c <__cmpsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	2c f4       	brge	.+10     	; 0xa4a <debug_test+0xaa>
		__ticks = 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	9a 87       	std	Y+10, r25	; 0x0a
     a46:	89 87       	std	Y+9, r24	; 0x09
     a48:	3f c0       	rjmp	.+126    	; 0xac8 <debug_test+0x128>
	else if (__tmp > 65535)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	4f e7       	ldi	r20, 0x7F	; 127
     a50:	57 e4       	ldi	r21, 0x47	; 71
     a52:	6d 81       	ldd	r22, Y+5	; 0x05
     a54:	7e 81       	ldd	r23, Y+6	; 0x06
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	98 85       	ldd	r25, Y+8	; 0x08
     a5a:	0e 94 13 12 	call	0x2426	; 0x2426 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	4c f5       	brge	.+82     	; 0xab4 <debug_test+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e2       	ldi	r20, 0x20	; 32
     a68:	51 e4       	ldi	r21, 0x41	; 65
     a6a:	69 81       	ldd	r22, Y+1	; 0x01
     a6c:	7a 81       	ldd	r23, Y+2	; 0x02
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	9a 87       	std	Y+10, r25	; 0x0a
     a88:	89 87       	std	Y+9, r24	; 0x09
     a8a:	0f c0       	rjmp	.+30     	; 0xaaa <debug_test+0x10a>
     a8c:	88 ec       	ldi	r24, 0xC8	; 200
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9c 87       	std	Y+12, r25	; 0x0c
     a92:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a94:	8b 85       	ldd	r24, Y+11	; 0x0b
     a96:	9c 85       	ldd	r25, Y+12	; 0x0c
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <debug_test+0xf8>
     a9c:	9c 87       	std	Y+12, r25	; 0x0c
     a9e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa0:	89 85       	ldd	r24, Y+9	; 0x09
     aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	9a 87       	std	Y+10, r25	; 0x0a
     aa8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aaa:	89 85       	ldd	r24, Y+9	; 0x09
     aac:	9a 85       	ldd	r25, Y+10	; 0x0a
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	69 f7       	brne	.-38     	; 0xa8c <debug_test+0xec>
     ab2:	14 c0       	rjmp	.+40     	; 0xadc <debug_test+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab4:	6d 81       	ldd	r22, Y+5	; 0x05
     ab6:	7e 81       	ldd	r23, Y+6	; 0x06
     ab8:	8f 81       	ldd	r24, Y+7	; 0x07
     aba:	98 85       	ldd	r25, Y+8	; 0x08
     abc:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	9a 87       	std	Y+10, r25	; 0x0a
     ac6:	89 87       	std	Y+9, r24	; 0x09
     ac8:	89 85       	ldd	r24, Y+9	; 0x09
     aca:	9a 85       	ldd	r25, Y+10	; 0x0a
     acc:	9e 87       	std	Y+14, r25	; 0x0e
     ace:	8d 87       	std	Y+13, r24	; 0x0d
     ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <debug_test+0x134>
     ad8:	9e 87       	std	Y+14, r25	; 0x0e
     ada:	8d 87       	std	Y+13, r24	; 0x0d
	UDR0 = 'C';
	_delay_ms(500);
	UDR0 = 'P';
     adc:	86 ec       	ldi	r24, 0xC6	; 198
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	20 e5       	ldi	r18, 0x50	; 80
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 83       	st	Z, r18
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	aa ef       	ldi	r26, 0xFA	; 250
     aec:	b3 e4       	ldi	r27, 0x43	; 67
     aee:	8f 87       	std	Y+15, r24	; 0x0f
     af0:	98 8b       	std	Y+16, r25	; 0x10
     af2:	a9 8b       	std	Y+17, r26	; 0x11
     af4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a ef       	ldi	r20, 0xFA	; 250
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	6f 85       	ldd	r22, Y+15	; 0x0f
     b00:	78 89       	ldd	r23, Y+16	; 0x10
     b02:	89 89       	ldd	r24, Y+17	; 0x11
     b04:	9a 89       	ldd	r25, Y+18	; 0x12
     b06:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8b 8b       	std	Y+19, r24	; 0x13
     b10:	9c 8b       	std	Y+20, r25	; 0x14
     b12:	ad 8b       	std	Y+21, r26	; 0x15
     b14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	6b 89       	ldd	r22, Y+19	; 0x13
     b20:	7c 89       	ldd	r23, Y+20	; 0x14
     b22:	8d 89       	ldd	r24, Y+21	; 0x15
     b24:	9e 89       	ldd	r25, Y+22	; 0x16
     b26:	0e 94 96 11 	call	0x232c	; 0x232c <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	2c f4       	brge	.+10     	; 0xb38 <debug_test+0x198>
		__ticks = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	98 8f       	std	Y+24, r25	; 0x18
     b34:	8f 8b       	std	Y+23, r24	; 0x17
     b36:	3f c0       	rjmp	.+126    	; 0xbb6 <debug_test+0x216>
	else if (__tmp > 65535)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	6b 89       	ldd	r22, Y+19	; 0x13
     b42:	7c 89       	ldd	r23, Y+20	; 0x14
     b44:	8d 89       	ldd	r24, Y+21	; 0x15
     b46:	9e 89       	ldd	r25, Y+22	; 0x16
     b48:	0e 94 13 12 	call	0x2426	; 0x2426 <__gesf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	4c f5       	brge	.+82     	; 0xba2 <debug_test+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	6f 85       	ldd	r22, Y+15	; 0x0f
     b5a:	78 89       	ldd	r23, Y+16	; 0x10
     b5c:	89 89       	ldd	r24, Y+17	; 0x11
     b5e:	9a 89       	ldd	r25, Y+18	; 0x12
     b60:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	98 8f       	std	Y+24, r25	; 0x18
     b76:	8f 8b       	std	Y+23, r24	; 0x17
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <debug_test+0x1f8>
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9a 8f       	std	Y+26, r25	; 0x1a
     b80:	89 8f       	std	Y+25, r24	; 0x19
     b82:	89 8d       	ldd	r24, Y+25	; 0x19
     b84:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <debug_test+0x1e6>
     b8a:	9a 8f       	std	Y+26, r25	; 0x1a
     b8c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8e:	8f 89       	ldd	r24, Y+23	; 0x17
     b90:	98 8d       	ldd	r25, Y+24	; 0x18
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	98 8f       	std	Y+24, r25	; 0x18
     b96:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b98:	8f 89       	ldd	r24, Y+23	; 0x17
     b9a:	98 8d       	ldd	r25, Y+24	; 0x18
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	69 f7       	brne	.-38     	; 0xb7a <debug_test+0x1da>
     ba0:	14 c0       	rjmp	.+40     	; 0xbca <debug_test+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba2:	6b 89       	ldd	r22, Y+19	; 0x13
     ba4:	7c 89       	ldd	r23, Y+20	; 0x14
     ba6:	8d 89       	ldd	r24, Y+21	; 0x15
     ba8:	9e 89       	ldd	r25, Y+22	; 0x16
     baa:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	98 8f       	std	Y+24, r25	; 0x18
     bb4:	8f 8b       	std	Y+23, r24	; 0x17
     bb6:	8f 89       	ldd	r24, Y+23	; 0x17
     bb8:	98 8d       	ldd	r25, Y+24	; 0x18
     bba:	9c 8f       	std	Y+28, r25	; 0x1c
     bbc:	8b 8f       	std	Y+27, r24	; 0x1b
     bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <debug_test+0x222>
     bc6:	9c 8f       	std	Y+28, r25	; 0x1c
     bc8:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(500);
	UDR0 = 'H';
     bca:	86 ec       	ldi	r24, 0xC6	; 198
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	28 e4       	ldi	r18, 0x48	; 72
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	aa ef       	ldi	r26, 0xFA	; 250
     bda:	b3 e4       	ldi	r27, 0x43	; 67
     bdc:	8d 8f       	std	Y+29, r24	; 0x1d
     bde:	9e 8f       	std	Y+30, r25	; 0x1e
     be0:	af 8f       	std	Y+31, r26	; 0x1f
     be2:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a ef       	ldi	r20, 0xFA	; 250
     bea:	54 e4       	ldi	r21, 0x44	; 68
     bec:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bee:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bf2:	98 a1       	ldd	r25, Y+32	; 0x20
     bf4:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	89 a3       	std	Y+33, r24	; 0x21
     bfe:	9a a3       	std	Y+34, r25	; 0x22
     c00:	ab a3       	std	Y+35, r26	; 0x23
     c02:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	69 a1       	ldd	r22, Y+33	; 0x21
     c0e:	7a a1       	ldd	r23, Y+34	; 0x22
     c10:	8b a1       	ldd	r24, Y+35	; 0x23
     c12:	9c a1       	ldd	r25, Y+36	; 0x24
     c14:	0e 94 96 11 	call	0x232c	; 0x232c <__cmpsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <debug_test+0x286>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e a3       	std	Y+38, r25	; 0x26
     c22:	8d a3       	std	Y+37, r24	; 0x25
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <debug_test+0x304>
	else if (__tmp > 65535)
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	57 e4       	ldi	r21, 0x47	; 71
     c2e:	69 a1       	ldd	r22, Y+33	; 0x21
     c30:	7a a1       	ldd	r23, Y+34	; 0x22
     c32:	8b a1       	ldd	r24, Y+35	; 0x23
     c34:	9c a1       	ldd	r25, Y+36	; 0x24
     c36:	0e 94 13 12 	call	0x2426	; 0x2426 <__gesf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <debug_test+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c48:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4c:	98 a1       	ldd	r25, Y+32	; 0x20
     c4e:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e a3       	std	Y+38, r25	; 0x26
     c64:	8d a3       	std	Y+37, r24	; 0x25
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <debug_test+0x2e6>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	98 a7       	std	Y+40, r25	; 0x28
     c6e:	8f a3       	std	Y+39, r24	; 0x27
     c70:	8f a1       	ldd	r24, Y+39	; 0x27
     c72:	98 a5       	ldd	r25, Y+40	; 0x28
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <debug_test+0x2d4>
     c78:	98 a7       	std	Y+40, r25	; 0x28
     c7a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d a1       	ldd	r24, Y+37	; 0x25
     c7e:	9e a1       	ldd	r25, Y+38	; 0x26
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e a3       	std	Y+38, r25	; 0x26
     c84:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d a1       	ldd	r24, Y+37	; 0x25
     c88:	9e a1       	ldd	r25, Y+38	; 0x26
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <debug_test+0x2c8>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <debug_test+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	69 a1       	ldd	r22, Y+33	; 0x21
     c92:	7a a1       	ldd	r23, Y+34	; 0x22
     c94:	8b a1       	ldd	r24, Y+35	; 0x23
     c96:	9c a1       	ldd	r25, Y+36	; 0x24
     c98:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e a3       	std	Y+38, r25	; 0x26
     ca2:	8d a3       	std	Y+37, r24	; 0x25
     ca4:	8d a1       	ldd	r24, Y+37	; 0x25
     ca6:	9e a1       	ldd	r25, Y+38	; 0x26
     ca8:	9a a7       	std	Y+42, r25	; 0x2a
     caa:	89 a7       	std	Y+41, r24	; 0x29
     cac:	89 a5       	ldd	r24, Y+41	; 0x29
     cae:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <debug_test+0x310>
     cb4:	9a a7       	std	Y+42, r25	; 0x2a
     cb6:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(500);



}
     cb8:	aa 96       	adiw	r28, 0x2a	; 42
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <_btle_set_rx_cb>:
const unsigned char BTLE_hex[] PROGMEM = "0123456789ABCDEF";

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <_btle_set_rx_cb+0x6>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
	btle_rx_cb = cb;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	90 93 75 06 	sts	0x0675, r25
     ce0:	80 93 74 06 	sts	0x0674, r24
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <btle_usart_init>:

void btle_usart_init()
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
	UBRR1H = UBRRH_VALUE;
     cf6:	8d ec       	ldi	r24, 0xCD	; 205
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	10 82       	st	Z, r1
	UBRR1L = UBRRL_VALUE;
     cfe:	8c ec       	ldi	r24, 0xCC	; 204
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	2c e0       	ldi	r18, 0x0C	; 12
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     d08:	89 ec       	ldi	r24, 0xC9	; 201
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	29 ec       	ldi	r18, 0xC9	; 201
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	28 68       	ori	r18, 0x88	; 136
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     d1a:	89 ec       	ldi	r24, 0xC9	; 201
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	29 ec       	ldi	r18, 0xC9	; 201
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	28 61       	ori	r18, 0x18	; 24
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     d2c:	8a ec       	ldi	r24, 0xCA	; 202
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	2a ec       	ldi	r18, 0xCA	; 202
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	26 60       	ori	r18, 0x06	; 6
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <btle_usart_init_cb>:

// not in use at this time
void btle_usart_init_cb(btle_rx_cb_t cb)
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	00 d0       	rcall	.+0      	; 0xd4a <btle_usart_init_cb+0x6>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
	UBRR1H = UBRRH_VALUE;
     d52:	8d ec       	ldi	r24, 0xCD	; 205
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	10 82       	st	Z, r1
	UBRR1L = UBRRL_VALUE;
     d5a:	8c ec       	ldi	r24, 0xCC	; 204
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	2c e0       	ldi	r18, 0x0C	; 12
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     d64:	89 ec       	ldi	r24, 0xC9	; 201
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	29 ec       	ldi	r18, 0xC9	; 201
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	28 68       	ori	r18, 0x88	; 136
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     d76:	89 ec       	ldi	r24, 0xC9	; 201
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	29 ec       	ldi	r18, 0xC9	; 201
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	f9 01       	movw	r30, r18
     d80:	20 81       	ld	r18, Z
     d82:	28 61       	ori	r18, 0x18	; 24
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     d88:	8a ec       	ldi	r24, 0xCA	; 202
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	2a ec       	ldi	r18, 0xCA	; 202
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	f9 01       	movw	r30, r18
     d92:	20 81       	ld	r18, Z
     d94:	26 60       	ori	r18, 0x06	; 6
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18

	_btle_set_rx_cb(cb);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	0e 94 65 06 	call	0xcca	; 0xcca <_btle_set_rx_cb>
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <btle_usart_put_char>:

void btle_usart_put_char(unsigned char c)
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <btle_usart_put_char+0x6>
     db2:	1f 92       	push	r1
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	8b 83       	std	Y+3, r24	; 0x03
	int i = (unsigned int)(btle_buffer.head + 1) % BTLE_RX_BUFFER_SIZE;
     dba:	80 91 3d 03 	lds	r24, 0x033D
     dbe:	90 91 3e 03 	lds	r25, 0x033E
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	91 70       	andi	r25, 0x01	; 1
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != btle_buffer.tail) {
     dca:	20 91 3f 03 	lds	r18, 0x033F
     dce:	30 91 40 03 	lds	r19, 0x0340
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	28 17       	cp	r18, r24
     dd8:	39 07       	cpc	r19, r25
     dda:	79 f0       	breq	.+30     	; 0xdfa <btle_usart_put_char+0x4e>
		btle_buffer.buffer[btle_buffer.head] = c;
     ddc:	80 91 3d 03 	lds	r24, 0x033D
     de0:	90 91 3e 03 	lds	r25, 0x033E
     de4:	83 5c       	subi	r24, 0xC3	; 195
     de6:	9e 4f       	sbci	r25, 0xFE	; 254
     de8:	2b 81       	ldd	r18, Y+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
		btle_buffer.head = i;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	90 93 3e 03 	sts	0x033E, r25
     df6:	80 93 3d 03 	sts	0x033D, r24
	}
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <btle_usart_clear_buffer>:


void btle_usart_clear_buffer()
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	memset(&btle_buffer, 0, sizeof(BTLE_BUFFER));
     e0e:	44 e0       	ldi	r20, 0x04	; 4
     e10:	52 e0       	ldi	r21, 0x02	; 2
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	8d e3       	ldi	r24, 0x3D	; 61
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <btle_usart_data_available>:

uint8_t btle_usart_data_available()
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	return (uint8_t)(BTLE_RX_BUFFER_SIZE + btle_buffer.head - btle_buffer.tail) % BTLE_RX_BUFFER_SIZE;
     e2c:	80 91 3d 03 	lds	r24, 0x033D
     e30:	90 91 3e 03 	lds	r25, 0x033E
     e34:	28 2f       	mov	r18, r24
     e36:	80 91 3f 03 	lds	r24, 0x033F
     e3a:	90 91 40 03 	lds	r25, 0x0340
     e3e:	92 2f       	mov	r25, r18
     e40:	98 1b       	sub	r25, r24
     e42:	89 2f       	mov	r24, r25
}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <btle_usart_data_read>:

uint8_t btle_usart_data_read(void)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	1f 92       	push	r1
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
     e54:	20 91 3d 03 	lds	r18, 0x033D
     e58:	30 91 3e 03 	lds	r19, 0x033E
     e5c:	80 91 3f 03 	lds	r24, 0x033F
     e60:	90 91 40 03 	lds	r25, 0x0340
     e64:	28 17       	cp	r18, r24
     e66:	39 07       	cpc	r19, r25
     e68:	11 f4       	brne	.+4      	; 0xe6e <btle_usart_data_read+0x24>
		return -1;
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <btle_usart_data_read+0x4c>
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
     e6e:	80 91 3f 03 	lds	r24, 0x033F
     e72:	90 91 40 03 	lds	r25, 0x0340
     e76:	83 5c       	subi	r24, 0xC3	; 195
     e78:	9e 4f       	sbci	r25, 0xFE	; 254
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	89 83       	std	Y+1, r24	; 0x01
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
     e80:	80 91 3f 03 	lds	r24, 0x033F
     e84:	90 91 40 03 	lds	r25, 0x0340
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	91 70       	andi	r25, 0x01	; 1
     e8c:	90 93 40 03 	sts	0x0340, r25
     e90:	80 93 3f 03 	sts	0x033F, r24
		return c;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     e96:	0f 90       	pop	r0
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <btle_usart_transmit>:

void btle_usart_transmit(uint8_t data )
{
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	1f 92       	push	r1
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSR1A & (1<<UDRE1)));
     eaa:	00 00       	nop
     eac:	88 ec       	ldi	r24, 0xC8	; 200
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	80 72       	andi	r24, 0x20	; 32
     eba:	99 27       	eor	r25, r25
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	b1 f3       	breq	.-20     	; 0xeac <btle_usart_transmit+0xe>
	UDR1 = data;
     ec0:	8e ec       	ldi	r24, 0xCE	; 206
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	29 81       	ldd	r18, Y+1	; 0x01
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
}
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <btle_usart_transmit_bytes>:

void btle_usart_transmit_bytes(char data[], int size)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <btle_usart_transmit_bytes+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <btle_usart_transmit_bytes+0x8>
     eda:	00 d0       	rcall	.+0      	; 0xedc <btle_usart_transmit_bytes+0xa>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
     ee4:	7e 83       	std	Y+6, r23	; 0x06
     ee6:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<size;i++)
     ee8:	1a 82       	std	Y+2, r1	; 0x02
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	1c c0       	rjmp	.+56     	; 0xf26 <btle_usart_transmit_bytes+0x54>
	{
		while (!( UCSR1A & (1<<UDRE1)));
     eee:	00 00       	nop
     ef0:	88 ec       	ldi	r24, 0xC8	; 200
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	80 72       	andi	r24, 0x20	; 32
     efe:	99 27       	eor	r25, r25
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	b1 f3       	breq	.-20     	; 0xef0 <btle_usart_transmit_bytes+0x1e>
		UDR1 = data[i];
     f04:	8e ec       	ldi	r24, 0xCE	; 206
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	3a 81       	ldd	r19, Y+2	; 0x02
     f0c:	4b 81       	ldd	r20, Y+3	; 0x03
     f0e:	5c 81       	ldd	r21, Y+4	; 0x04
     f10:	24 0f       	add	r18, r20
     f12:	35 1f       	adc	r19, r21
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
	UDR1 = data;
}

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	29 81       	ldd	r18, Y+1	; 0x01
     f28:	3a 81       	ldd	r19, Y+2	; 0x02
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	ec f2       	brlt	.-70     	; 0xeee <btle_usart_transmit_bytes+0x1c>
	{
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
	}
}
     f34:	26 96       	adiw	r28, 0x06	; 6
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <btle_usart_transmit_string>:

void btle_usart_transmit_string(char * data)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <btle_usart_transmit_string+0x6>
     f4c:	1f 92       	push	r1
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9b 83       	std	Y+3, r25	; 0x03
     f54:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c = *data;
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	89 83       	std	Y+1, r24	; 0x01

	while (c) {
     f60:	1a c0       	rjmp	.+52     	; 0xf96 <btle_usart_transmit_string+0x50>
		while (!( UCSR1A & (1<<UDRE1)));
     f62:	00 00       	nop
     f64:	88 ec       	ldi	r24, 0xC8	; 200
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	80 72       	andi	r24, 0x20	; 32
     f72:	99 27       	eor	r25, r25
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	b1 f3       	breq	.-20     	; 0xf64 <btle_usart_transmit_string+0x1e>
		UDR1 = c;
     f78:	8e ec       	ldi	r24, 0xCE	; 206
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	29 81       	ldd	r18, Y+1	; 0x01
     f7e:	fc 01       	movw	r30, r24
     f80:	20 83       	st	Z, r18
		c = *(++data);
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	9b 81       	ldd	r25, Y+3	; 0x03
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	89 83       	std	Y+1, r24	; 0x01

void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	88 23       	and	r24, r24
     f9a:	19 f7       	brne	.-58     	; 0xf62 <btle_usart_transmit_string+0x1c>
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = c;
		c = *(++data);
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <__vector_28>:

ISR(BTLE_ISR_VECTOR)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	00 90 5f 00 	lds	r0, 0x005F
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	00 90 5b 00 	lds	r0, 0x005B
     fb8:	0f 92       	push	r0
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	char data = UDR1;
     fdc:	8e ec       	ldi	r24, 0xCE	; 206
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	89 83       	std	Y+1, r24	; 0x01
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	btle_usart_put_char(data);
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	0e 94 d6 06 	call	0xdac	; 0xdac <btle_usart_put_char>
	//PORTD ^= _BV(PD7);

	// debug callback to main program
	if (btle_rx_cb != 0)
     fec:	80 91 74 06 	lds	r24, 0x0674
     ff0:	90 91 75 06 	lds	r25, 0x0675
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	39 f0       	breq	.+14     	; 0x1006 <__vector_28+0x5e>
	{
		btle_rx_cb(data);
     ff8:	20 91 74 06 	lds	r18, 0x0674
     ffc:	30 91 75 06 	lds	r19, 0x0675
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	f9 01       	movw	r30, r18
    1004:	09 95       	icall
	}
}
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	00 92 5b 00 	sts	0x005B, r0
    102a:	0f 90       	pop	r0
    102c:	00 92 5f 00 	sts	0x005F, r0
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <wan_usart_init>:
#include "usart_wan.h"

WAN_BUFFER wan_buffer = {{0},0,0};

void wan_usart_init()
{
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = UBRRH_VALUE;
    103e:	85 ec       	ldi	r24, 0xC5	; 197
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
    1046:	84 ec       	ldi	r24, 0xC4	; 196
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2c e0       	ldi	r18, 0x0C	; 12
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR0B |= (1<<RXCIE0) | (1<<TXEN0);
    1050:	81 ec       	ldi	r24, 0xC1	; 193
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	21 ec       	ldi	r18, 0xC1	; 193
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	28 68       	ori	r18, 0x88	; 136
    105e:	fc 01       	movw	r30, r24
    1060:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
    1062:	81 ec       	ldi	r24, 0xC1	; 193
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	21 ec       	ldi	r18, 0xC1	; 193
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	f9 01       	movw	r30, r18
    106c:	20 81       	ld	r18, Z
    106e:	28 61       	ori	r18, 0x18	; 24
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1074:	82 ec       	ldi	r24, 0xC2	; 194
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	22 ec       	ldi	r18, 0xC2	; 194
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	f9 01       	movw	r30, r18
    107e:	20 81       	ld	r18, Z
    1080:	26 60       	ori	r18, 0x06	; 6
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <wan_usart_put_char>:

void wan_usart_put_char(unsigned char c)
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	00 d0       	rcall	.+0      	; 0x1092 <wan_usart_put_char+0x6>
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8b 83       	std	Y+3, r24	; 0x03
	int i = (unsigned int)(wan_buffer.head + 1) % WAN_RX_BUFFER_SIZE;
    109a:	80 91 41 05 	lds	r24, 0x0541
    109e:	90 91 42 05 	lds	r25, 0x0542
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	91 70       	andi	r25, 0x01	; 1
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01

		// if we should be storing the received character into the location
		// just before the tail (meaning that the head would advance to the
		// current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != wan_buffer.tail) {
    10aa:	20 91 43 05 	lds	r18, 0x0543
    10ae:	30 91 44 05 	lds	r19, 0x0544
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	28 17       	cp	r18, r24
    10b8:	39 07       	cpc	r19, r25
    10ba:	79 f0       	breq	.+30     	; 0x10da <wan_usart_put_char+0x4e>
			wan_buffer.buffer[wan_buffer.head] = c;
    10bc:	80 91 41 05 	lds	r24, 0x0541
    10c0:	90 91 42 05 	lds	r25, 0x0542
    10c4:	8f 5b       	subi	r24, 0xBF	; 191
    10c6:	9c 4f       	sbci	r25, 0xFC	; 252
    10c8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
			wan_buffer.head = i;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	90 93 42 05 	sts	0x0542, r25
    10d6:	80 93 41 05 	sts	0x0541, r24
		}
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <wan_usart_clear_buffer>:

void wan_usart_clear_buffer()
{
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	memset(&wan_buffer, 0, sizeof(WAN_BUFFER));
    10ee:	44 e0       	ldi	r20, 0x04	; 4
    10f0:	52 e0       	ldi	r21, 0x02	; 2
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	81 e4       	ldi	r24, 0x41	; 65
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <wan_usart_data_available>:

uint8_t wan_usart_data_available(void)
{
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	return (uint8_t)(WAN_RX_BUFFER_SIZE + wan_buffer.head - wan_buffer.tail) % WAN_RX_BUFFER_SIZE;
    110c:	80 91 41 05 	lds	r24, 0x0541
    1110:	90 91 42 05 	lds	r25, 0x0542
    1114:	28 2f       	mov	r18, r24
    1116:	80 91 43 05 	lds	r24, 0x0543
    111a:	90 91 44 05 	lds	r25, 0x0544
    111e:	92 2f       	mov	r25, r18
    1120:	98 1b       	sub	r25, r24
    1122:	89 2f       	mov	r24, r25
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <wan_usart_data_read>:

uint8_t wan_usart_data_read(void)
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail) {
    1134:	20 91 41 05 	lds	r18, 0x0541
    1138:	30 91 42 05 	lds	r19, 0x0542
    113c:	80 91 43 05 	lds	r24, 0x0543
    1140:	90 91 44 05 	lds	r25, 0x0544
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	11 f4       	brne	.+4      	; 0x114e <wan_usart_data_read+0x24>
		return -1;
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <wan_usart_data_read+0x4c>
	} else {
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
    114e:	80 91 43 05 	lds	r24, 0x0543
    1152:	90 91 44 05 	lds	r25, 0x0544
    1156:	8f 5b       	subi	r24, 0xBF	; 191
    1158:	9c 4f       	sbci	r25, 0xFC	; 252
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	89 83       	std	Y+1, r24	; 0x01
		wan_buffer.tail = (unsigned int)(wan_buffer.tail + 1) % WAN_RX_BUFFER_SIZE;
    1160:	80 91 43 05 	lds	r24, 0x0543
    1164:	90 91 44 05 	lds	r25, 0x0544
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	91 70       	andi	r25, 0x01	; 1
    116c:	90 93 44 05 	sts	0x0544, r25
    1170:	80 93 43 05 	sts	0x0543, r24
		return c;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1176:	0f 90       	pop	r0
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <wan_usart_transmit>:


void wan_usart_transmit(uint8_t data )
{
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	1f 92       	push	r1
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSR0A & (1<<UDRE0)));
    118a:	00 00       	nop
    118c:	80 ec       	ldi	r24, 0xC0	; 192
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	80 72       	andi	r24, 0x20	; 32
    119a:	99 27       	eor	r25, r25
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	b1 f3       	breq	.-20     	; 0x118c <wan_usart_transmit+0xe>
		UDR0 = data;
    11a0:	86 ec       	ldi	r24, 0xC6	; 198
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	29 81       	ldd	r18, Y+1	; 0x01
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
}
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <wan_usart_transmit_bytes>:

void wan_usart_transmit_bytes(char data[], int size)
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <wan_usart_transmit_bytes+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <wan_usart_transmit_bytes+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <wan_usart_transmit_bytes+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	7e 83       	std	Y+6, r23	; 0x06
    11c6:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<size;i++)
    11c8:	1a 82       	std	Y+2, r1	; 0x02
    11ca:	19 82       	std	Y+1, r1	; 0x01
    11cc:	1c c0       	rjmp	.+56     	; 0x1206 <wan_usart_transmit_bytes+0x54>
		{
			while (!( UCSR0A & (1<<UDRE0)));
    11ce:	00 00       	nop
    11d0:	80 ec       	ldi	r24, 0xC0	; 192
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	80 72       	andi	r24, 0x20	; 32
    11de:	99 27       	eor	r25, r25
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	b1 f3       	breq	.-20     	; 0x11d0 <wan_usart_transmit_bytes+0x1e>
			UDR0 = data[i];
    11e4:	86 ec       	ldi	r24, 0xC6	; 198
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	3a 81       	ldd	r19, Y+2	; 0x02
    11ec:	4b 81       	ldd	r20, Y+3	; 0x03
    11ee:	5c 81       	ldd	r21, Y+4	; 0x04
    11f0:	24 0f       	add	r18, r20
    11f2:	35 1f       	adc	r19, r21
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
		UDR0 = data;
}

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	29 81       	ldd	r18, Y+1	; 0x01
    1208:	3a 81       	ldd	r19, Y+2	; 0x02
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	28 17       	cp	r18, r24
    1210:	39 07       	cpc	r19, r25
    1212:	ec f2       	brlt	.-70     	; 0x11ce <wan_usart_transmit_bytes+0x1c>
		{
			while (!( UCSR0A & (1<<UDRE0)));
			UDR0 = data[i];
		}
}
    1214:	26 96       	adiw	r28, 0x06	; 6
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <wan_usart_transmit_string>:

void wan_usart_transmit_string(char * data)
{
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	00 d0       	rcall	.+0      	; 0x122c <wan_usart_transmit_string+0x6>
    122c:	1f 92       	push	r1
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	9b 83       	std	Y+3, r25	; 0x03
    1234:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c = *data;
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	89 83       	std	Y+1, r24	; 0x01

		while (c) {
    1240:	1a c0       	rjmp	.+52     	; 0x1276 <wan_usart_transmit_string+0x50>
			while (!( UCSR0A & (1<<UDRE0)));
    1242:	00 00       	nop
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	fc 01       	movw	r30, r24
    124a:	80 81       	ld	r24, Z
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	80 72       	andi	r24, 0x20	; 32
    1252:	99 27       	eor	r25, r25
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	b1 f3       	breq	.-20     	; 0x1244 <wan_usart_transmit_string+0x1e>
			UDR0 = c;
    1258:	86 ec       	ldi	r24, 0xC6	; 198
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
			c = *(++data);
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	9b 83       	std	Y+3, r25	; 0x03
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	fc 01       	movw	r30, r24
    1272:	80 81       	ld	r24, Z
    1274:	89 83       	std	Y+1, r24	; 0x01

void wan_usart_transmit_string(char * data)
{
	unsigned char c = *data;

		while (c) {
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	88 23       	and	r24, r24
    127a:	19 f7       	brne	.-58     	; 0x1242 <wan_usart_transmit_string+0x1c>
			while (!( UCSR0A & (1<<UDRE0)));
			UDR0 = c;
			c = *(++data);
		}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <__vector_20>:

ISR(WAN_ISR_VECTOR)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	00 90 5f 00 	lds	r0, 0x005F
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	00 90 5b 00 	lds	r0, 0x005B
    1298:	0f 92       	push	r0
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	1f 92       	push	r1
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	char data = UDR0;
    12bc:	86 ec       	ldi	r24, 0xC6	; 198
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	fc 01       	movw	r30, r24
    12c2:	80 81       	ld	r24, Z
    12c4:	89 83       	std	Y+1, r24	; 0x01
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	wan_usart_put_char(data);
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	0e 94 46 08 	call	0x108c	; 0x108c <wan_usart_put_char>
	//PORTD ^= _BV(PD7);
	//if (btle_rx_cb != 0) btle_rx_cb(data);
}
    12cc:	0f 90       	pop	r0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	00 92 5b 00 	sts	0x005B, r0
    12f0:	0f 90       	pop	r0
    12f2:	00 92 5f 00 	sts	0x005F, r0
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <queue_reset>:
// Calculate memory usage as: DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
#define MEMORY_CALC(r)		(r->data_usage + (r->count * sizeof(queue_header_t)) + (r->count * 4));


void queue_reset(queue_t * q)
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <queue_reset+0x6>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
	q->head = 0;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	fc 01       	movw	r30, r24
    1310:	15 82       	std	Z+5, r1	; 0x05
    1312:	14 82       	std	Z+4, r1	; 0x04
	q->tail = 0;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	fc 01       	movw	r30, r24
    131a:	17 82       	std	Z+7, r1	; 0x07
    131c:	16 82       	std	Z+6, r1	; 0x06
	q->count = 0;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	13 82       	std	Z+3, r1	; 0x03
    1326:	12 82       	std	Z+2, r1	; 0x02
	q->data_usage = 0;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	fc 01       	movw	r30, r24
    132e:	11 86       	std	Z+9, r1	; 0x09
    1330:	10 86       	std	Z+8, r1	; 0x08
	q->memory_usage = 0;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	fc 01       	movw	r30, r24
    1338:	13 86       	std	Z+11, r1	; 0x0b
    133a:	12 86       	std	Z+10, r1	; 0x0a
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <queue_init>:

void queue_init(queue_t * r, uint16_t max)
{
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 d0       	rcall	.+0      	; 0x134c <queue_init+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <queue_init+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	7c 83       	std	Y+4, r23	; 0x04
    1358:	6b 83       	std	Y+3, r22	; 0x03
	r->max_size = max;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	fc 01       	movw	r30, r24
    1364:	31 83       	std	Z+1, r19	; 0x01
    1366:	20 83       	st	Z, r18
	queue_reset(r);
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <queue_reset>
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <queue_enqueue>:

queue_results_t queue_enqueue(queue_t * r, void * data, uint16_t length)
{
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	60 97       	sbiw	r28, 0x10	; 16
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	9c 87       	std	Y+12, r25	; 0x0c
    1394:	8b 87       	std	Y+11, r24	; 0x0b
    1396:	7e 87       	std	Y+14, r23	; 0x0e
    1398:	6d 87       	std	Y+13, r22	; 0x0d
    139a:	58 8b       	std	Y+16, r21	; 0x10
    139c:	4f 87       	std	Y+15, r20	; 0x0f
	queue_header_t header;
	uint16_t new_size;

	if (r->max_size)
    139e:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a2:	fc 01       	movw	r30, r24
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	c1 f0       	breq	.+48     	; 0x13dc <queue_enqueue+0x5e>
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
    13ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b0:	fc 01       	movw	r30, r24
    13b2:	22 85       	ldd	r18, Z+10	; 0x0a
    13b4:	33 85       	ldd	r19, Z+11	; 0x0b
    13b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b8:	98 89       	ldd	r25, Y+16	; 0x10
    13ba:	82 0f       	add	r24, r18
    13bc:	93 1f       	adc	r25, r19
    13be:	0a 96       	adiw	r24, 0x0a	; 10
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
    13c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 81       	ld	r18, Z
    13cc:	31 81       	ldd	r19, Z+1	; 0x01
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	28 17       	cp	r18, r24
    13d4:	39 07       	cpc	r19, r25
    13d6:	10 f4       	brcc	.+4      	; 0x13dc <queue_enqueue+0x5e>
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	9d c0       	rjmp	.+314    	; 0x1516 <queue_enqueue+0x198>
	}

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);
    13dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13de:	98 89       	ldd	r25, Y+16	; 0x10
    13e0:	06 96       	adiw	r24, 0x06	; 6
    13e2:	0e 94 a2 12 	call	0x2544	; 0x2544 <malloc>
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <queue_enqueue+0x78>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 c0       	rjmp	.+288    	; 0x1516 <queue_enqueue+0x198>

	// New tail header
	header.length = length;
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	98 89       	ldd	r25, Y+16	; 0x10
    13fa:	9a 87       	std	Y+10, r25	; 0x0a
    13fc:	89 87       	std	Y+9, r24	; 0x09
	header.prev = 0;
    13fe:	1e 82       	std	Y+6, r1	; 0x06
    1400:	1d 82       	std	Y+5, r1	; 0x05
	header.next = 0;
    1402:	18 86       	std	Y+8, r1	; 0x08
    1404:	1f 82       	std	Y+7, r1	; 0x07

	// If the queue is empty,
	if (r->head == 0)
    1406:	8b 85       	ldd	r24, Y+11	; 0x0b
    1408:	9c 85       	ldd	r25, Y+12	; 0x0c
    140a:	fc 01       	movw	r30, r24
    140c:	84 81       	ldd	r24, Z+4	; 0x04
    140e:	95 81       	ldd	r25, Z+5	; 0x05
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	f9 f4       	brne	.+62     	; 0x1452 <queue_enqueue+0xd4>
	{
		// ... add this single object, and it doesn't point to anything
		r->head = obj;
    1414:	8b 85       	ldd	r24, Y+11	; 0x0b
    1416:	9c 85       	ldd	r25, Y+12	; 0x0c
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	fc 01       	movw	r30, r24
    141e:	35 83       	std	Z+5, r19	; 0x05
    1420:	24 83       	std	Z+4, r18	; 0x04
		r->tail = obj;
    1422:	8b 85       	ldd	r24, Y+11	; 0x0b
    1424:	9c 85       	ldd	r25, Y+12	; 0x0c
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	fc 01       	movw	r30, r24
    142c:	37 83       	std	Z+7, r19	; 0x07
    142e:	26 83       	std	Z+6, r18	; 0x06
		r->count = 1;
    1430:	8b 85       	ldd	r24, Y+11	; 0x0b
    1432:	9c 85       	ldd	r25, Y+12	; 0x0c
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	fc 01       	movw	r30, r24
    143a:	33 83       	std	Z+3, r19	; 0x03
    143c:	22 83       	std	Z+2, r18	; 0x02
		r->data_usage = header.length;
    143e:	29 85       	ldd	r18, Y+9	; 0x09
    1440:	3a 85       	ldd	r19, Y+10	; 0x0a
    1442:	8b 85       	ldd	r24, Y+11	; 0x0b
    1444:	9c 85       	ldd	r25, Y+12	; 0x0c
    1446:	fc 01       	movw	r30, r24
    1448:	31 87       	std	Z+9, r19	; 0x09
    144a:	20 87       	std	Z+8, r18	; 0x08
		header.next = 0;
    144c:	18 86       	std	Y+8, r1	; 0x08
    144e:	1f 82       	std	Y+7, r1	; 0x07
    1450:	33 c0       	rjmp	.+102    	; 0x14b8 <queue_enqueue+0x13a>
	}
	else
	{
		// ... otherwise, the tail grows. Make this the new tail and bump the counter
		header.prev = r->tail;
    1452:	8b 85       	ldd	r24, Y+11	; 0x0b
    1454:	9c 85       	ldd	r25, Y+12	; 0x0c
    1456:	fc 01       	movw	r30, r24
    1458:	86 81       	ldd	r24, Z+6	; 0x06
    145a:	97 81       	ldd	r25, Z+7	; 0x07
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
		r->tail->next = (queue_header_t *)obj;
    1460:	8b 85       	ldd	r24, Y+11	; 0x0b
    1462:	9c 85       	ldd	r25, Y+12	; 0x0c
    1464:	fc 01       	movw	r30, r24
    1466:	86 81       	ldd	r24, Z+6	; 0x06
    1468:	97 81       	ldd	r25, Z+7	; 0x07
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	fc 01       	movw	r30, r24
    1470:	33 83       	std	Z+3, r19	; 0x03
    1472:	22 83       	std	Z+2, r18	; 0x02
		r->tail = (queue_header_t *)obj;
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	fc 01       	movw	r30, r24
    147e:	37 83       	std	Z+7, r19	; 0x07
    1480:	26 83       	std	Z+6, r18	; 0x06
		r->count++;
    1482:	8b 85       	ldd	r24, Y+11	; 0x0b
    1484:	9c 85       	ldd	r25, Y+12	; 0x0c
    1486:	fc 01       	movw	r30, r24
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	9c 01       	movw	r18, r24
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	8b 85       	ldd	r24, Y+11	; 0x0b
    1494:	9c 85       	ldd	r25, Y+12	; 0x0c
    1496:	fc 01       	movw	r30, r24
    1498:	33 83       	std	Z+3, r19	; 0x03
    149a:	22 83       	std	Z+2, r18	; 0x02
		r->data_usage += header.length;
    149c:	8b 85       	ldd	r24, Y+11	; 0x0b
    149e:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 85       	ldd	r18, Z+8	; 0x08
    14a4:	31 85       	ldd	r19, Z+9	; 0x09
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	28 0f       	add	r18, r24
    14ac:	39 1f       	adc	r19, r25
    14ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b2:	fc 01       	movw	r30, r24
    14b4:	31 87       	std	Z+9, r19	; 0x09
    14b6:	20 87       	std	Z+8, r18	; 0x08
	}
	r->memory_usage = MEMORY_CALC(r);
    14b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    14bc:	fc 01       	movw	r30, r24
    14be:	20 85       	ldd	r18, Z+8	; 0x08
    14c0:	31 85       	ldd	r19, Z+9	; 0x09
    14c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c6:	fc 01       	movw	r30, r24
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	ac 01       	movw	r20, r24
    14d2:	44 0f       	add	r20, r20
    14d4:	55 1f       	adc	r21, r21
    14d6:	44 0f       	add	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	84 0f       	add	r24, r20
    14dc:	95 1f       	adc	r25, r21
    14de:	28 0f       	add	r18, r24
    14e0:	39 1f       	adc	r19, r25
    14e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e6:	fc 01       	movw	r30, r24
    14e8:	33 87       	std	Z+11, r19	; 0x0b
    14ea:	22 87       	std	Z+10, r18	; 0x0a

	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	26 e0       	ldi	r18, 0x06	; 6
    14f2:	fe 01       	movw	r30, r28
    14f4:	35 96       	adiw	r30, 0x05	; 5
    14f6:	dc 01       	movw	r26, r24
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	2a 95       	dec	r18
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <queue_enqueue+0x17a>
	memcpy(QUEUE_DATA(obj), data, length);
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	06 96       	adiw	r24, 0x06	; 6
    1506:	4f 85       	ldd	r20, Y+15	; 0x0f
    1508:	58 89       	ldd	r21, Y+16	; 0x10
    150a:	2d 85       	ldd	r18, Y+13	; 0x0d
    150c:	3e 85       	ldd	r19, Y+14	; 0x0e
    150e:	b9 01       	movw	r22, r18
    1510:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memcpy>

	return QUEUE_SUCCESS;
    1514:	8f ef       	ldi	r24, 0xFF	; 255
}
    1516:	60 96       	adiw	r28, 0x10	; 16
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <queue_dequeue>:

queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	00 d0       	rcall	.+0      	; 0x152e <queue_dequeue+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <queue_dequeue+0x8>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <queue_dequeue+0xa>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	7e 83       	std	Y+6, r23	; 0x06
    153c:	6d 83       	std	Y+5, r22	; 0x05
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	fc 01       	movw	r30, r24
    1544:	84 81       	ldd	r24, Z+4	; 0x04
    1546:	95 81       	ldd	r25, Z+5	; 0x05
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	11 f4       	brne	.+4      	; 0x1550 <queue_dequeue+0x28>
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	97 c0       	rjmp	.+302    	; 0x167e <queue_dequeue+0x156>

	// Reference the header
	header = (queue_header_t *)r->head;
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	fc 01       	movw	r30, r24
    1556:	84 81       	ldd	r24, Z+4	; 0x04
    1558:	95 81       	ldd	r25, Z+5	; 0x05
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01

	// Grab the data
	*dest = (void*)malloc(header->length);
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	fc 01       	movw	r30, r24
    1564:	84 81       	ldd	r24, Z+4	; 0x04
    1566:	95 81       	ldd	r25, Z+5	; 0x05
    1568:	0e 94 a2 12 	call	0x2544	; 0x2544 <malloc>
    156c:	9c 01       	movw	r18, r24
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	fc 01       	movw	r30, r24
    1574:	31 83       	std	Z+1, r19	; 0x01
    1576:	20 83       	st	Z, r18
	if (dest == 0) return QUEUE_NO_MEMORY;
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	11 f4       	brne	.+4      	; 0x1584 <queue_dequeue+0x5c>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	7d c0       	rjmp	.+250    	; 0x167e <queue_dequeue+0x156>
	memcpy(*dest, QUEUE_DATA(header), header->length);
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	44 81       	ldd	r20, Z+4	; 0x04
    158c:	55 81       	ldd	r21, Z+5	; 0x05
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	9c 01       	movw	r18, r24
    1594:	2a 5f       	subi	r18, 0xFA	; 250
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	b9 01       	movw	r22, r18
    15a4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memcpy>

	// If this was the only object, empty the queue
	if (header->next == 0)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	fc 01       	movw	r30, r24
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	a9 f4       	brne	.+42     	; 0x15e0 <queue_dequeue+0xb8>
	{
		r->head = 0;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	fc 01       	movw	r30, r24
    15bc:	15 82       	std	Z+5, r1	; 0x05
    15be:	14 82       	std	Z+4, r1	; 0x04
		r->tail = 0;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	fc 01       	movw	r30, r24
    15c6:	17 82       	std	Z+7, r1	; 0x07
    15c8:	16 82       	std	Z+6, r1	; 0x06
		r->count = 0;
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	fc 01       	movw	r30, r24
    15d0:	13 82       	std	Z+3, r1	; 0x03
    15d2:	12 82       	std	Z+2, r1	; 0x02
		r->data_usage = 0;
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	fc 01       	movw	r30, r24
    15da:	11 86       	std	Z+9, r1	; 0x09
    15dc:	10 86       	std	Z+8, r1	; 0x08
    15de:	30 c0       	rjmp	.+96     	; 0x1640 <queue_dequeue+0x118>
	}
	else
	{
		// Ring still has objects, so set the new head and adjust the count
		r->head = header->next;
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	fc 01       	movw	r30, r24
    15e6:	22 81       	ldd	r18, Z+2	; 0x02
    15e8:	33 81       	ldd	r19, Z+3	; 0x03
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	fc 01       	movw	r30, r24
    15f0:	35 83       	std	Z+5, r19	; 0x05
    15f2:	24 83       	std	Z+4, r18	; 0x04
		r->count--;
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	fc 01       	movw	r30, r24
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	9c 01       	movw	r18, r24
    1600:	21 50       	subi	r18, 0x01	; 1
    1602:	31 09       	sbc	r19, r1
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	fc 01       	movw	r30, r24
    160a:	33 83       	std	Z+3, r19	; 0x03
    160c:	22 83       	std	Z+2, r18	; 0x02
		r->data_usage -= header->length;
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	fc 01       	movw	r30, r24
    1614:	20 85       	ldd	r18, Z+8	; 0x08
    1616:	31 85       	ldd	r19, Z+9	; 0x09
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	fc 01       	movw	r30, r24
    161e:	84 81       	ldd	r24, Z+4	; 0x04
    1620:	95 81       	ldd	r25, Z+5	; 0x05
    1622:	28 1b       	sub	r18, r24
    1624:	39 0b       	sbc	r19, r25
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	fc 01       	movw	r30, r24
    162c:	31 87       	std	Z+9, r19	; 0x09
    162e:	20 87       	std	Z+8, r18	; 0x08
		((queue_header_t*)r->head)->prev = 0;
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	fc 01       	movw	r30, r24
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	95 81       	ldd	r25, Z+5	; 0x05
    163a:	fc 01       	movw	r30, r24
    163c:	11 82       	std	Z+1, r1	; 0x01
    163e:	10 82       	st	Z, r1
	}
	r->memory_usage = MEMORY_CALC(r);
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	fc 01       	movw	r30, r24
    1646:	20 85       	ldd	r18, Z+8	; 0x08
    1648:	31 85       	ldd	r19, Z+9	; 0x09
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	fc 01       	movw	r30, r24
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	ac 01       	movw	r20, r24
    165a:	44 0f       	add	r20, r20
    165c:	55 1f       	adc	r21, r21
    165e:	44 0f       	add	r20, r20
    1660:	55 1f       	adc	r21, r21
    1662:	84 0f       	add	r24, r20
    1664:	95 1f       	adc	r25, r21
    1666:	28 0f       	add	r18, r24
    1668:	39 1f       	adc	r19, r25
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	fc 01       	movw	r30, r24
    1670:	33 87       	std	Z+11, r19	; 0x0b
    1672:	22 87       	std	Z+10, r18	; 0x0a

	// Finally, free the memory
	free((void*) header);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	0e 94 3a 13 	call	0x2674	; 0x2674 <free>

	return QUEUE_SUCCESS;
    167c:	8f ef       	ldi	r24, 0xFF	; 255
}
    167e:	26 96       	adiw	r28, 0x06	; 6
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <queue_find>:

queue_results_t queue_find(queue_t * q, void * src, uint16_t length, queue_header_t ** dest)
{
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	2b 97       	sbiw	r28, 0x0b	; 11
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	9d 83       	std	Y+5, r25	; 0x05
    16a6:	8c 83       	std	Y+4, r24	; 0x04
    16a8:	7f 83       	std	Y+7, r23	; 0x07
    16aa:	6e 83       	std	Y+6, r22	; 0x06
    16ac:	59 87       	std	Y+9, r21	; 0x09
    16ae:	48 87       	std	Y+8, r20	; 0x08
    16b0:	3b 87       	std	Y+11, r19	; 0x0b
    16b2:	2a 87       	std	Y+10, r18	; 0x0a
	queue_header_t * h;
	uint8_t comp = 0;
    16b4:	1b 82       	std	Y+3, r1	; 0x03

	if (q->count == 0)
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	fc 01       	movw	r30, r24
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	39 f4       	brne	.+14     	; 0x16d2 <queue_find+0x42>
	{
		*dest = 0;
    16c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c8:	fc 01       	movw	r30, r24
    16ca:	11 82       	std	Z+1, r1	; 0x01
    16cc:	10 82       	st	Z, r1
		return QUEUE_EMPTY;
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	2b c0       	rjmp	.+86     	; 0x1728 <queue_find+0x98>
	}

	h = q->head;
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	fc 01       	movw	r30, r24
    16d8:	84 81       	ldd	r24, Z+4	; 0x04
    16da:	95 81       	ldd	r25, Z+5	; 0x05
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	while (h)
    16e0:	1e c0       	rjmp	.+60     	; 0x171e <queue_find+0x8e>
	{
		comp = memcmp(QUEUE_DATA(h), src, length);
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	06 96       	adiw	r24, 0x06	; 6
    16e8:	48 85       	ldd	r20, Y+8	; 0x08
    16ea:	59 85       	ldd	r21, Y+9	; 0x09
    16ec:	2e 81       	ldd	r18, Y+6	; 0x06
    16ee:	3f 81       	ldd	r19, Y+7	; 0x07
    16f0:	b9 01       	movw	r22, r18
    16f2:	0e 94 c9 13 	call	0x2792	; 0x2792 <memcmp>
    16f6:	8b 83       	std	Y+3, r24	; 0x03
		if (comp == 0)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 23       	and	r24, r24
    16fc:	49 f4       	brne	.+18     	; 0x1710 <queue_find+0x80>
		{
			*dest = h;
    16fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1700:	9b 85       	ldd	r25, Y+11	; 0x0b
    1702:	29 81       	ldd	r18, Y+1	; 0x01
    1704:	3a 81       	ldd	r19, Y+2	; 0x02
    1706:	fc 01       	movw	r30, r24
    1708:	31 83       	std	Z+1, r19	; 0x01
    170a:	20 83       	st	Z, r18
			return QUEUE_SUCCESS;
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <queue_find+0x98>
		}
		h = h->next;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	fc 01       	movw	r30, r24
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
		*dest = 0;
		return QUEUE_EMPTY;
	}

	h = q->head;
	while (h)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	f1 f6       	brne	.-68     	; 0x16e2 <queue_find+0x52>
		}
		h = h->next;
	}

	// If we got here, it wasn't found
	return QUEUE_NOT_FOUND;
    1726:	84 e0       	ldi	r24, 0x04	; 4
}
    1728:	2b 96       	adiw	r28, 0x0b	; 11
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <queue_remove>:

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	00 d0       	rcall	.+0      	; 0x1740 <queue_remove+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <queue_remove+0x8>
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	7c 83       	std	Y+4, r23	; 0x04
    174c:	6b 83       	std	Y+3, r22	; 0x03
	if (q->count == 0)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	fc 01       	movw	r30, r24
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	11 f4       	brne	.+4      	; 0x1760 <queue_remove+0x26>
	{
		return QUEUE_EMPTY;
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	8d c0       	rjmp	.+282    	; 0x187a <queue_remove+0x140>
	}
	else if (q->count == 1)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	51 f4       	brne	.+20     	; 0x1784 <queue_remove+0x4a>
	{
		free((void*)x);
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	0e 94 3a 13 	call	0x2674	; 0x2674 <free>
		queue_reset(q);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <queue_reset>
		return QUEUE_SUCCESS;
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	7b c0       	rjmp	.+246    	; 0x187a <queue_remove+0x140>
	}
	else
	{
		if ((queue_header_t *)(x->prev))
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	fc 01       	movw	r30, r24
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	71 f0       	breq	.+28     	; 0x17ae <queue_remove+0x74>
			((queue_header_t *)(x->prev))->next = x->next;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	fc 01       	movw	r30, r24
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	2b 81       	ldd	r18, Y+3	; 0x03
    179e:	3c 81       	ldd	r19, Y+4	; 0x04
    17a0:	f9 01       	movw	r30, r18
    17a2:	22 81       	ldd	r18, Z+2	; 0x02
    17a4:	33 81       	ldd	r19, Z+3	; 0x03
    17a6:	fc 01       	movw	r30, r24
    17a8:	33 83       	std	Z+3, r19	; 0x03
    17aa:	22 83       	std	Z+2, r18	; 0x02
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <queue_remove+0x88>
		else
			q->head = x->next;
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	fc 01       	movw	r30, r24
    17b4:	22 81       	ldd	r18, Z+2	; 0x02
    17b6:	33 81       	ldd	r19, Z+3	; 0x03
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	fc 01       	movw	r30, r24
    17be:	35 83       	std	Z+5, r19	; 0x05
    17c0:	24 83       	std	Z+4, r18	; 0x04

		if ((queue_header_t *)(x->next))
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	fc 01       	movw	r30, r24
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	71 f0       	breq	.+28     	; 0x17ec <queue_remove+0xb2>
			((queue_header_t *)(x->next))->prev = x->prev;
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	fc 01       	movw	r30, r24
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	31 81       	ldd	r19, Z+1	; 0x01
    17e4:	fc 01       	movw	r30, r24
    17e6:	31 83       	std	Z+1, r19	; 0x01
    17e8:	20 83       	st	Z, r18
    17ea:	0a c0       	rjmp	.+20     	; 0x1800 <queue_remove+0xc6>
		else
			q->tail = x->prev;
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 81       	ld	r18, Z
    17f4:	31 81       	ldd	r19, Z+1	; 0x01
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	fc 01       	movw	r30, r24
    17fc:	37 83       	std	Z+7, r19	; 0x07
    17fe:	26 83       	std	Z+6, r18	; 0x06

		q->count--;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	fc 01       	movw	r30, r24
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	9c 01       	movw	r18, r24
    180c:	21 50       	subi	r18, 0x01	; 1
    180e:	31 09       	sbc	r19, r1
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	fc 01       	movw	r30, r24
    1816:	33 83       	std	Z+3, r19	; 0x03
    1818:	22 83       	std	Z+2, r18	; 0x02
		q->data_usage -= x->length;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 85       	ldd	r18, Z+8	; 0x08
    1822:	31 85       	ldd	r19, Z+9	; 0x09
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	fc 01       	movw	r30, r24
    182a:	84 81       	ldd	r24, Z+4	; 0x04
    182c:	95 81       	ldd	r25, Z+5	; 0x05
    182e:	28 1b       	sub	r18, r24
    1830:	39 0b       	sbc	r19, r25
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	fc 01       	movw	r30, r24
    1838:	31 87       	std	Z+9, r19	; 0x09
    183a:	20 87       	std	Z+8, r18	; 0x08
		q->memory_usage = MEMORY_CALC(q);
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	fc 01       	movw	r30, r24
    1842:	20 85       	ldd	r18, Z+8	; 0x08
    1844:	31 85       	ldd	r19, Z+9	; 0x09
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	fc 01       	movw	r30, r24
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	ac 01       	movw	r20, r24
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	44 0f       	add	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	84 0f       	add	r24, r20
    1860:	95 1f       	adc	r25, r21
    1862:	28 0f       	add	r18, r24
    1864:	39 1f       	adc	r19, r25
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	fc 01       	movw	r30, r24
    186c:	33 87       	std	Z+11, r19	; 0x0b
    186e:	22 87       	std	Z+10, r18	; 0x0a
		free((void*)x);
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	0e 94 3a 13 	call	0x2674	; 0x2674 <free>
		return QUEUE_SUCCESS;
    1878:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <queue_peek_length>:

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 d0       	rcall	.+0      	; 0x188e <queue_peek_length+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <queue_peek_length+0x8>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	7c 83       	std	Y+4, r23	; 0x04
    189a:	6b 83       	std	Y+3, r22	; 0x03
	if (r->head == 0) return QUEUE_EMPTY;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	fc 01       	movw	r30, r24
    18a2:	84 81       	ldd	r24, Z+4	; 0x04
    18a4:	95 81       	ldd	r25, Z+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	11 f4       	brne	.+4      	; 0x18ae <queue_peek_length+0x26>
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	0e c0       	rjmp	.+28     	; 0x18ca <queue_peek_length+0x42>
	*length = ((queue_header_t *)r->head)->length;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	fc 01       	movw	r30, r24
    18b4:	84 81       	ldd	r24, Z+4	; 0x04
    18b6:	95 81       	ldd	r25, Z+5	; 0x05
    18b8:	fc 01       	movw	r30, r24
    18ba:	24 81       	ldd	r18, Z+4	; 0x04
    18bc:	35 81       	ldd	r19, Z+5	; 0x05
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	fc 01       	movw	r30, r24
    18c4:	31 83       	std	Z+1, r19	; 0x01
    18c6:	20 83       	st	Z, r18
	return QUEUE_SUCCESS;
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <queue_clear>:

queue_results_t queue_clear(queue_t * r)
{
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	00 d0       	rcall	.+0      	; 0x18de <queue_clear+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <queue_clear+0x8>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <queue_clear+0xa>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	fc 01       	movw	r30, r24
    18f0:	84 81       	ldd	r24, Z+4	; 0x04
    18f2:	95 81       	ldd	r25, Z+5	; 0x05
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
	while (obj)
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <queue_clear+0x40>
	{
		next = obj->next;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	fc 01       	movw	r30, r24
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		free((void *)obj);
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	0e 94 3a 13 	call	0x2674	; 0x2674 <free>
		obj = next;
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
{
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
	while (obj)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <queue_clear+0x22>
		next = obj->next;
		free((void *)obj);
		obj = next;
	}

	queue_reset(r);
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	0e 94 7e 09 	call	0x12fc	; 0x12fc <queue_reset>

	return QUEUE_SUCCESS;
    1928:	8f ef       	ldi	r24, 0xFF	; 255
}
    192a:	26 96       	adiw	r28, 0x06	; 6
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <eeprom_read>:

#include "eeprom.h"


uint8_t eeprom_read(int address)
{
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 d0       	rcall	.+0      	; 0x1942 <eeprom_read+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	return eeprom_read_byte((unsigned char *) address);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__eerd_byte_m1284p>
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <eeprom_write>:

void eeprom_write(int address, uint8_t value)
{
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <eeprom_write+0x6>
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	6b 83       	std	Y+3, r22	; 0x03
	eeprom_write_byte((unsigned char *) address, value);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	6b 81       	ldd	r22, Y+3	; 0x03
    1974:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__eewr_byte_m1284p>
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <btle_init>:

// queue management
queue_t btle_queue;

void btle_init()
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
	//btle_usart_init();
	// set portd bit 5 as output
	DDRD |= _BV(PD5);
    198c:	8a e2       	ldi	r24, 0x2A	; 42
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	2a e2       	ldi	r18, 0x2A	; 42
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	f9 01       	movw	r30, r18
    1996:	20 81       	ld	r18, Z
    1998:	20 62       	ori	r18, 0x20	; 32
    199a:	fc 01       	movw	r30, r24
    199c:	20 83       	st	Z, r18
	// set portd bit 4 as input
	DDRD &= ~_BV(PD4);
    199e:	8a e2       	ldi	r24, 0x2A	; 42
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	2a e2       	ldi	r18, 0x2A	; 42
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	f9 01       	movw	r30, r18
    19a8:	20 81       	ld	r18, Z
    19aa:	2f 7e       	andi	r18, 0xEF	; 239
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18

	btle_driver_init();
    19b0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <btle_driver_init>
	btle_set_cts();
    19b4:	0e 94 df 0c 	call	0x19be	; 0x19be <btle_set_cts>
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <btle_set_cts>:

void btle_set_cts()
{
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	//pd5 low
	PORTD &= ~_BV(PD5);
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	2b e2       	ldi	r18, 0x2B	; 43
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	2f 7d       	andi	r18, 0xDF	; 223
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <btle_get_rts>:

uint8_t btle_get_rts()
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	// return logic high or low
	return (PIND & _BV(PD4));
    19e6:	89 e2       	ldi	r24, 0x29	; 41
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	80 71       	andi	r24, 0x10	; 16
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <btle_tick>:

void btle_tick()
{
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <btle_tick+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <btle_tick+0x8>
    19fe:	1f 92       	push	r1
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	btle_driver_tick();
    1a04:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <btle_driver_tick>
	// check to see if we have a new message
	if (btle_queue.count > 0)
    1a08:	80 91 78 06 	lds	r24, 0x0678
    1a0c:	90 91 79 06 	lds	r25, 0x0679
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	09 f1       	breq	.+66     	; 0x1a56 <btle_tick+0x60>
	{

		queue_header_t *qh;
		qh = btle_queue.head;
    1a14:	80 91 7a 06 	lds	r24, 0x067A
    1a18:	90 91 7b 06 	lds	r25, 0x067B
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01

		btle_msg_t *msg = (btle_msg_t *) QUEUE_DATA(qh);
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	06 96       	adiw	r24, 0x06	; 6
    1a26:	9d 83       	std	Y+5, r25	; 0x05
    1a28:	8c 83       	std	Y+4, r24	; 0x04
		// TODO: Handle Messages
		// push out the lw-mesh radio
		// wan_usart_transmit_string("btle data received\r\n");
		if (!(PINB & (1 << PB0)))
    1a2a:	83 e2       	ldi	r24, 0x23	; 35
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	99 27       	eor	r25, r25
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <btle_tick+0x50>
		{
			encode_string(&msg);
    1a3e:	ce 01       	movw	r24, r28
    1a40:	04 96       	adiw	r24, 0x04	; 4
    1a42:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <encode_string>
		}
		// Dequeue the message
		queue_results_t result = queue_remove(&btle_queue, (queue_header_t*) msg);
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	86 e7       	ldi	r24, 0x76	; 118
    1a4e:	96 e0       	ldi	r25, 0x06	; 6
    1a50:	0e 94 9d 0b 	call	0x173a	; 0x173a <queue_remove>
    1a54:	8b 83       	std	Y+3, r24	; 0x03

	}
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <btle_enqueue>:

queue_results_t btle_enqueue(btle_msg_t *msg)
{
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <btle_enqueue+0x6>
    1a6c:	1f 92       	push	r1
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9b 83       	std	Y+3, r25	; 0x03
    1a74:	8a 83       	std	Y+2, r24	; 0x02
	//queue_results_t result = queue_enqueue(&btle_queue, &msg, sizeof(btle_msg_t));
	queue_results_t result = queue_enqueue(&btle_queue, msg, sizeof(btle_msg_t));
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	4d e0       	ldi	r20, 0x0D	; 13
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	bc 01       	movw	r22, r24
    1a80:	86 e7       	ldi	r24, 0x76	; 118
    1a82:	96 e0       	ldi	r25, 0x06	; 6
    1a84:	0e 94 bf 09 	call	0x137e	; 0x137e <queue_enqueue>
    1a88:	89 83       	std	Y+1, r24	; 0x01

	return result;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <btle_driver_init>:
static uint8_t parse_data(const char *token, char **out);

static uint8_t btle_parse_nybble(char c);
static btle_msg_t btle_handle_le_packet(char * buffer);

void btle_driver_init() {
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
	queue_init(&btle_queue, MSG_QUEUE_SIZE);
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e2       	ldi	r23, 0x20	; 32
    1aa4:	86 e7       	ldi	r24, 0x76	; 118
    1aa6:	96 e0       	ldi	r25, 0x06	; 6
    1aa8:	0e 94 a3 09 	call	0x1346	; 0x1346 <queue_init>
	init_buffer();
    1aac:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <init_buffer>
	init_lines();
    1ab0:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <init_lines>
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <btle_driver_tick>:

void btle_driver_tick() {
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	60 97       	sbiw	r28, 0x10	; 16
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61

	if (btle_usart_data_available()) {
    1ade:	0e 94 12 07 	call	0xe24	; 0xe24 <btle_usart_data_available>
    1ae2:	88 23       	and	r24, r24
    1ae4:	89 f1       	breq	.+98     	; 0x1b48 <btle_driver_tick+0x8e>

		if (handle_data()) {
    1ae6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <handle_data>
    1aea:	88 23       	and	r24, r24
    1aec:	69 f1       	breq	.+90     	; 0x1b48 <btle_driver_tick+0x8e>

			     char *ptr = NULL;
    1aee:	1b 82       	std	Y+3, r1	; 0x03
    1af0:	1a 82       	std	Y+2, r1	; 0x02
			// handle the new line

			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND) {
    1af2:	ce 01       	movw	r24, r28
    1af4:	02 96       	adiw	r24, 0x02	; 2
    1af6:	bc 01       	movw	r22, r24
    1af8:	88 e2       	ldi	r24, 0x28	; 40
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <parse_data>
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	11 f5       	brne	.+68     	; 0x1b48 <btle_driver_tick+0x8e>
				// TODO: handle the message
				btle_msg_t msg = btle_handle_le_packet(ptr);
    1b04:	2a 81       	ldd	r18, Y+2	; 0x02
    1b06:	3b 81       	ldd	r19, Y+3	; 0x03
    1b08:	ce 01       	movw	r24, r28
    1b0a:	04 96       	adiw	r24, 0x04	; 4
    1b0c:	b9 01       	movw	r22, r18
    1b0e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <btle_handle_le_packet>

				if (msg.mac != 0) {
    1b12:	ad 80       	ldd	r10, Y+5	; 0x05
    1b14:	be 80       	ldd	r11, Y+6	; 0x06
    1b16:	cf 80       	ldd	r12, Y+7	; 0x07
    1b18:	d8 84       	ldd	r13, Y+8	; 0x08
    1b1a:	e9 84       	ldd	r14, Y+9	; 0x09
    1b1c:	fa 84       	ldd	r15, Y+10	; 0x0a
    1b1e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1b20:	1c 85       	ldd	r17, Y+12	; 0x0c
    1b22:	2a 2d       	mov	r18, r10
    1b24:	3b 2d       	mov	r19, r11
    1b26:	4c 2d       	mov	r20, r12
    1b28:	5d 2d       	mov	r21, r13
    1b2a:	6e 2d       	mov	r22, r14
    1b2c:	7f 2d       	mov	r23, r15
    1b2e:	80 2f       	mov	r24, r16
    1b30:	91 2f       	mov	r25, r17
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	0e 94 8a 11 	call	0x2314	; 0x2314 <__cmpdi2_s8>
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <btle_driver_tick+0x8a>
					queue_results_t result = btle_enqueue(&msg);
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	04 96       	adiw	r24, 0x04	; 4
    1b3e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <btle_enqueue>
    1b42:	89 83       	std	Y+1, r24	; 0x01
					}
					*/
					//wan_usart_transmit_string(data);
				}

				init_lines();
    1b44:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <init_lines>
			}
		}
	}
}
    1b48:	60 96       	adiw	r28, 0x10	; 16
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	08 95       	ret

00001b6a <encode_string>:

void encode_string(btle_msg_t * value);

#define DEBUG_OUTPUT "rssi=%d batt=%d temp=%d mac=%d \r\n\0"
void encode_string(btle_msg_t * value) {
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	e4 97       	sbiw	r28, 0x34	; 52
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	9c ab       	std	Y+52, r25	; 0x34
    1b8a:	8b ab       	std	Y+51, r24	; 0x33
	char tmp[50];

	memset(tmp, '\0', 50);
    1b8c:	42 e3       	ldi	r20, 0x32	; 50
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
	sprintf_P(tmp, PSTR(DEBUG_OUTPUT), value->rssi, value->batt, value->temp,
    1b9c:	eb a9       	ldd	r30, Y+51	; 0x33
    1b9e:	fc a9       	ldd	r31, Y+52	; 0x34
    1ba0:	21 81       	ldd	r18, Z+1	; 0x01
    1ba2:	32 81       	ldd	r19, Z+2	; 0x02
    1ba4:	43 81       	ldd	r20, Z+3	; 0x03
    1ba6:	54 81       	ldd	r21, Z+4	; 0x04
    1ba8:	65 81       	ldd	r22, Z+5	; 0x05
    1baa:	76 81       	ldd	r23, Z+6	; 0x06
    1bac:	87 81       	ldd	r24, Z+7	; 0x07
    1bae:	90 85       	ldd	r25, Z+8	; 0x08
    1bb0:	eb a9       	ldd	r30, Y+51	; 0x33
    1bb2:	fc a9       	ldd	r31, Y+52	; 0x34
    1bb4:	e3 84       	ldd	r14, Z+11	; 0x0b
    1bb6:	f4 84       	ldd	r15, Z+12	; 0x0c
    1bb8:	eb a9       	ldd	r30, Y+51	; 0x33
    1bba:	fc a9       	ldd	r31, Y+52	; 0x34
    1bbc:	01 85       	ldd	r16, Z+9	; 0x09
    1bbe:	12 85       	ldd	r17, Z+10	; 0x0a
    1bc0:	eb a9       	ldd	r30, Y+51	; 0x33
    1bc2:	fc a9       	ldd	r31, Y+52	; 0x34
    1bc4:	e0 81       	ld	r30, Z
    1bc6:	ae 2f       	mov	r26, r30
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 ec       	ldi	r30, 0xC9	; 201
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	d9 2e       	mov	r13, r25
    1bd0:	df 92       	push	r13
    1bd2:	d8 2e       	mov	r13, r24
    1bd4:	df 92       	push	r13
    1bd6:	d7 2e       	mov	r13, r23
    1bd8:	df 92       	push	r13
    1bda:	d6 2e       	mov	r13, r22
    1bdc:	df 92       	push	r13
    1bde:	d5 2e       	mov	r13, r21
    1be0:	df 92       	push	r13
    1be2:	d4 2e       	mov	r13, r20
    1be4:	df 92       	push	r13
    1be6:	d3 2e       	mov	r13, r19
    1be8:	df 92       	push	r13
    1bea:	82 2f       	mov	r24, r18
    1bec:	8f 93       	push	r24
    1bee:	8f 2d       	mov	r24, r15
    1bf0:	8f 93       	push	r24
    1bf2:	8e 2d       	mov	r24, r14
    1bf4:	8f 93       	push	r24
    1bf6:	81 2f       	mov	r24, r17
    1bf8:	8f 93       	push	r24
    1bfa:	80 2f       	mov	r24, r16
    1bfc:	8f 93       	push	r24
    1bfe:	8b 2f       	mov	r24, r27
    1c00:	8f 93       	push	r24
    1c02:	8a 2f       	mov	r24, r26
    1c04:	8f 93       	push	r24
    1c06:	8f 2f       	mov	r24, r31
    1c08:	8f 93       	push	r24
    1c0a:	8e 2f       	mov	r24, r30
    1c0c:	8f 93       	push	r24
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	89 2f       	mov	r24, r25
    1c14:	8f 93       	push	r24
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	8f 93       	push	r24
    1c1c:	0e 94 76 14 	call	0x28ec	; 0x28ec <sprintf_P>
    1c20:	8d b7       	in	r24, 0x3d	; 61
    1c22:	9e b7       	in	r25, 0x3e	; 62
    1c24:	42 96       	adiw	r24, 0x12	; 18
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
			value->mac);
	//LOG("%s\r\n", tmp);
	wan_usart_transmit_string(tmp);
    1c30:	ce 01       	movw	r24, r28
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	0e 94 13 09 	call	0x1226	; 0x1226 <wan_usart_transmit_string>
}
    1c38:	e4 96       	adiw	r28, 0x34	; 52
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	08 95       	ret

00001c54 <init_buffer>:

static void init_buffer() {
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
	btle_line_index = 0;
    1c5c:	10 92 49 05 	sts	0x0549, r1
    1c60:	10 92 48 05 	sts	0x0548, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    1c64:	41 e8       	ldi	r20, 0x81	; 129
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	97 e0       	ldi	r25, 0x07	; 7
    1c70:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <init_lines>:

static void init_lines() {
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	memset(btle_lines, '\0', sizeof(btle_lines));
    1c82:	41 e8       	ldi	r20, 0x81	; 129
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	82 e8       	ldi	r24, 0x82	; 130
    1c8c:	96 e0       	ldi	r25, 0x06	; 6
    1c8e:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
}
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <handle_data>:

// check to see if we have a new line
bool handle_data() {
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	1f 92       	push	r1
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62

	char c = btle_usart_data_read();
    1ca2:	0e 94 25 07 	call	0xe4a	; 0xe4a <btle_usart_data_read>
    1ca6:	89 83       	std	Y+1, r24	; 0x01

	// ignore null terminated strings
	if (c == '\0')
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	88 23       	and	r24, r24
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <handle_data+0x1a>
		return false;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	2a c0       	rjmp	.+84     	; 0x1d06 <handle_data+0x6e>
	// prevent buffer overrun
	if (btle_line_index >= BTLE_MAX_CHARS)
    1cb2:	80 91 48 05 	lds	r24, 0x0548
    1cb6:	90 91 49 05 	lds	r25, 0x0549
    1cba:	80 38       	cpi	r24, 0x80	; 128
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	14 f0       	brlt	.+4      	; 0x1cc4 <handle_data+0x2c>
		return false;
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	21 c0       	rjmp	.+66     	; 0x1d06 <handle_data+0x6e>

	// store character in btle_line_buffer
	btle_line_buffer[btle_line_index] = c;
    1cc4:	80 91 48 05 	lds	r24, 0x0548
    1cc8:	90 91 49 05 	lds	r25, 0x0549
    1ccc:	8d 5f       	subi	r24, 0xFD	; 253
    1cce:	98 4f       	sbci	r25, 0xF8	; 248
    1cd0:	29 81       	ldd	r18, Y+1	; 0x01
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	20 83       	st	Z, r18
	btle_line_index++;
    1cd6:	80 91 48 05 	lds	r24, 0x0548
    1cda:	90 91 49 05 	lds	r25, 0x0549
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	90 93 49 05 	sts	0x0549, r25
    1ce4:	80 93 48 05 	sts	0x0548, r24

	// check for end of line
	if (c == BTLE_TKEND[0]) {
    1ce8:	9a e0       	ldi	r25, 0x0A	; 10
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	98 17       	cp	r25, r24
    1cee:	51 f4       	brne	.+20     	; 0x1d04 <handle_data+0x6c>
		// copy new message into buffer
		strcpy(btle_lines, btle_line_buffer);
    1cf0:	63 e0       	ldi	r22, 0x03	; 3
    1cf2:	77 e0       	ldi	r23, 0x07	; 7
    1cf4:	82 e8       	ldi	r24, 0x82	; 130
    1cf6:	96 e0       	ldi	r25, 0x06	; 6
    1cf8:	0e 94 e6 13 	call	0x27cc	; 0x27cc <strcpy>
		init_buffer();
    1cfc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <init_buffer>
		return true;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <handle_data+0x6e>
	}

	return false;
    1d04:	80 e0       	ldi	r24, 0x00	; 0
}
    1d06:	0f 90       	pop	r0
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	08 95       	ret

00001d0e <parse_data>:

static uint8_t parse_data(const char *token, char **out) {
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <parse_data+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <parse_data+0x8>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <parse_data+0xa>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	7e 83       	std	Y+6, r23	; 0x06
    1d22:	6d 83       	std	Y+5, r22	; 0x05
	char* ptr = NULL;
    1d24:	1a 82       	std	Y+2, r1	; 0x02
    1d26:	19 82       	std	Y+1, r1	; 0x01
	if ((ptr = strstr(btle_lines, token))) {
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	82 e8       	ldi	r24, 0x82	; 130
    1d30:	96 e0       	ldi	r25, 0x06	; 6
    1d32:	0e 94 ed 13 	call	0x27da	; 0x27da <strstr>
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f0       	breq	.+26     	; 0x1d5c <parse_data+0x4e>
		if (out != NULL )
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	39 f0       	breq	.+14     	; 0x1d58 <parse_data+0x4a>
			*out = ptr;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	29 81       	ldd	r18, Y+1	; 0x01
    1d50:	3a 81       	ldd	r19, Y+2	; 0x02
    1d52:	fc 01       	movw	r30, r24
    1d54:	31 83       	std	Z+1, r19	; 0x01
    1d56:	20 83       	st	Z, r18
		return BTLE_TKFOUND;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <parse_data+0x50>
	} else
		return BTLE_TKNOTFOUND;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d5e:	26 96       	adiw	r28, 0x06	; 6
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <btle_handle_le_packet>:

btle_msg_t btle_handle_le_packet(char * buffer) {
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	a6 97       	sbiw	r28, 0x26	; 38
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	9c a3       	std	Y+36, r25	; 0x24
    1d86:	8b a3       	std	Y+35, r24	; 0x23
    1d88:	7e a3       	std	Y+38, r23	; 0x26
    1d8a:	6d a3       	std	Y+37, r22	; 0x25
	btle_msg_t btle_msg;

	memset(&btle_msg, 0, sizeof(btle_msg_t));
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	0a 96       	adiw	r24, 0x0a	; 10
    1d90:	4d e0       	ldi	r20, 0x0D	; 13
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
	uint64_t mac;
	int i;

	// Validate checksum in bytes 27-28
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
    1d9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1da0:	4b 96       	adiw	r24, 0x1b	; 27
    1da2:	fc 01       	movw	r30, r24
    1da4:	80 81       	ld	r24, Z
    1da6:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1daa:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[28]);
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	4c 96       	adiw	r24, 0x1c	; 28
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 81       	ld	r24, Z
    1db6:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1dba:	8d 83       	std	Y+5, r24	; 0x05
	ck = (msb << 4) | lsb;
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	82 95       	swap	r24
    1dc4:	92 95       	swap	r25
    1dc6:	90 7f       	andi	r25, 0xF0	; 240
    1dc8:	98 27       	eor	r25, r24
    1dca:	80 7f       	andi	r24, 0xF0	; 240
    1dcc:	98 27       	eor	r25, r24
    1dce:	98 2f       	mov	r25, r24
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	89 2b       	or	r24, r25
    1dd4:	8e 83       	std	Y+6, r24	; 0x06
	ckx = 0;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i <= 26; i++)
    1dd8:	1b 82       	std	Y+3, r1	; 0x03
    1dda:	1a 82       	std	Y+2, r1	; 0x02
    1ddc:	10 c0       	rjmp	.+32     	; 0x1dfe <btle_handle_le_packet+0x8e>
		ckx ^= buffer[i];
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	2d a1       	ldd	r18, Y+37	; 0x25
    1de4:	3e a1       	ldd	r19, Y+38	; 0x26
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	fc 01       	movw	r30, r24
    1dec:	80 81       	ld	r24, Z
    1dee:	99 81       	ldd	r25, Y+1	; 0x01
    1df0:	89 27       	eor	r24, r25
    1df2:	89 83       	std	Y+1, r24	; 0x01
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
	lsb = btle_parse_nybble(buffer[28]);
	ck = (msb << 4) | lsb;
	ckx = 0;
	for (i = 0; i <= 26; i++)
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	9b 83       	std	Y+3, r25	; 0x03
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	8b 31       	cpi	r24, 0x1B	; 27
    1e04:	91 05       	cpc	r25, r1
    1e06:	5c f3       	brlt	.-42     	; 0x1dde <btle_handle_le_packet+0x6e>
		ckx ^= buffer[i];
	if (ck != ckx) {
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	98 17       	cp	r25, r24
    1e0e:	59 f0       	breq	.+22     	; 0x1e26 <btle_handle_le_packet+0xb6>
		//AT_debugString("BAD CK ");
		//AT_writeHex(ck);
		//AT_debugString(" ");
		//AT_writeHex(ckx);
		//AT_debugString("\n");
		return btle_msg;
    1e10:	8b a1       	ldd	r24, Y+35	; 0x23
    1e12:	9c a1       	ldd	r25, Y+36	; 0x24
    1e14:	2d e0       	ldi	r18, 0x0D	; 13
    1e16:	fe 01       	movw	r30, r28
    1e18:	3a 96       	adiw	r30, 0x0a	; 10
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	0d 92       	st	X+, r0
    1e20:	2a 95       	dec	r18
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <btle_handle_le_packet+0xac>
    1e24:	a1 c1       	rjmp	.+834    	; 0x2168 <btle_handle_le_packet+0x3f8>
	}

	// MAC address - incoming 48bits
	//
	num = (uint8_t *) &mac;
    1e26:	ce 01       	movw	r24, r28
    1e28:	4b 96       	adiw	r24, 0x1b	; 27
    1e2a:	98 87       	std	Y+8, r25	; 0x08
    1e2c:	8f 83       	std	Y+7, r24	; 0x07
	num[7] = 0;
    1e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e30:	98 85       	ldd	r25, Y+8	; 0x08
    1e32:	07 96       	adiw	r24, 0x07	; 7
    1e34:	fc 01       	movw	r30, r24
    1e36:	10 82       	st	Z, r1
	num[6] = 0;
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	06 96       	adiw	r24, 0x06	; 6
    1e3e:	fc 01       	movw	r30, r24
    1e40:	10 82       	st	Z, r1
	msb = btle_parse_nybble(buffer[1]);
    1e42:	8d a1       	ldd	r24, Y+37	; 0x25
    1e44:	9e a1       	ldd	r25, Y+38	; 0x26
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	fc 01       	movw	r30, r24
    1e4a:	80 81       	ld	r24, Z
    1e4c:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1e50:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[2]);
    1e52:	8d a1       	ldd	r24, Y+37	; 0x25
    1e54:	9e a1       	ldd	r25, Y+38	; 0x26
    1e56:	02 96       	adiw	r24, 0x02	; 2
    1e58:	fc 01       	movw	r30, r24
    1e5a:	80 81       	ld	r24, Z
    1e5c:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1e60:	8d 83       	std	Y+5, r24	; 0x05
	num[5] = (msb << 4) | lsb;
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	05 96       	adiw	r24, 0x05	; 5
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	22 2f       	mov	r18, r18
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	22 95       	swap	r18
    1e70:	32 95       	swap	r19
    1e72:	30 7f       	andi	r19, 0xF0	; 240
    1e74:	32 27       	eor	r19, r18
    1e76:	20 7f       	andi	r18, 0xF0	; 240
    1e78:	32 27       	eor	r19, r18
    1e7a:	32 2f       	mov	r19, r18
    1e7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e7e:	23 2b       	or	r18, r19
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[3]);
    1e84:	8d a1       	ldd	r24, Y+37	; 0x25
    1e86:	9e a1       	ldd	r25, Y+38	; 0x26
    1e88:	03 96       	adiw	r24, 0x03	; 3
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	80 81       	ld	r24, Z
    1e8e:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1e92:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[4]);
    1e94:	8d a1       	ldd	r24, Y+37	; 0x25
    1e96:	9e a1       	ldd	r25, Y+38	; 0x26
    1e98:	04 96       	adiw	r24, 0x04	; 4
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
	num[4] = (msb << 4) | lsb;
    1ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea6:	98 85       	ldd	r25, Y+8	; 0x08
    1ea8:	04 96       	adiw	r24, 0x04	; 4
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	22 2f       	mov	r18, r18
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	22 95       	swap	r18
    1eb2:	32 95       	swap	r19
    1eb4:	30 7f       	andi	r19, 0xF0	; 240
    1eb6:	32 27       	eor	r19, r18
    1eb8:	20 7f       	andi	r18, 0xF0	; 240
    1eba:	32 27       	eor	r19, r18
    1ebc:	32 2f       	mov	r19, r18
    1ebe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec0:	23 2b       	or	r18, r19
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[5]);
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	05 96       	adiw	r24, 0x05	; 5
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1ed4:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[6]);
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	06 96       	adiw	r24, 0x06	; 6
    1edc:	fc 01       	movw	r30, r24
    1ede:	80 81       	ld	r24, Z
    1ee0:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
	num[3] = (msb << 4) | lsb;
    1ee6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee8:	98 85       	ldd	r25, Y+8	; 0x08
    1eea:	03 96       	adiw	r24, 0x03	; 3
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	22 2f       	mov	r18, r18
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	22 95       	swap	r18
    1ef4:	32 95       	swap	r19
    1ef6:	30 7f       	andi	r19, 0xF0	; 240
    1ef8:	32 27       	eor	r19, r18
    1efa:	20 7f       	andi	r18, 0xF0	; 240
    1efc:	32 27       	eor	r19, r18
    1efe:	32 2f       	mov	r19, r18
    1f00:	2d 81       	ldd	r18, Y+5	; 0x05
    1f02:	23 2b       	or	r18, r19
    1f04:	fc 01       	movw	r30, r24
    1f06:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[7]);
    1f08:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0c:	07 96       	adiw	r24, 0x07	; 7
    1f0e:	fc 01       	movw	r30, r24
    1f10:	80 81       	ld	r24, Z
    1f12:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1f16:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[8]);
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	08 96       	adiw	r24, 0x08	; 8
    1f1e:	fc 01       	movw	r30, r24
    1f20:	80 81       	ld	r24, Z
    1f22:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1f26:	8d 83       	std	Y+5, r24	; 0x05
	num[2] = (msb << 4) | lsb;
    1f28:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2a:	98 85       	ldd	r25, Y+8	; 0x08
    1f2c:	02 96       	adiw	r24, 0x02	; 2
    1f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f30:	22 2f       	mov	r18, r18
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	22 95       	swap	r18
    1f36:	32 95       	swap	r19
    1f38:	30 7f       	andi	r19, 0xF0	; 240
    1f3a:	32 27       	eor	r19, r18
    1f3c:	20 7f       	andi	r18, 0xF0	; 240
    1f3e:	32 27       	eor	r19, r18
    1f40:	32 2f       	mov	r19, r18
    1f42:	2d 81       	ldd	r18, Y+5	; 0x05
    1f44:	23 2b       	or	r18, r19
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[9]);
    1f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4e:	09 96       	adiw	r24, 0x09	; 9
    1f50:	fc 01       	movw	r30, r24
    1f52:	80 81       	ld	r24, Z
    1f54:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1f58:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[10]);
    1f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5e:	0a 96       	adiw	r24, 0x0a	; 10
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1f68:	8d 83       	std	Y+5, r24	; 0x05
	num[1] = (msb << 4) | lsb;
    1f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	2c 81       	ldd	r18, Y+4	; 0x04
    1f72:	22 2f       	mov	r18, r18
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	22 95       	swap	r18
    1f78:	32 95       	swap	r19
    1f7a:	30 7f       	andi	r19, 0xF0	; 240
    1f7c:	32 27       	eor	r19, r18
    1f7e:	20 7f       	andi	r18, 0xF0	; 240
    1f80:	32 27       	eor	r19, r18
    1f82:	32 2f       	mov	r19, r18
    1f84:	2d 81       	ldd	r18, Y+5	; 0x05
    1f86:	23 2b       	or	r18, r19
    1f88:	fc 01       	movw	r30, r24
    1f8a:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[11]);
    1f8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f90:	0b 96       	adiw	r24, 0x0b	; 11
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 81       	ld	r24, Z
    1f96:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[12]);
    1f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa0:	0c 96       	adiw	r24, 0x0c	; 12
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	80 81       	ld	r24, Z
    1fa6:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1faa:	8d 83       	std	Y+5, r24	; 0x05
	num[0] = (msb << 4) | lsb;
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	82 95       	swap	r24
    1fb4:	92 95       	swap	r25
    1fb6:	90 7f       	andi	r25, 0xF0	; 240
    1fb8:	98 27       	eor	r25, r24
    1fba:	80 7f       	andi	r24, 0xF0	; 240
    1fbc:	98 27       	eor	r25, r24
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	89 2b       	or	r24, r25
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc8:	98 85       	ldd	r25, Y+8	; 0x08
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
    1fce:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd2:	0e 96       	adiw	r24, 0x0e	; 14
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	80 81       	ld	r24, Z
    1fd8:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1fdc:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[15]);
    1fde:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe2:	0f 96       	adiw	r24, 0x0f	; 15
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	80 81       	ld	r24, Z
    1fe8:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    1fec:	8d 83       	std	Y+5, r24	; 0x05
	rssi = (msb << 4) | lsb;
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	82 95       	swap	r24
    1ff6:	92 95       	swap	r25
    1ff8:	90 7f       	andi	r25, 0xF0	; 240
    1ffa:	98 27       	eor	r25, r24
    1ffc:	80 7f       	andi	r24, 0xF0	; 240
    1ffe:	98 27       	eor	r25, r24
    2000:	98 2f       	mov	r25, r24
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	89 2b       	or	r24, r25
    2006:	89 87       	std	Y+9, r24	; 0x09

	// Temperature
	//
	num = (uint8_t *) &temp;
    2008:	ce 01       	movw	r24, r28
    200a:	49 96       	adiw	r24, 0x19	; 25
    200c:	98 87       	std	Y+8, r25	; 0x08
    200e:	8f 83       	std	Y+7, r24	; 0x07
	msb = btle_parse_nybble(buffer[17]);
    2010:	8d a1       	ldd	r24, Y+37	; 0x25
    2012:	9e a1       	ldd	r25, Y+38	; 0x26
    2014:	41 96       	adiw	r24, 0x11	; 17
    2016:	fc 01       	movw	r30, r24
    2018:	80 81       	ld	r24, Z
    201a:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    201e:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[18]);
    2020:	8d a1       	ldd	r24, Y+37	; 0x25
    2022:	9e a1       	ldd	r25, Y+38	; 0x26
    2024:	42 96       	adiw	r24, 0x12	; 18
    2026:	fc 01       	movw	r30, r24
    2028:	80 81       	ld	r24, Z
    202a:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    202e:	8d 83       	std	Y+5, r24	; 0x05
	num[0] = (msb << 4) | lsb;
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	82 95       	swap	r24
    2038:	92 95       	swap	r25
    203a:	90 7f       	andi	r25, 0xF0	; 240
    203c:	98 27       	eor	r25, r24
    203e:	80 7f       	andi	r24, 0xF0	; 240
    2040:	98 27       	eor	r25, r24
    2042:	98 2f       	mov	r25, r24
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	89 2b       	or	r24, r25
    2048:	28 2f       	mov	r18, r24
    204a:	8f 81       	ldd	r24, Y+7	; 0x07
    204c:	98 85       	ldd	r25, Y+8	; 0x08
    204e:	fc 01       	movw	r30, r24
    2050:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[19]);
    2052:	8d a1       	ldd	r24, Y+37	; 0x25
    2054:	9e a1       	ldd	r25, Y+38	; 0x26
    2056:	43 96       	adiw	r24, 0x13	; 19
    2058:	fc 01       	movw	r30, r24
    205a:	80 81       	ld	r24, Z
    205c:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    2060:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[20]);
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	44 96       	adiw	r24, 0x14	; 20
    2068:	fc 01       	movw	r30, r24
    206a:	80 81       	ld	r24, Z
    206c:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    2070:	8d 83       	std	Y+5, r24	; 0x05
	num[1] = (msb << 4) | lsb;
    2072:	8f 81       	ldd	r24, Y+7	; 0x07
    2074:	98 85       	ldd	r25, Y+8	; 0x08
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	2c 81       	ldd	r18, Y+4	; 0x04
    207a:	22 2f       	mov	r18, r18
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	22 95       	swap	r18
    2080:	32 95       	swap	r19
    2082:	30 7f       	andi	r19, 0xF0	; 240
    2084:	32 27       	eor	r19, r18
    2086:	20 7f       	andi	r18, 0xF0	; 240
    2088:	32 27       	eor	r19, r18
    208a:	32 2f       	mov	r19, r18
    208c:	2d 81       	ldd	r18, Y+5	; 0x05
    208e:	23 2b       	or	r18, r19
    2090:	fc 01       	movw	r30, r24
    2092:	20 83       	st	Z, r18

	// Battery
	//
	num = (uint8_t *) &batt;
    2094:	ce 01       	movw	r24, r28
    2096:	47 96       	adiw	r24, 0x17	; 23
    2098:	98 87       	std	Y+8, r25	; 0x08
    209a:	8f 83       	std	Y+7, r24	; 0x07
	msb = btle_parse_nybble(buffer[22]);
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	46 96       	adiw	r24, 0x16	; 22
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 81       	ld	r24, Z
    20a6:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    20aa:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[23]);
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	47 96       	adiw	r24, 0x17	; 23
    20b2:	fc 01       	movw	r30, r24
    20b4:	80 81       	ld	r24, Z
    20b6:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    20ba:	8d 83       	std	Y+5, r24	; 0x05
	num[0] = (msb << 4) | lsb;
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	82 95       	swap	r24
    20c4:	92 95       	swap	r25
    20c6:	90 7f       	andi	r25, 0xF0	; 240
    20c8:	98 27       	eor	r25, r24
    20ca:	80 7f       	andi	r24, 0xF0	; 240
    20cc:	98 27       	eor	r25, r24
    20ce:	98 2f       	mov	r25, r24
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	89 2b       	or	r24, r25
    20d4:	28 2f       	mov	r18, r24
    20d6:	8f 81       	ldd	r24, Y+7	; 0x07
    20d8:	98 85       	ldd	r25, Y+8	; 0x08
    20da:	fc 01       	movw	r30, r24
    20dc:	20 83       	st	Z, r18
	msb = btle_parse_nybble(buffer[24]);
    20de:	8d a1       	ldd	r24, Y+37	; 0x25
    20e0:	9e a1       	ldd	r25, Y+38	; 0x26
    20e2:	48 96       	adiw	r24, 0x18	; 24
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    20ec:	8c 83       	std	Y+4, r24	; 0x04
	lsb = btle_parse_nybble(buffer[25]);
    20ee:	8d a1       	ldd	r24, Y+37	; 0x25
    20f0:	9e a1       	ldd	r25, Y+38	; 0x26
    20f2:	49 96       	adiw	r24, 0x19	; 25
    20f4:	fc 01       	movw	r30, r24
    20f6:	80 81       	ld	r24, Z
    20f8:	0e 94 bf 10 	call	0x217e	; 0x217e <btle_parse_nybble>
    20fc:	8d 83       	std	Y+5, r24	; 0x05
	num[1] = (msb << 4) | lsb;
    20fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2100:	98 85       	ldd	r25, Y+8	; 0x08
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	2c 81       	ldd	r18, Y+4	; 0x04
    2106:	22 2f       	mov	r18, r18
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	22 95       	swap	r18
    210c:	32 95       	swap	r19
    210e:	30 7f       	andi	r19, 0xF0	; 240
    2110:	32 27       	eor	r19, r18
    2112:	20 7f       	andi	r18, 0xF0	; 240
    2114:	32 27       	eor	r19, r18
    2116:	32 2f       	mov	r19, r18
    2118:	2d 81       	ldd	r18, Y+5	; 0x05
    211a:	23 2b       	or	r18, r19
    211c:	fc 01       	movw	r30, r24
    211e:	20 83       	st	Z, r18

	btle_msg.rssi = rssi;
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	8a 87       	std	Y+10, r24	; 0x0a
	btle_msg.mac = mac;
    2124:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2126:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2128:	4d 8d       	ldd	r20, Y+29	; 0x1d
    212a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    212c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212e:	78 a1       	ldd	r23, Y+32	; 0x20
    2130:	89 a1       	ldd	r24, Y+33	; 0x21
    2132:	9a a1       	ldd	r25, Y+34	; 0x22
    2134:	2b 87       	std	Y+11, r18	; 0x0b
    2136:	3c 87       	std	Y+12, r19	; 0x0c
    2138:	4d 87       	std	Y+13, r20	; 0x0d
    213a:	5e 87       	std	Y+14, r21	; 0x0e
    213c:	6f 87       	std	Y+15, r22	; 0x0f
    213e:	78 8b       	std	Y+16, r23	; 0x10
    2140:	89 8b       	std	Y+17, r24	; 0x11
    2142:	9a 8b       	std	Y+18, r25	; 0x12
	btle_msg.batt = batt;
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
	btle_msg.temp = temp;
    214c:	89 8d       	ldd	r24, Y+25	; 0x19
    214e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	8d 8b       	std	Y+21, r24	; 0x15

	return btle_msg;
    2154:	8b a1       	ldd	r24, Y+35	; 0x23
    2156:	9c a1       	ldd	r25, Y+36	; 0x24
    2158:	2d e0       	ldi	r18, 0x0D	; 13
    215a:	fe 01       	movw	r30, r28
    215c:	3a 96       	adiw	r30, 0x0a	; 10
    215e:	dc 01       	movw	r26, r24
    2160:	01 90       	ld	r0, Z+
    2162:	0d 92       	st	X+, r0
    2164:	2a 95       	dec	r18
    2166:	e1 f7       	brne	.-8      	; 0x2160 <btle_handle_le_packet+0x3f0>

}
    2168:	8b a1       	ldd	r24, Y+35	; 0x23
    216a:	9c a1       	ldd	r25, Y+36	; 0x24
    216c:	a6 96       	adiw	r28, 0x26	; 38
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	08 95       	ret

0000217e <btle_parse_nybble>:

uint8_t btle_parse_nybble(char c) {
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	00 d0       	rcall	.+0      	; 0x2184 <btle_parse_nybble+0x6>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	8a 83       	std	Y+2, r24	; 0x02
	if (c >= 'A' && c <= 'F')
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	81 34       	cpi	r24, 0x41	; 65
    218e:	30 f0       	brcs	.+12     	; 0x219c <btle_parse_nybble+0x1e>
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	87 34       	cpi	r24, 0x47	; 71
    2194:	18 f4       	brcc	.+6      	; 0x219c <btle_parse_nybble+0x1e>
		c = c | 0x20;
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	80 62       	ori	r24, 0x20	; 32
    219a:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 16; i++) {
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	0f c0       	rjmp	.+30     	; 0x21be <btle_parse_nybble+0x40>
		if (HEX_DIGITS[i] == c)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	89 5e       	subi	r24, 0xE9	; 233
    21a8:	9e 4f       	sbci	r25, 0xFE	; 254
    21aa:	fc 01       	movw	r30, r24
    21ac:	90 81       	ld	r25, Z
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	98 17       	cp	r25, r24
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <btle_parse_nybble+0x3a>
			return i;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	07 c0       	rjmp	.+14     	; 0x21c6 <btle_parse_nybble+0x48>
}

uint8_t btle_parse_nybble(char c) {
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++) {
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	80 31       	cpi	r24, 0x10	; 16
    21c2:	70 f3       	brcs	.-36     	; 0x21a0 <btle_parse_nybble+0x22>
		if (HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
    21c4:	80 e8       	ldi	r24, 0x80	; 128
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <terminal_in_cb>:
volatile clock_time_t future = 0;
bool timeout();
void set_timer(clock_time_t timeout);

void terminal_in_cb(uint8_t c)
{
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	1f 92       	push	r1
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
	term_in = c;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	80 93 4a 05 	sts	0x054A, r24

}
    21e2:	0f 90       	pop	r0
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <main>:

void main()
{
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
	// Blinky test!
	DDRD |= _BV(PD6); // data direction bit
    21f2:	8a e2       	ldi	r24, 0x2A	; 42
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	2a e2       	ldi	r18, 0x2A	; 42
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	f9 01       	movw	r30, r18
    21fc:	20 81       	ld	r18, Z
    21fe:	20 64       	ori	r18, 0x40	; 64
    2200:	fc 01       	movw	r30, r24
    2202:	20 83       	st	Z, r18
	DDRD |= _BV(PD7);
    2204:	8a e2       	ldi	r24, 0x2A	; 42
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	2a e2       	ldi	r18, 0x2A	; 42
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	f9 01       	movw	r30, r18
    220e:	20 81       	ld	r18, Z
    2210:	20 68       	ori	r18, 0x80	; 128
    2212:	fc 01       	movw	r30, r24
    2214:	20 83       	st	Z, r18

	DDRB &= _BV(PB0); // WAN_INT_01
    2216:	84 e2       	ldi	r24, 0x24	; 36
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	24 e2       	ldi	r18, 0x24	; 36
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	f9 01       	movw	r30, r18
    2220:	20 81       	ld	r18, Z
    2222:	21 70       	andi	r18, 0x01	; 1
    2224:	fc 01       	movw	r30, r24
    2226:	20 83       	st	Z, r18

	//debug_init(terminal_in_cb);
	btle_usart_init_cb(terminal_in_cb);
    2228:	88 ee       	ldi	r24, 0xE8	; 232
    222a:	90 e1       	ldi	r25, 0x10	; 16
    222c:	0e 94 a2 06 	call	0xd44	; 0xd44 <btle_usart_init_cb>

	clock_init();
    2230:	0e 94 08 02 	call	0x410	; 0x410 <clock_init>
	config_init();
    2234:	0e 94 b9 02 	call	0x572	; 0x572 <config_init>
	 * load configuration
	 */
	//LOG("config_init...\r\n");

	// btle is on usart0
	btle_init();
    2238:	0e 94 c2 0c 	call	0x1984	; 0x1984 <btle_init>

	// wan is on usart1
	wan_init();
    223c:	0e 94 9b 00 	call	0x136	; 0x136 <wan_init>

	sei();
    2240:	78 94       	sei

	//wan_usart_transmit_string("Bitstorm router started\r\n");
	btle_usart_transmit_string("Hello BTLE\r\n");
    2242:	8a e2       	ldi	r24, 0x2A	; 42
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	0e 94 a3 07 	call	0xf46	; 0xf46 <btle_usart_transmit_string>

	while(true){
		btle_tick();
    224a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <btle_tick>

		if(term_in > 0)
    224e:	80 91 4a 05 	lds	r24, 0x054A
		{
			//wan_usart_transmit((char*)term_in);
		}

		term_in = 0;
    2252:	10 92 4a 05 	sts	0x054A, r1

		if(timeout()){
    2256:	0e 94 66 11 	call	0x22cc	; 0x22cc <timeout>
    225a:	88 23       	and	r24, r24
    225c:	89 f0       	breq	.+34     	; 0x2280 <main+0x96>
			// just exercising timer
			set_timer(1000);
    225e:	68 ee       	ldi	r22, 0xE8	; 232
    2260:	73 e0       	ldi	r23, 0x03	; 3
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 41 11 	call	0x2282	; 0x2282 <set_timer>
			PORTD ^= _BV(PD6);
    226a:	8b e2       	ldi	r24, 0x2B	; 43
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	2b e2       	ldi	r18, 0x2B	; 43
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	f9 01       	movw	r30, r18
    2274:	30 81       	ld	r19, Z
    2276:	20 e4       	ldi	r18, 0x40	; 64
    2278:	23 27       	eor	r18, r19
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
			//wan_usart_transmit_string("Hello WAN\r\n");
			//btle_usart_transmit_string("Hello BTLE\r\n");
			//_delay_ms(1000);
		}

	}
    227e:	e5 cf       	rjmp	.-54     	; 0x224a <main+0x60>
    2280:	e4 cf       	rjmp	.-56     	; 0x224a <main+0x60>

00002282 <set_timer>:
}

void set_timer(clock_time_t timeout)
{
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	00 d0       	rcall	.+0      	; 0x2288 <set_timer+0x6>
    2288:	00 d0       	rcall	.+0      	; 0x228a <set_timer+0x8>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	69 83       	std	Y+1, r22	; 0x01
    2290:	7a 83       	std	Y+2, r23	; 0x02
    2292:	8b 83       	std	Y+3, r24	; 0x03
    2294:	9c 83       	std	Y+4, r25	; 0x04
	future = clock_time() + timeout;
    2296:	0e 94 2b 02 	call	0x456	; 0x456 <clock_time>
    229a:	9b 01       	movw	r18, r22
    229c:	ac 01       	movw	r20, r24
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	ab 81       	ldd	r26, Y+3	; 0x03
    22a4:	bc 81       	ldd	r27, Y+4	; 0x04
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	a4 1f       	adc	r26, r20
    22ac:	b5 1f       	adc	r27, r21
    22ae:	80 93 4b 05 	sts	0x054B, r24
    22b2:	90 93 4c 05 	sts	0x054C, r25
    22b6:	a0 93 4d 05 	sts	0x054D, r26
    22ba:	b0 93 4e 05 	sts	0x054E, r27
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <timeout>:

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	1f 92       	push	r1
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	bool timeout = false;
    22d6:	19 82       	std	Y+1, r1	; 0x01

	if(clock_time() >= future)
    22d8:	0e 94 2b 02 	call	0x456	; 0x456 <clock_time>
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	80 91 4b 05 	lds	r24, 0x054B
    22e4:	90 91 4c 05 	lds	r25, 0x054C
    22e8:	a0 91 4d 05 	lds	r26, 0x054D
    22ec:	b0 91 4e 05 	lds	r27, 0x054E
    22f0:	28 17       	cp	r18, r24
    22f2:	39 07       	cpc	r19, r25
    22f4:	4a 07       	cpc	r20, r26
    22f6:	5b 07       	cpc	r21, r27
    22f8:	40 f0       	brcs	.+16     	; 0x230a <timeout+0x3e>
	{
		set_timer(1000);
    22fa:	68 ee       	ldi	r22, 0xE8	; 232
    22fc:	73 e0       	ldi	r23, 0x03	; 3
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 41 11 	call	0x2282	; 0x2282 <set_timer>
		timeout = true;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01

	}

	return timeout;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
}
    230c:	0f 90       	pop	r0
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <__cmpdi2_s8>:
    2314:	00 24       	eor	r0, r0
    2316:	a7 fd       	sbrc	r26, 7
    2318:	00 94       	com	r0
    231a:	2a 17       	cp	r18, r26
    231c:	30 05       	cpc	r19, r0
    231e:	40 05       	cpc	r20, r0
    2320:	50 05       	cpc	r21, r0
    2322:	60 05       	cpc	r22, r0
    2324:	70 05       	cpc	r23, r0
    2326:	80 05       	cpc	r24, r0
    2328:	90 05       	cpc	r25, r0
    232a:	08 95       	ret

0000232c <__cmpsf2>:
    232c:	2f d0       	rcall	.+94     	; 0x238c <__fp_cmp>
    232e:	08 f4       	brcc	.+2      	; 0x2332 <__cmpsf2+0x6>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	08 95       	ret

00002334 <__fixunssfsi>:
    2334:	57 d0       	rcall	.+174    	; 0x23e4 <__fp_splitA>
    2336:	88 f0       	brcs	.+34     	; 0x235a <__fixunssfsi+0x26>
    2338:	9f 57       	subi	r25, 0x7F	; 127
    233a:	90 f0       	brcs	.+36     	; 0x2360 <__fixunssfsi+0x2c>
    233c:	b9 2f       	mov	r27, r25
    233e:	99 27       	eor	r25, r25
    2340:	b7 51       	subi	r27, 0x17	; 23
    2342:	a0 f0       	brcs	.+40     	; 0x236c <__fixunssfsi+0x38>
    2344:	d1 f0       	breq	.+52     	; 0x237a <__fixunssfsi+0x46>
    2346:	66 0f       	add	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	1a f0       	brmi	.+6      	; 0x2356 <__fixunssfsi+0x22>
    2350:	ba 95       	dec	r27
    2352:	c9 f7       	brne	.-14     	; 0x2346 <__fixunssfsi+0x12>
    2354:	12 c0       	rjmp	.+36     	; 0x237a <__fixunssfsi+0x46>
    2356:	b1 30       	cpi	r27, 0x01	; 1
    2358:	81 f0       	breq	.+32     	; 0x237a <__fixunssfsi+0x46>
    235a:	5e d0       	rcall	.+188    	; 0x2418 <__fp_zero>
    235c:	b1 e0       	ldi	r27, 0x01	; 1
    235e:	08 95       	ret
    2360:	5b c0       	rjmp	.+182    	; 0x2418 <__fp_zero>
    2362:	67 2f       	mov	r22, r23
    2364:	78 2f       	mov	r23, r24
    2366:	88 27       	eor	r24, r24
    2368:	b8 5f       	subi	r27, 0xF8	; 248
    236a:	39 f0       	breq	.+14     	; 0x237a <__fixunssfsi+0x46>
    236c:	b9 3f       	cpi	r27, 0xF9	; 249
    236e:	cc f3       	brlt	.-14     	; 0x2362 <__fixunssfsi+0x2e>
    2370:	86 95       	lsr	r24
    2372:	77 95       	ror	r23
    2374:	67 95       	ror	r22
    2376:	b3 95       	inc	r27
    2378:	d9 f7       	brne	.-10     	; 0x2370 <__fixunssfsi+0x3c>
    237a:	3e f4       	brtc	.+14     	; 0x238a <__fixunssfsi+0x56>
    237c:	90 95       	com	r25
    237e:	80 95       	com	r24
    2380:	70 95       	com	r23
    2382:	61 95       	neg	r22
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	8f 4f       	sbci	r24, 0xFF	; 255
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	08 95       	ret

0000238c <__fp_cmp>:
    238c:	99 0f       	add	r25, r25
    238e:	00 08       	sbc	r0, r0
    2390:	55 0f       	add	r21, r21
    2392:	aa 0b       	sbc	r26, r26
    2394:	e0 e8       	ldi	r30, 0x80	; 128
    2396:	fe ef       	ldi	r31, 0xFE	; 254
    2398:	16 16       	cp	r1, r22
    239a:	17 06       	cpc	r1, r23
    239c:	e8 07       	cpc	r30, r24
    239e:	f9 07       	cpc	r31, r25
    23a0:	c0 f0       	brcs	.+48     	; 0x23d2 <__fp_cmp+0x46>
    23a2:	12 16       	cp	r1, r18
    23a4:	13 06       	cpc	r1, r19
    23a6:	e4 07       	cpc	r30, r20
    23a8:	f5 07       	cpc	r31, r21
    23aa:	98 f0       	brcs	.+38     	; 0x23d2 <__fp_cmp+0x46>
    23ac:	62 1b       	sub	r22, r18
    23ae:	73 0b       	sbc	r23, r19
    23b0:	84 0b       	sbc	r24, r20
    23b2:	95 0b       	sbc	r25, r21
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <__fp_cmp+0x38>
    23b6:	0a 26       	eor	r0, r26
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <__fp_cmp+0x46>
    23ba:	23 2b       	or	r18, r19
    23bc:	24 2b       	or	r18, r20
    23be:	25 2b       	or	r18, r21
    23c0:	21 f4       	brne	.+8      	; 0x23ca <__fp_cmp+0x3e>
    23c2:	08 95       	ret
    23c4:	0a 26       	eor	r0, r26
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__fp_cmp+0x3e>
    23c8:	a1 40       	sbci	r26, 0x01	; 1
    23ca:	a6 95       	lsr	r26
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	81 1d       	adc	r24, r1
    23d0:	81 1d       	adc	r24, r1
    23d2:	08 95       	ret

000023d4 <__fp_split3>:
    23d4:	57 fd       	sbrc	r21, 7
    23d6:	90 58       	subi	r25, 0x80	; 128
    23d8:	44 0f       	add	r20, r20
    23da:	55 1f       	adc	r21, r21
    23dc:	59 f0       	breq	.+22     	; 0x23f4 <__fp_splitA+0x10>
    23de:	5f 3f       	cpi	r21, 0xFF	; 255
    23e0:	71 f0       	breq	.+28     	; 0x23fe <__fp_splitA+0x1a>
    23e2:	47 95       	ror	r20

000023e4 <__fp_splitA>:
    23e4:	88 0f       	add	r24, r24
    23e6:	97 fb       	bst	r25, 7
    23e8:	99 1f       	adc	r25, r25
    23ea:	61 f0       	breq	.+24     	; 0x2404 <__fp_splitA+0x20>
    23ec:	9f 3f       	cpi	r25, 0xFF	; 255
    23ee:	79 f0       	breq	.+30     	; 0x240e <__fp_splitA+0x2a>
    23f0:	87 95       	ror	r24
    23f2:	08 95       	ret
    23f4:	12 16       	cp	r1, r18
    23f6:	13 06       	cpc	r1, r19
    23f8:	14 06       	cpc	r1, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	f2 cf       	rjmp	.-28     	; 0x23e2 <__fp_split3+0xe>
    23fe:	46 95       	lsr	r20
    2400:	f1 df       	rcall	.-30     	; 0x23e4 <__fp_splitA>
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <__fp_splitA+0x30>
    2404:	16 16       	cp	r1, r22
    2406:	17 06       	cpc	r1, r23
    2408:	18 06       	cpc	r1, r24
    240a:	99 1f       	adc	r25, r25
    240c:	f1 cf       	rjmp	.-30     	; 0x23f0 <__fp_splitA+0xc>
    240e:	86 95       	lsr	r24
    2410:	71 05       	cpc	r23, r1
    2412:	61 05       	cpc	r22, r1
    2414:	08 94       	sec
    2416:	08 95       	ret

00002418 <__fp_zero>:
    2418:	e8 94       	clt

0000241a <__fp_szero>:
    241a:	bb 27       	eor	r27, r27
    241c:	66 27       	eor	r22, r22
    241e:	77 27       	eor	r23, r23
    2420:	cb 01       	movw	r24, r22
    2422:	97 f9       	bld	r25, 7
    2424:	08 95       	ret

00002426 <__gesf2>:
    2426:	b2 df       	rcall	.-156    	; 0x238c <__fp_cmp>
    2428:	08 f4       	brcc	.+2      	; 0x242c <__gesf2+0x6>
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	08 95       	ret

0000242e <__mulsf3>:
    242e:	0b d0       	rcall	.+22     	; 0x2446 <__mulsf3x>
    2430:	78 c0       	rjmp	.+240    	; 0x2522 <__fp_round>
    2432:	69 d0       	rcall	.+210    	; 0x2506 <__fp_pscA>
    2434:	28 f0       	brcs	.+10     	; 0x2440 <__mulsf3+0x12>
    2436:	6e d0       	rcall	.+220    	; 0x2514 <__fp_pscB>
    2438:	18 f0       	brcs	.+6      	; 0x2440 <__mulsf3+0x12>
    243a:	95 23       	and	r25, r21
    243c:	09 f0       	breq	.+2      	; 0x2440 <__mulsf3+0x12>
    243e:	5a c0       	rjmp	.+180    	; 0x24f4 <__fp_inf>
    2440:	5f c0       	rjmp	.+190    	; 0x2500 <__fp_nan>
    2442:	11 24       	eor	r1, r1
    2444:	ea cf       	rjmp	.-44     	; 0x241a <__fp_szero>

00002446 <__mulsf3x>:
    2446:	c6 df       	rcall	.-116    	; 0x23d4 <__fp_split3>
    2448:	a0 f3       	brcs	.-24     	; 0x2432 <__mulsf3+0x4>

0000244a <__mulsf3_pse>:
    244a:	95 9f       	mul	r25, r21
    244c:	d1 f3       	breq	.-12     	; 0x2442 <__mulsf3+0x14>
    244e:	95 0f       	add	r25, r21
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	55 1f       	adc	r21, r21
    2454:	62 9f       	mul	r22, r18
    2456:	f0 01       	movw	r30, r0
    2458:	72 9f       	mul	r23, r18
    245a:	bb 27       	eor	r27, r27
    245c:	f0 0d       	add	r31, r0
    245e:	b1 1d       	adc	r27, r1
    2460:	63 9f       	mul	r22, r19
    2462:	aa 27       	eor	r26, r26
    2464:	f0 0d       	add	r31, r0
    2466:	b1 1d       	adc	r27, r1
    2468:	aa 1f       	adc	r26, r26
    246a:	64 9f       	mul	r22, r20
    246c:	66 27       	eor	r22, r22
    246e:	b0 0d       	add	r27, r0
    2470:	a1 1d       	adc	r26, r1
    2472:	66 1f       	adc	r22, r22
    2474:	82 9f       	mul	r24, r18
    2476:	22 27       	eor	r18, r18
    2478:	b0 0d       	add	r27, r0
    247a:	a1 1d       	adc	r26, r1
    247c:	62 1f       	adc	r22, r18
    247e:	73 9f       	mul	r23, r19
    2480:	b0 0d       	add	r27, r0
    2482:	a1 1d       	adc	r26, r1
    2484:	62 1f       	adc	r22, r18
    2486:	83 9f       	mul	r24, r19
    2488:	a0 0d       	add	r26, r0
    248a:	61 1d       	adc	r22, r1
    248c:	22 1f       	adc	r18, r18
    248e:	74 9f       	mul	r23, r20
    2490:	33 27       	eor	r19, r19
    2492:	a0 0d       	add	r26, r0
    2494:	61 1d       	adc	r22, r1
    2496:	23 1f       	adc	r18, r19
    2498:	84 9f       	mul	r24, r20
    249a:	60 0d       	add	r22, r0
    249c:	21 1d       	adc	r18, r1
    249e:	82 2f       	mov	r24, r18
    24a0:	76 2f       	mov	r23, r22
    24a2:	6a 2f       	mov	r22, r26
    24a4:	11 24       	eor	r1, r1
    24a6:	9f 57       	subi	r25, 0x7F	; 127
    24a8:	50 40       	sbci	r21, 0x00	; 0
    24aa:	8a f0       	brmi	.+34     	; 0x24ce <__mulsf3_pse+0x84>
    24ac:	e1 f0       	breq	.+56     	; 0x24e6 <__mulsf3_pse+0x9c>
    24ae:	88 23       	and	r24, r24
    24b0:	4a f0       	brmi	.+18     	; 0x24c4 <__mulsf3_pse+0x7a>
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	bb 1f       	adc	r27, r27
    24b8:	66 1f       	adc	r22, r22
    24ba:	77 1f       	adc	r23, r23
    24bc:	88 1f       	adc	r24, r24
    24be:	91 50       	subi	r25, 0x01	; 1
    24c0:	50 40       	sbci	r21, 0x00	; 0
    24c2:	a9 f7       	brne	.-22     	; 0x24ae <__mulsf3_pse+0x64>
    24c4:	9e 3f       	cpi	r25, 0xFE	; 254
    24c6:	51 05       	cpc	r21, r1
    24c8:	70 f0       	brcs	.+28     	; 0x24e6 <__mulsf3_pse+0x9c>
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <__fp_inf>
    24cc:	a6 cf       	rjmp	.-180    	; 0x241a <__fp_szero>
    24ce:	5f 3f       	cpi	r21, 0xFF	; 255
    24d0:	ec f3       	brlt	.-6      	; 0x24cc <__mulsf3_pse+0x82>
    24d2:	98 3e       	cpi	r25, 0xE8	; 232
    24d4:	dc f3       	brlt	.-10     	; 0x24cc <__mulsf3_pse+0x82>
    24d6:	86 95       	lsr	r24
    24d8:	77 95       	ror	r23
    24da:	67 95       	ror	r22
    24dc:	b7 95       	ror	r27
    24de:	f7 95       	ror	r31
    24e0:	e7 95       	ror	r30
    24e2:	9f 5f       	subi	r25, 0xFF	; 255
    24e4:	c1 f7       	brne	.-16     	; 0x24d6 <__mulsf3_pse+0x8c>
    24e6:	fe 2b       	or	r31, r30
    24e8:	88 0f       	add	r24, r24
    24ea:	91 1d       	adc	r25, r1
    24ec:	96 95       	lsr	r25
    24ee:	87 95       	ror	r24
    24f0:	97 f9       	bld	r25, 7
    24f2:	08 95       	ret

000024f4 <__fp_inf>:
    24f4:	97 f9       	bld	r25, 7
    24f6:	9f 67       	ori	r25, 0x7F	; 127
    24f8:	80 e8       	ldi	r24, 0x80	; 128
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	08 95       	ret

00002500 <__fp_nan>:
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	80 ec       	ldi	r24, 0xC0	; 192
    2504:	08 95       	ret

00002506 <__fp_pscA>:
    2506:	00 24       	eor	r0, r0
    2508:	0a 94       	dec	r0
    250a:	16 16       	cp	r1, r22
    250c:	17 06       	cpc	r1, r23
    250e:	18 06       	cpc	r1, r24
    2510:	09 06       	cpc	r0, r25
    2512:	08 95       	ret

00002514 <__fp_pscB>:
    2514:	00 24       	eor	r0, r0
    2516:	0a 94       	dec	r0
    2518:	12 16       	cp	r1, r18
    251a:	13 06       	cpc	r1, r19
    251c:	14 06       	cpc	r1, r20
    251e:	05 06       	cpc	r0, r21
    2520:	08 95       	ret

00002522 <__fp_round>:
    2522:	09 2e       	mov	r0, r25
    2524:	03 94       	inc	r0
    2526:	00 0c       	add	r0, r0
    2528:	11 f4       	brne	.+4      	; 0x252e <__fp_round+0xc>
    252a:	88 23       	and	r24, r24
    252c:	52 f0       	brmi	.+20     	; 0x2542 <__fp_round+0x20>
    252e:	bb 0f       	add	r27, r27
    2530:	40 f4       	brcc	.+16     	; 0x2542 <__fp_round+0x20>
    2532:	bf 2b       	or	r27, r31
    2534:	11 f4       	brne	.+4      	; 0x253a <__fp_round+0x18>
    2536:	60 ff       	sbrs	r22, 0
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <__fp_round+0x20>
    253a:	6f 5f       	subi	r22, 0xFF	; 255
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	08 95       	ret

00002544 <malloc>:
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	91 05       	cpc	r25, r1
    254c:	10 f4       	brcc	.+4      	; 0x2552 <malloc+0xe>
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	e0 91 86 07 	lds	r30, 0x0786
    2556:	f0 91 87 07 	lds	r31, 0x0787
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	a0 e0       	ldi	r26, 0x00	; 0
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	30 97       	sbiw	r30, 0x00	; 0
    2564:	39 f1       	breq	.+78     	; 0x25b4 <malloc+0x70>
    2566:	40 81       	ld	r20, Z
    2568:	51 81       	ldd	r21, Z+1	; 0x01
    256a:	48 17       	cp	r20, r24
    256c:	59 07       	cpc	r21, r25
    256e:	b8 f0       	brcs	.+46     	; 0x259e <malloc+0x5a>
    2570:	48 17       	cp	r20, r24
    2572:	59 07       	cpc	r21, r25
    2574:	71 f4       	brne	.+28     	; 0x2592 <malloc+0x4e>
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	10 97       	sbiw	r26, 0x00	; 0
    257c:	29 f0       	breq	.+10     	; 0x2588 <malloc+0x44>
    257e:	13 96       	adiw	r26, 0x03	; 3
    2580:	9c 93       	st	X, r25
    2582:	8e 93       	st	-X, r24
    2584:	12 97       	sbiw	r26, 0x02	; 2
    2586:	2c c0       	rjmp	.+88     	; 0x25e0 <malloc+0x9c>
    2588:	90 93 87 07 	sts	0x0787, r25
    258c:	80 93 86 07 	sts	0x0786, r24
    2590:	27 c0       	rjmp	.+78     	; 0x25e0 <malloc+0x9c>
    2592:	21 15       	cp	r18, r1
    2594:	31 05       	cpc	r19, r1
    2596:	31 f0       	breq	.+12     	; 0x25a4 <malloc+0x60>
    2598:	42 17       	cp	r20, r18
    259a:	53 07       	cpc	r21, r19
    259c:	18 f0       	brcs	.+6      	; 0x25a4 <malloc+0x60>
    259e:	a9 01       	movw	r20, r18
    25a0:	db 01       	movw	r26, r22
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <malloc+0x62>
    25a4:	ef 01       	movw	r28, r30
    25a6:	9a 01       	movw	r18, r20
    25a8:	bd 01       	movw	r22, r26
    25aa:	df 01       	movw	r26, r30
    25ac:	02 80       	ldd	r0, Z+2	; 0x02
    25ae:	f3 81       	ldd	r31, Z+3	; 0x03
    25b0:	e0 2d       	mov	r30, r0
    25b2:	d7 cf       	rjmp	.-82     	; 0x2562 <malloc+0x1e>
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	f9 f0       	breq	.+62     	; 0x25f8 <malloc+0xb4>
    25ba:	28 1b       	sub	r18, r24
    25bc:	39 0b       	sbc	r19, r25
    25be:	24 30       	cpi	r18, 0x04	; 4
    25c0:	31 05       	cpc	r19, r1
    25c2:	80 f4       	brcc	.+32     	; 0x25e4 <malloc+0xa0>
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	61 15       	cp	r22, r1
    25ca:	71 05       	cpc	r23, r1
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <malloc+0x92>
    25ce:	fb 01       	movw	r30, r22
    25d0:	93 83       	std	Z+3, r25	; 0x03
    25d2:	82 83       	std	Z+2, r24	; 0x02
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <malloc+0x9a>
    25d6:	90 93 87 07 	sts	0x0787, r25
    25da:	80 93 86 07 	sts	0x0786, r24
    25de:	fe 01       	movw	r30, r28
    25e0:	32 96       	adiw	r30, 0x02	; 2
    25e2:	44 c0       	rjmp	.+136    	; 0x266c <malloc+0x128>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	81 93       	st	Z+, r24
    25ec:	91 93       	st	Z+, r25
    25ee:	22 50       	subi	r18, 0x02	; 2
    25f0:	31 09       	sbc	r19, r1
    25f2:	39 83       	std	Y+1, r19	; 0x01
    25f4:	28 83       	st	Y, r18
    25f6:	3a c0       	rjmp	.+116    	; 0x266c <malloc+0x128>
    25f8:	20 91 84 07 	lds	r18, 0x0784
    25fc:	30 91 85 07 	lds	r19, 0x0785
    2600:	23 2b       	or	r18, r19
    2602:	41 f4       	brne	.+16     	; 0x2614 <malloc+0xd0>
    2604:	20 91 02 01 	lds	r18, 0x0102
    2608:	30 91 03 01 	lds	r19, 0x0103
    260c:	30 93 85 07 	sts	0x0785, r19
    2610:	20 93 84 07 	sts	0x0784, r18
    2614:	20 91 00 01 	lds	r18, 0x0100
    2618:	30 91 01 01 	lds	r19, 0x0101
    261c:	21 15       	cp	r18, r1
    261e:	31 05       	cpc	r19, r1
    2620:	41 f4       	brne	.+16     	; 0x2632 <malloc+0xee>
    2622:	2d b7       	in	r18, 0x3d	; 61
    2624:	3e b7       	in	r19, 0x3e	; 62
    2626:	40 91 04 01 	lds	r20, 0x0104
    262a:	50 91 05 01 	lds	r21, 0x0105
    262e:	24 1b       	sub	r18, r20
    2630:	35 0b       	sbc	r19, r21
    2632:	e0 91 84 07 	lds	r30, 0x0784
    2636:	f0 91 85 07 	lds	r31, 0x0785
    263a:	e2 17       	cp	r30, r18
    263c:	f3 07       	cpc	r31, r19
    263e:	a0 f4       	brcc	.+40     	; 0x2668 <malloc+0x124>
    2640:	2e 1b       	sub	r18, r30
    2642:	3f 0b       	sbc	r19, r31
    2644:	28 17       	cp	r18, r24
    2646:	39 07       	cpc	r19, r25
    2648:	78 f0       	brcs	.+30     	; 0x2668 <malloc+0x124>
    264a:	ac 01       	movw	r20, r24
    264c:	4e 5f       	subi	r20, 0xFE	; 254
    264e:	5f 4f       	sbci	r21, 0xFF	; 255
    2650:	24 17       	cp	r18, r20
    2652:	35 07       	cpc	r19, r21
    2654:	48 f0       	brcs	.+18     	; 0x2668 <malloc+0x124>
    2656:	4e 0f       	add	r20, r30
    2658:	5f 1f       	adc	r21, r31
    265a:	50 93 85 07 	sts	0x0785, r21
    265e:	40 93 84 07 	sts	0x0784, r20
    2662:	81 93       	st	Z+, r24
    2664:	91 93       	st	Z+, r25
    2666:	02 c0       	rjmp	.+4      	; 0x266c <malloc+0x128>
    2668:	e0 e0       	ldi	r30, 0x00	; 0
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	cf 01       	movw	r24, r30
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <free>:
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	09 f4       	brne	.+2      	; 0x267e <free+0xa>
    267c:	87 c0       	rjmp	.+270    	; 0x278c <free+0x118>
    267e:	fc 01       	movw	r30, r24
    2680:	32 97       	sbiw	r30, 0x02	; 2
    2682:	13 82       	std	Z+3, r1	; 0x03
    2684:	12 82       	std	Z+2, r1	; 0x02
    2686:	c0 91 86 07 	lds	r28, 0x0786
    268a:	d0 91 87 07 	lds	r29, 0x0787
    268e:	20 97       	sbiw	r28, 0x00	; 0
    2690:	81 f4       	brne	.+32     	; 0x26b2 <free+0x3e>
    2692:	20 81       	ld	r18, Z
    2694:	31 81       	ldd	r19, Z+1	; 0x01
    2696:	28 0f       	add	r18, r24
    2698:	39 1f       	adc	r19, r25
    269a:	80 91 84 07 	lds	r24, 0x0784
    269e:	90 91 85 07 	lds	r25, 0x0785
    26a2:	82 17       	cp	r24, r18
    26a4:	93 07       	cpc	r25, r19
    26a6:	79 f5       	brne	.+94     	; 0x2706 <free+0x92>
    26a8:	f0 93 85 07 	sts	0x0785, r31
    26ac:	e0 93 84 07 	sts	0x0784, r30
    26b0:	6d c0       	rjmp	.+218    	; 0x278c <free+0x118>
    26b2:	de 01       	movw	r26, r28
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	ae 17       	cp	r26, r30
    26ba:	bf 07       	cpc	r27, r31
    26bc:	50 f4       	brcc	.+20     	; 0x26d2 <free+0x5e>
    26be:	12 96       	adiw	r26, 0x02	; 2
    26c0:	4d 91       	ld	r20, X+
    26c2:	5c 91       	ld	r21, X
    26c4:	13 97       	sbiw	r26, 0x03	; 3
    26c6:	9d 01       	movw	r18, r26
    26c8:	41 15       	cp	r20, r1
    26ca:	51 05       	cpc	r21, r1
    26cc:	09 f1       	breq	.+66     	; 0x2710 <free+0x9c>
    26ce:	da 01       	movw	r26, r20
    26d0:	f3 cf       	rjmp	.-26     	; 0x26b8 <free+0x44>
    26d2:	b3 83       	std	Z+3, r27	; 0x03
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	40 81       	ld	r20, Z
    26d8:	51 81       	ldd	r21, Z+1	; 0x01
    26da:	84 0f       	add	r24, r20
    26dc:	95 1f       	adc	r25, r21
    26de:	8a 17       	cp	r24, r26
    26e0:	9b 07       	cpc	r25, r27
    26e2:	71 f4       	brne	.+28     	; 0x2700 <free+0x8c>
    26e4:	8d 91       	ld	r24, X+
    26e6:	9c 91       	ld	r25, X
    26e8:	11 97       	sbiw	r26, 0x01	; 1
    26ea:	84 0f       	add	r24, r20
    26ec:	95 1f       	adc	r25, r21
    26ee:	02 96       	adiw	r24, 0x02	; 2
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
    26f4:	12 96       	adiw	r26, 0x02	; 2
    26f6:	8d 91       	ld	r24, X+
    26f8:	9c 91       	ld	r25, X
    26fa:	13 97       	sbiw	r26, 0x03	; 3
    26fc:	93 83       	std	Z+3, r25	; 0x03
    26fe:	82 83       	std	Z+2, r24	; 0x02
    2700:	21 15       	cp	r18, r1
    2702:	31 05       	cpc	r19, r1
    2704:	29 f4       	brne	.+10     	; 0x2710 <free+0x9c>
    2706:	f0 93 87 07 	sts	0x0787, r31
    270a:	e0 93 86 07 	sts	0x0786, r30
    270e:	3e c0       	rjmp	.+124    	; 0x278c <free+0x118>
    2710:	d9 01       	movw	r26, r18
    2712:	13 96       	adiw	r26, 0x03	; 3
    2714:	fc 93       	st	X, r31
    2716:	ee 93       	st	-X, r30
    2718:	12 97       	sbiw	r26, 0x02	; 2
    271a:	4d 91       	ld	r20, X+
    271c:	5d 91       	ld	r21, X+
    271e:	a4 0f       	add	r26, r20
    2720:	b5 1f       	adc	r27, r21
    2722:	ea 17       	cp	r30, r26
    2724:	fb 07       	cpc	r31, r27
    2726:	79 f4       	brne	.+30     	; 0x2746 <free+0xd2>
    2728:	80 81       	ld	r24, Z
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	84 0f       	add	r24, r20
    272e:	95 1f       	adc	r25, r21
    2730:	02 96       	adiw	r24, 0x02	; 2
    2732:	d9 01       	movw	r26, r18
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	9c 93       	st	X, r25
    2738:	8e 93       	st	-X, r24
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	13 96       	adiw	r26, 0x03	; 3
    2740:	9c 93       	st	X, r25
    2742:	8e 93       	st	-X, r24
    2744:	12 97       	sbiw	r26, 0x02	; 2
    2746:	e0 e0       	ldi	r30, 0x00	; 0
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	19 f0       	breq	.+6      	; 0x2758 <free+0xe4>
    2752:	fe 01       	movw	r30, r28
    2754:	ec 01       	movw	r28, r24
    2756:	f9 cf       	rjmp	.-14     	; 0x274a <free+0xd6>
    2758:	ce 01       	movw	r24, r28
    275a:	02 96       	adiw	r24, 0x02	; 2
    275c:	28 81       	ld	r18, Y
    275e:	39 81       	ldd	r19, Y+1	; 0x01
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	20 91 84 07 	lds	r18, 0x0784
    2768:	30 91 85 07 	lds	r19, 0x0785
    276c:	28 17       	cp	r18, r24
    276e:	39 07       	cpc	r19, r25
    2770:	69 f4       	brne	.+26     	; 0x278c <free+0x118>
    2772:	30 97       	sbiw	r30, 0x00	; 0
    2774:	29 f4       	brne	.+10     	; 0x2780 <free+0x10c>
    2776:	10 92 87 07 	sts	0x0787, r1
    277a:	10 92 86 07 	sts	0x0786, r1
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <free+0x110>
    2780:	13 82       	std	Z+3, r1	; 0x03
    2782:	12 82       	std	Z+2, r1	; 0x02
    2784:	d0 93 85 07 	sts	0x0785, r29
    2788:	c0 93 84 07 	sts	0x0784, r28
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <memcmp>:
    2792:	fb 01       	movw	r30, r22
    2794:	dc 01       	movw	r26, r24
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <memcmp+0xe>
    2798:	8d 91       	ld	r24, X+
    279a:	01 90       	ld	r0, Z+
    279c:	80 19       	sub	r24, r0
    279e:	21 f4       	brne	.+8      	; 0x27a8 <memcmp+0x16>
    27a0:	41 50       	subi	r20, 0x01	; 1
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	c8 f7       	brcc	.-14     	; 0x2798 <memcmp+0x6>
    27a6:	88 1b       	sub	r24, r24
    27a8:	99 0b       	sbc	r25, r25
    27aa:	08 95       	ret

000027ac <memcpy>:
    27ac:	fb 01       	movw	r30, r22
    27ae:	dc 01       	movw	r26, r24
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <memcpy+0xa>
    27b2:	01 90       	ld	r0, Z+
    27b4:	0d 92       	st	X+, r0
    27b6:	41 50       	subi	r20, 0x01	; 1
    27b8:	50 40       	sbci	r21, 0x00	; 0
    27ba:	d8 f7       	brcc	.-10     	; 0x27b2 <memcpy+0x6>
    27bc:	08 95       	ret

000027be <memset>:
    27be:	dc 01       	movw	r26, r24
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <memset+0x6>
    27c2:	6d 93       	st	X+, r22
    27c4:	41 50       	subi	r20, 0x01	; 1
    27c6:	50 40       	sbci	r21, 0x00	; 0
    27c8:	e0 f7       	brcc	.-8      	; 0x27c2 <memset+0x4>
    27ca:	08 95       	ret

000027cc <strcpy>:
    27cc:	fb 01       	movw	r30, r22
    27ce:	dc 01       	movw	r26, r24
    27d0:	01 90       	ld	r0, Z+
    27d2:	0d 92       	st	X+, r0
    27d4:	00 20       	and	r0, r0
    27d6:	e1 f7       	brne	.-8      	; 0x27d0 <strcpy+0x4>
    27d8:	08 95       	ret

000027da <strstr>:
    27da:	fb 01       	movw	r30, r22
    27dc:	51 91       	ld	r21, Z+
    27de:	55 23       	and	r21, r21
    27e0:	a9 f0       	breq	.+42     	; 0x280c <strstr+0x32>
    27e2:	bf 01       	movw	r22, r30
    27e4:	dc 01       	movw	r26, r24
    27e6:	4d 91       	ld	r20, X+
    27e8:	45 17       	cp	r20, r21
    27ea:	41 11       	cpse	r20, r1
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <strstr+0xc>
    27ee:	59 f4       	brne	.+22     	; 0x2806 <strstr+0x2c>
    27f0:	cd 01       	movw	r24, r26
    27f2:	01 90       	ld	r0, Z+
    27f4:	00 20       	and	r0, r0
    27f6:	49 f0       	breq	.+18     	; 0x280a <strstr+0x30>
    27f8:	4d 91       	ld	r20, X+
    27fa:	40 15       	cp	r20, r0
    27fc:	41 11       	cpse	r20, r1
    27fe:	c9 f3       	breq	.-14     	; 0x27f2 <strstr+0x18>
    2800:	fb 01       	movw	r30, r22
    2802:	41 11       	cpse	r20, r1
    2804:	ef cf       	rjmp	.-34     	; 0x27e4 <strstr+0xa>
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	08 95       	ret

0000280e <fdevopen>:
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	ec 01       	movw	r28, r24
    2818:	8b 01       	movw	r16, r22
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	31 f4       	brne	.+12     	; 0x282a <fdevopen+0x1c>
    281e:	61 15       	cp	r22, r1
    2820:	71 05       	cpc	r23, r1
    2822:	19 f4       	brne	.+6      	; 0x282a <fdevopen+0x1c>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	38 c0       	rjmp	.+112    	; 0x289a <fdevopen+0x8c>
    282a:	6e e0       	ldi	r22, 0x0E	; 14
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <calloc>
    2836:	fc 01       	movw	r30, r24
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	a1 f3       	breq	.-24     	; 0x2824 <fdevopen+0x16>
    283c:	80 e8       	ldi	r24, 0x80	; 128
    283e:	83 83       	std	Z+3, r24	; 0x03
    2840:	01 15       	cp	r16, r1
    2842:	11 05       	cpc	r17, r1
    2844:	71 f0       	breq	.+28     	; 0x2862 <fdevopen+0x54>
    2846:	13 87       	std	Z+11, r17	; 0x0b
    2848:	02 87       	std	Z+10, r16	; 0x0a
    284a:	81 e8       	ldi	r24, 0x81	; 129
    284c:	83 83       	std	Z+3, r24	; 0x03
    284e:	80 91 88 07 	lds	r24, 0x0788
    2852:	90 91 89 07 	lds	r25, 0x0789
    2856:	89 2b       	or	r24, r25
    2858:	21 f4       	brne	.+8      	; 0x2862 <fdevopen+0x54>
    285a:	f0 93 89 07 	sts	0x0789, r31
    285e:	e0 93 88 07 	sts	0x0788, r30
    2862:	20 97       	sbiw	r28, 0x00	; 0
    2864:	c9 f0       	breq	.+50     	; 0x2898 <fdevopen+0x8a>
    2866:	d1 87       	std	Z+9, r29	; 0x09
    2868:	c0 87       	std	Z+8, r28	; 0x08
    286a:	83 81       	ldd	r24, Z+3	; 0x03
    286c:	82 60       	ori	r24, 0x02	; 2
    286e:	83 83       	std	Z+3, r24	; 0x03
    2870:	80 91 8a 07 	lds	r24, 0x078A
    2874:	90 91 8b 07 	lds	r25, 0x078B
    2878:	89 2b       	or	r24, r25
    287a:	71 f4       	brne	.+28     	; 0x2898 <fdevopen+0x8a>
    287c:	f0 93 8b 07 	sts	0x078B, r31
    2880:	e0 93 8a 07 	sts	0x078A, r30
    2884:	80 91 8c 07 	lds	r24, 0x078C
    2888:	90 91 8d 07 	lds	r25, 0x078D
    288c:	89 2b       	or	r24, r25
    288e:	21 f4       	brne	.+8      	; 0x2898 <fdevopen+0x8a>
    2890:	f0 93 8d 07 	sts	0x078D, r31
    2894:	e0 93 8c 07 	sts	0x078C, r30
    2898:	cf 01       	movw	r24, r30
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <printf_P>:
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	fe 01       	movw	r30, r28
    28b2:	37 96       	adiw	r30, 0x07	; 7
    28b4:	61 91       	ld	r22, Z+
    28b6:	71 91       	ld	r23, Z+
    28b8:	0a e8       	ldi	r16, 0x8A	; 138
    28ba:	17 e0       	ldi	r17, 0x07	; 7
    28bc:	d8 01       	movw	r26, r16
    28be:	8d 91       	ld	r24, X+
    28c0:	9c 91       	ld	r25, X
    28c2:	dc 01       	movw	r26, r24
    28c4:	13 96       	adiw	r26, 0x03	; 3
    28c6:	2c 91       	ld	r18, X
    28c8:	13 97       	sbiw	r26, 0x03	; 3
    28ca:	28 60       	ori	r18, 0x08	; 8
    28cc:	13 96       	adiw	r26, 0x03	; 3
    28ce:	2c 93       	st	X, r18
    28d0:	af 01       	movw	r20, r30
    28d2:	0e 94 b4 14 	call	0x2968	; 0x2968 <vfprintf>
    28d6:	d8 01       	movw	r26, r16
    28d8:	ed 91       	ld	r30, X+
    28da:	fc 91       	ld	r31, X
    28dc:	23 81       	ldd	r18, Z+3	; 0x03
    28de:	27 7f       	andi	r18, 0xF7	; 247
    28e0:	23 83       	std	Z+3, r18	; 0x03
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret

000028ec <sprintf_P>:
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	2e 97       	sbiw	r28, 0x0e	; 14
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	0d 89       	ldd	r16, Y+21	; 0x15
    2906:	1e 89       	ldd	r17, Y+22	; 0x16
    2908:	8e e0       	ldi	r24, 0x0E	; 14
    290a:	8c 83       	std	Y+4, r24	; 0x04
    290c:	1a 83       	std	Y+2, r17	; 0x02
    290e:	09 83       	std	Y+1, r16	; 0x01
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	9f e7       	ldi	r25, 0x7F	; 127
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	ae 01       	movw	r20, r28
    291a:	47 5e       	subi	r20, 0xE7	; 231
    291c:	5f 4f       	sbci	r21, 0xFF	; 255
    291e:	6f 89       	ldd	r22, Y+23	; 0x17
    2920:	78 8d       	ldd	r23, Y+24	; 0x18
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 b4 14 	call	0x2968	; 0x2968 <vfprintf>
    292a:	ef 81       	ldd	r30, Y+7	; 0x07
    292c:	f8 85       	ldd	r31, Y+8	; 0x08
    292e:	e0 0f       	add	r30, r16
    2930:	f1 1f       	adc	r31, r17
    2932:	10 82       	st	Z, r1
    2934:	2e 96       	adiw	r28, 0x0e	; 14
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	08 95       	ret

0000294a <vfprintf_P>:
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	ec 01       	movw	r28, r24
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	88 60       	ori	r24, 0x08	; 8
    2954:	8b 83       	std	Y+3, r24	; 0x03
    2956:	ce 01       	movw	r24, r28
    2958:	0e 94 b4 14 	call	0x2968	; 0x2968 <vfprintf>
    295c:	2b 81       	ldd	r18, Y+3	; 0x03
    295e:	27 7f       	andi	r18, 0xF7	; 247
    2960:	2b 83       	std	Y+3, r18	; 0x03
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	08 95       	ret

00002968 <vfprintf>:
    2968:	2f 92       	push	r2
    296a:	3f 92       	push	r3
    296c:	4f 92       	push	r4
    296e:	5f 92       	push	r5
    2970:	6f 92       	push	r6
    2972:	7f 92       	push	r7
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	2c 97       	sbiw	r28, 0x0c	; 12
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	7c 01       	movw	r14, r24
    299e:	6b 01       	movw	r12, r22
    29a0:	8a 01       	movw	r16, r20
    29a2:	fc 01       	movw	r30, r24
    29a4:	17 82       	std	Z+7, r1	; 0x07
    29a6:	16 82       	std	Z+6, r1	; 0x06
    29a8:	83 81       	ldd	r24, Z+3	; 0x03
    29aa:	81 ff       	sbrs	r24, 1
    29ac:	bd c1       	rjmp	.+890    	; 0x2d28 <vfprintf+0x3c0>
    29ae:	ce 01       	movw	r24, r28
    29b0:	01 96       	adiw	r24, 0x01	; 1
    29b2:	4c 01       	movw	r8, r24
    29b4:	f7 01       	movw	r30, r14
    29b6:	93 81       	ldd	r25, Z+3	; 0x03
    29b8:	f6 01       	movw	r30, r12
    29ba:	93 fd       	sbrc	r25, 3
    29bc:	85 91       	lpm	r24, Z+
    29be:	93 ff       	sbrs	r25, 3
    29c0:	81 91       	ld	r24, Z+
    29c2:	6f 01       	movw	r12, r30
    29c4:	88 23       	and	r24, r24
    29c6:	09 f4       	brne	.+2      	; 0x29ca <vfprintf+0x62>
    29c8:	ab c1       	rjmp	.+854    	; 0x2d20 <vfprintf+0x3b8>
    29ca:	85 32       	cpi	r24, 0x25	; 37
    29cc:	39 f4       	brne	.+14     	; 0x29dc <vfprintf+0x74>
    29ce:	93 fd       	sbrc	r25, 3
    29d0:	85 91       	lpm	r24, Z+
    29d2:	93 ff       	sbrs	r25, 3
    29d4:	81 91       	ld	r24, Z+
    29d6:	6f 01       	movw	r12, r30
    29d8:	85 32       	cpi	r24, 0x25	; 37
    29da:	29 f4       	brne	.+10     	; 0x29e6 <vfprintf+0x7e>
    29dc:	b7 01       	movw	r22, r14
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    29e4:	e7 cf       	rjmp	.-50     	; 0x29b4 <vfprintf+0x4c>
    29e6:	51 2c       	mov	r5, r1
    29e8:	31 2c       	mov	r3, r1
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	20 32       	cpi	r18, 0x20	; 32
    29ee:	a0 f4       	brcc	.+40     	; 0x2a18 <vfprintf+0xb0>
    29f0:	8b 32       	cpi	r24, 0x2B	; 43
    29f2:	69 f0       	breq	.+26     	; 0x2a0e <vfprintf+0xa6>
    29f4:	30 f4       	brcc	.+12     	; 0x2a02 <vfprintf+0x9a>
    29f6:	80 32       	cpi	r24, 0x20	; 32
    29f8:	59 f0       	breq	.+22     	; 0x2a10 <vfprintf+0xa8>
    29fa:	83 32       	cpi	r24, 0x23	; 35
    29fc:	69 f4       	brne	.+26     	; 0x2a18 <vfprintf+0xb0>
    29fe:	20 61       	ori	r18, 0x10	; 16
    2a00:	2c c0       	rjmp	.+88     	; 0x2a5a <vfprintf+0xf2>
    2a02:	8d 32       	cpi	r24, 0x2D	; 45
    2a04:	39 f0       	breq	.+14     	; 0x2a14 <vfprintf+0xac>
    2a06:	80 33       	cpi	r24, 0x30	; 48
    2a08:	39 f4       	brne	.+14     	; 0x2a18 <vfprintf+0xb0>
    2a0a:	21 60       	ori	r18, 0x01	; 1
    2a0c:	26 c0       	rjmp	.+76     	; 0x2a5a <vfprintf+0xf2>
    2a0e:	22 60       	ori	r18, 0x02	; 2
    2a10:	24 60       	ori	r18, 0x04	; 4
    2a12:	23 c0       	rjmp	.+70     	; 0x2a5a <vfprintf+0xf2>
    2a14:	28 60       	ori	r18, 0x08	; 8
    2a16:	21 c0       	rjmp	.+66     	; 0x2a5a <vfprintf+0xf2>
    2a18:	27 fd       	sbrc	r18, 7
    2a1a:	27 c0       	rjmp	.+78     	; 0x2a6a <vfprintf+0x102>
    2a1c:	30 ed       	ldi	r19, 0xD0	; 208
    2a1e:	38 0f       	add	r19, r24
    2a20:	3a 30       	cpi	r19, 0x0A	; 10
    2a22:	78 f4       	brcc	.+30     	; 0x2a42 <vfprintf+0xda>
    2a24:	26 ff       	sbrs	r18, 6
    2a26:	06 c0       	rjmp	.+12     	; 0x2a34 <vfprintf+0xcc>
    2a28:	fa e0       	ldi	r31, 0x0A	; 10
    2a2a:	5f 9e       	mul	r5, r31
    2a2c:	30 0d       	add	r19, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	53 2e       	mov	r5, r19
    2a32:	13 c0       	rjmp	.+38     	; 0x2a5a <vfprintf+0xf2>
    2a34:	8a e0       	ldi	r24, 0x0A	; 10
    2a36:	38 9e       	mul	r3, r24
    2a38:	30 0d       	add	r19, r0
    2a3a:	11 24       	eor	r1, r1
    2a3c:	33 2e       	mov	r3, r19
    2a3e:	20 62       	ori	r18, 0x20	; 32
    2a40:	0c c0       	rjmp	.+24     	; 0x2a5a <vfprintf+0xf2>
    2a42:	8e 32       	cpi	r24, 0x2E	; 46
    2a44:	21 f4       	brne	.+8      	; 0x2a4e <vfprintf+0xe6>
    2a46:	26 fd       	sbrc	r18, 6
    2a48:	6b c1       	rjmp	.+726    	; 0x2d20 <vfprintf+0x3b8>
    2a4a:	20 64       	ori	r18, 0x40	; 64
    2a4c:	06 c0       	rjmp	.+12     	; 0x2a5a <vfprintf+0xf2>
    2a4e:	8c 36       	cpi	r24, 0x6C	; 108
    2a50:	11 f4       	brne	.+4      	; 0x2a56 <vfprintf+0xee>
    2a52:	20 68       	ori	r18, 0x80	; 128
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <vfprintf+0xf2>
    2a56:	88 36       	cpi	r24, 0x68	; 104
    2a58:	41 f4       	brne	.+16     	; 0x2a6a <vfprintf+0x102>
    2a5a:	f6 01       	movw	r30, r12
    2a5c:	93 fd       	sbrc	r25, 3
    2a5e:	85 91       	lpm	r24, Z+
    2a60:	93 ff       	sbrs	r25, 3
    2a62:	81 91       	ld	r24, Z+
    2a64:	6f 01       	movw	r12, r30
    2a66:	81 11       	cpse	r24, r1
    2a68:	c1 cf       	rjmp	.-126    	; 0x29ec <vfprintf+0x84>
    2a6a:	98 2f       	mov	r25, r24
    2a6c:	9f 7d       	andi	r25, 0xDF	; 223
    2a6e:	95 54       	subi	r25, 0x45	; 69
    2a70:	93 30       	cpi	r25, 0x03	; 3
    2a72:	28 f4       	brcc	.+10     	; 0x2a7e <vfprintf+0x116>
    2a74:	0c 5f       	subi	r16, 0xFC	; 252
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	ff e3       	ldi	r31, 0x3F	; 63
    2a7a:	f9 83       	std	Y+1, r31	; 0x01
    2a7c:	0d c0       	rjmp	.+26     	; 0x2a98 <vfprintf+0x130>
    2a7e:	83 36       	cpi	r24, 0x63	; 99
    2a80:	31 f0       	breq	.+12     	; 0x2a8e <vfprintf+0x126>
    2a82:	83 37       	cpi	r24, 0x73	; 115
    2a84:	71 f0       	breq	.+28     	; 0x2aa2 <vfprintf+0x13a>
    2a86:	83 35       	cpi	r24, 0x53	; 83
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <vfprintf+0x124>
    2a8a:	5b c0       	rjmp	.+182    	; 0x2b42 <vfprintf+0x1da>
    2a8c:	22 c0       	rjmp	.+68     	; 0x2ad2 <vfprintf+0x16a>
    2a8e:	f8 01       	movw	r30, r16
    2a90:	80 81       	ld	r24, Z
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	0e 5f       	subi	r16, 0xFE	; 254
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	44 24       	eor	r4, r4
    2a9a:	43 94       	inc	r4
    2a9c:	51 2c       	mov	r5, r1
    2a9e:	54 01       	movw	r10, r8
    2aa0:	15 c0       	rjmp	.+42     	; 0x2acc <vfprintf+0x164>
    2aa2:	38 01       	movw	r6, r16
    2aa4:	f2 e0       	ldi	r31, 0x02	; 2
    2aa6:	6f 0e       	add	r6, r31
    2aa8:	71 1c       	adc	r7, r1
    2aaa:	f8 01       	movw	r30, r16
    2aac:	a0 80       	ld	r10, Z
    2aae:	b1 80       	ldd	r11, Z+1	; 0x01
    2ab0:	26 ff       	sbrs	r18, 6
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <vfprintf+0x152>
    2ab4:	65 2d       	mov	r22, r5
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <vfprintf+0x156>
    2aba:	6f ef       	ldi	r22, 0xFF	; 255
    2abc:	7f ef       	ldi	r23, 0xFF	; 255
    2abe:	c5 01       	movw	r24, r10
    2ac0:	2c 87       	std	Y+12, r18	; 0x0c
    2ac2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <strnlen>
    2ac6:	2c 01       	movw	r4, r24
    2ac8:	83 01       	movw	r16, r6
    2aca:	2c 85       	ldd	r18, Y+12	; 0x0c
    2acc:	2f 77       	andi	r18, 0x7F	; 127
    2ace:	22 2e       	mov	r2, r18
    2ad0:	17 c0       	rjmp	.+46     	; 0x2b00 <vfprintf+0x198>
    2ad2:	38 01       	movw	r6, r16
    2ad4:	f2 e0       	ldi	r31, 0x02	; 2
    2ad6:	6f 0e       	add	r6, r31
    2ad8:	71 1c       	adc	r7, r1
    2ada:	f8 01       	movw	r30, r16
    2adc:	a0 80       	ld	r10, Z
    2ade:	b1 80       	ldd	r11, Z+1	; 0x01
    2ae0:	26 ff       	sbrs	r18, 6
    2ae2:	03 c0       	rjmp	.+6      	; 0x2aea <vfprintf+0x182>
    2ae4:	65 2d       	mov	r22, r5
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <vfprintf+0x186>
    2aea:	6f ef       	ldi	r22, 0xFF	; 255
    2aec:	7f ef       	ldi	r23, 0xFF	; 255
    2aee:	c5 01       	movw	r24, r10
    2af0:	2c 87       	std	Y+12, r18	; 0x0c
    2af2:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <strnlen_P>
    2af6:	2c 01       	movw	r4, r24
    2af8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2afa:	20 68       	ori	r18, 0x80	; 128
    2afc:	22 2e       	mov	r2, r18
    2afe:	83 01       	movw	r16, r6
    2b00:	23 fc       	sbrc	r2, 3
    2b02:	1b c0       	rjmp	.+54     	; 0x2b3a <vfprintf+0x1d2>
    2b04:	83 2d       	mov	r24, r3
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	48 16       	cp	r4, r24
    2b0a:	59 06       	cpc	r5, r25
    2b0c:	b0 f4       	brcc	.+44     	; 0x2b3a <vfprintf+0x1d2>
    2b0e:	b7 01       	movw	r22, r14
    2b10:	80 e2       	ldi	r24, 0x20	; 32
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2b18:	3a 94       	dec	r3
    2b1a:	f4 cf       	rjmp	.-24     	; 0x2b04 <vfprintf+0x19c>
    2b1c:	f5 01       	movw	r30, r10
    2b1e:	27 fc       	sbrc	r2, 7
    2b20:	85 91       	lpm	r24, Z+
    2b22:	27 fe       	sbrs	r2, 7
    2b24:	81 91       	ld	r24, Z+
    2b26:	5f 01       	movw	r10, r30
    2b28:	b7 01       	movw	r22, r14
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2b30:	31 10       	cpse	r3, r1
    2b32:	3a 94       	dec	r3
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	4f 1a       	sub	r4, r31
    2b38:	51 08       	sbc	r5, r1
    2b3a:	41 14       	cp	r4, r1
    2b3c:	51 04       	cpc	r5, r1
    2b3e:	71 f7       	brne	.-36     	; 0x2b1c <vfprintf+0x1b4>
    2b40:	e5 c0       	rjmp	.+458    	; 0x2d0c <vfprintf+0x3a4>
    2b42:	84 36       	cpi	r24, 0x64	; 100
    2b44:	11 f0       	breq	.+4      	; 0x2b4a <vfprintf+0x1e2>
    2b46:	89 36       	cpi	r24, 0x69	; 105
    2b48:	39 f5       	brne	.+78     	; 0x2b98 <vfprintf+0x230>
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	27 ff       	sbrs	r18, 7
    2b4e:	07 c0       	rjmp	.+14     	; 0x2b5e <vfprintf+0x1f6>
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	93 81       	ldd	r25, Z+3	; 0x03
    2b58:	0c 5f       	subi	r16, 0xFC	; 252
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <vfprintf+0x206>
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	88 27       	eor	r24, r24
    2b64:	77 fd       	sbrc	r23, 7
    2b66:	80 95       	com	r24
    2b68:	98 2f       	mov	r25, r24
    2b6a:	0e 5f       	subi	r16, 0xFE	; 254
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6e:	2f 76       	andi	r18, 0x6F	; 111
    2b70:	b2 2e       	mov	r11, r18
    2b72:	97 ff       	sbrs	r25, 7
    2b74:	09 c0       	rjmp	.+18     	; 0x2b88 <vfprintf+0x220>
    2b76:	90 95       	com	r25
    2b78:	80 95       	com	r24
    2b7a:	70 95       	com	r23
    2b7c:	61 95       	neg	r22
    2b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b80:	8f 4f       	sbci	r24, 0xFF	; 255
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	20 68       	ori	r18, 0x80	; 128
    2b86:	b2 2e       	mov	r11, r18
    2b88:	2a e0       	ldi	r18, 0x0A	; 10
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	a4 01       	movw	r20, r8
    2b8e:	0e 94 29 17 	call	0x2e52	; 0x2e52 <__ultoa_invert>
    2b92:	a8 2e       	mov	r10, r24
    2b94:	a8 18       	sub	r10, r8
    2b96:	44 c0       	rjmp	.+136    	; 0x2c20 <vfprintf+0x2b8>
    2b98:	85 37       	cpi	r24, 0x75	; 117
    2b9a:	29 f4       	brne	.+10     	; 0x2ba6 <vfprintf+0x23e>
    2b9c:	2f 7e       	andi	r18, 0xEF	; 239
    2b9e:	b2 2e       	mov	r11, r18
    2ba0:	2a e0       	ldi	r18, 0x0A	; 10
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	25 c0       	rjmp	.+74     	; 0x2bf0 <vfprintf+0x288>
    2ba6:	f2 2f       	mov	r31, r18
    2ba8:	f9 7f       	andi	r31, 0xF9	; 249
    2baa:	bf 2e       	mov	r11, r31
    2bac:	8f 36       	cpi	r24, 0x6F	; 111
    2bae:	c1 f0       	breq	.+48     	; 0x2be0 <vfprintf+0x278>
    2bb0:	18 f4       	brcc	.+6      	; 0x2bb8 <vfprintf+0x250>
    2bb2:	88 35       	cpi	r24, 0x58	; 88
    2bb4:	79 f0       	breq	.+30     	; 0x2bd4 <vfprintf+0x26c>
    2bb6:	b4 c0       	rjmp	.+360    	; 0x2d20 <vfprintf+0x3b8>
    2bb8:	80 37       	cpi	r24, 0x70	; 112
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <vfprintf+0x25a>
    2bbc:	88 37       	cpi	r24, 0x78	; 120
    2bbe:	21 f0       	breq	.+8      	; 0x2bc8 <vfprintf+0x260>
    2bc0:	af c0       	rjmp	.+350    	; 0x2d20 <vfprintf+0x3b8>
    2bc2:	2f 2f       	mov	r18, r31
    2bc4:	20 61       	ori	r18, 0x10	; 16
    2bc6:	b2 2e       	mov	r11, r18
    2bc8:	b4 fe       	sbrs	r11, 4
    2bca:	0d c0       	rjmp	.+26     	; 0x2be6 <vfprintf+0x27e>
    2bcc:	8b 2d       	mov	r24, r11
    2bce:	84 60       	ori	r24, 0x04	; 4
    2bd0:	b8 2e       	mov	r11, r24
    2bd2:	09 c0       	rjmp	.+18     	; 0x2be6 <vfprintf+0x27e>
    2bd4:	24 ff       	sbrs	r18, 4
    2bd6:	0a c0       	rjmp	.+20     	; 0x2bec <vfprintf+0x284>
    2bd8:	9f 2f       	mov	r25, r31
    2bda:	96 60       	ori	r25, 0x06	; 6
    2bdc:	b9 2e       	mov	r11, r25
    2bde:	06 c0       	rjmp	.+12     	; 0x2bec <vfprintf+0x284>
    2be0:	28 e0       	ldi	r18, 0x08	; 8
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <vfprintf+0x288>
    2be6:	20 e1       	ldi	r18, 0x10	; 16
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <vfprintf+0x288>
    2bec:	20 e1       	ldi	r18, 0x10	; 16
    2bee:	32 e0       	ldi	r19, 0x02	; 2
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	b7 fe       	sbrs	r11, 7
    2bf4:	07 c0       	rjmp	.+14     	; 0x2c04 <vfprintf+0x29c>
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	0c 5f       	subi	r16, 0xFC	; 252
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	06 c0       	rjmp	.+12     	; 0x2c10 <vfprintf+0x2a8>
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 5f       	subi	r16, 0xFE	; 254
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	a4 01       	movw	r20, r8
    2c12:	0e 94 29 17 	call	0x2e52	; 0x2e52 <__ultoa_invert>
    2c16:	a8 2e       	mov	r10, r24
    2c18:	a8 18       	sub	r10, r8
    2c1a:	fb 2d       	mov	r31, r11
    2c1c:	ff 77       	andi	r31, 0x7F	; 127
    2c1e:	bf 2e       	mov	r11, r31
    2c20:	b6 fe       	sbrs	r11, 6
    2c22:	0b c0       	rjmp	.+22     	; 0x2c3a <vfprintf+0x2d2>
    2c24:	2b 2d       	mov	r18, r11
    2c26:	2e 7f       	andi	r18, 0xFE	; 254
    2c28:	a5 14       	cp	r10, r5
    2c2a:	50 f4       	brcc	.+20     	; 0x2c40 <vfprintf+0x2d8>
    2c2c:	b4 fe       	sbrs	r11, 4
    2c2e:	0a c0       	rjmp	.+20     	; 0x2c44 <vfprintf+0x2dc>
    2c30:	b2 fc       	sbrc	r11, 2
    2c32:	08 c0       	rjmp	.+16     	; 0x2c44 <vfprintf+0x2dc>
    2c34:	2b 2d       	mov	r18, r11
    2c36:	2e 7e       	andi	r18, 0xEE	; 238
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <vfprintf+0x2dc>
    2c3a:	7a 2c       	mov	r7, r10
    2c3c:	2b 2d       	mov	r18, r11
    2c3e:	03 c0       	rjmp	.+6      	; 0x2c46 <vfprintf+0x2de>
    2c40:	7a 2c       	mov	r7, r10
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <vfprintf+0x2de>
    2c44:	75 2c       	mov	r7, r5
    2c46:	24 ff       	sbrs	r18, 4
    2c48:	0d c0       	rjmp	.+26     	; 0x2c64 <vfprintf+0x2fc>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ea 0d       	add	r30, r10
    2c4e:	f1 1d       	adc	r31, r1
    2c50:	80 81       	ld	r24, Z
    2c52:	80 33       	cpi	r24, 0x30	; 48
    2c54:	11 f4       	brne	.+4      	; 0x2c5a <vfprintf+0x2f2>
    2c56:	29 7e       	andi	r18, 0xE9	; 233
    2c58:	09 c0       	rjmp	.+18     	; 0x2c6c <vfprintf+0x304>
    2c5a:	22 ff       	sbrs	r18, 2
    2c5c:	06 c0       	rjmp	.+12     	; 0x2c6a <vfprintf+0x302>
    2c5e:	73 94       	inc	r7
    2c60:	73 94       	inc	r7
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <vfprintf+0x304>
    2c64:	82 2f       	mov	r24, r18
    2c66:	86 78       	andi	r24, 0x86	; 134
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <vfprintf+0x304>
    2c6a:	73 94       	inc	r7
    2c6c:	23 fd       	sbrc	r18, 3
    2c6e:	13 c0       	rjmp	.+38     	; 0x2c96 <vfprintf+0x32e>
    2c70:	20 ff       	sbrs	r18, 0
    2c72:	06 c0       	rjmp	.+12     	; 0x2c80 <vfprintf+0x318>
    2c74:	5a 2c       	mov	r5, r10
    2c76:	73 14       	cp	r7, r3
    2c78:	18 f4       	brcc	.+6      	; 0x2c80 <vfprintf+0x318>
    2c7a:	53 0c       	add	r5, r3
    2c7c:	57 18       	sub	r5, r7
    2c7e:	73 2c       	mov	r7, r3
    2c80:	73 14       	cp	r7, r3
    2c82:	68 f4       	brcc	.+26     	; 0x2c9e <vfprintf+0x336>
    2c84:	b7 01       	movw	r22, r14
    2c86:	80 e2       	ldi	r24, 0x20	; 32
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	2c 87       	std	Y+12, r18	; 0x0c
    2c8c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2c90:	73 94       	inc	r7
    2c92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c94:	f5 cf       	rjmp	.-22     	; 0x2c80 <vfprintf+0x318>
    2c96:	73 14       	cp	r7, r3
    2c98:	10 f4       	brcc	.+4      	; 0x2c9e <vfprintf+0x336>
    2c9a:	37 18       	sub	r3, r7
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <vfprintf+0x338>
    2c9e:	31 2c       	mov	r3, r1
    2ca0:	24 ff       	sbrs	r18, 4
    2ca2:	12 c0       	rjmp	.+36     	; 0x2cc8 <vfprintf+0x360>
    2ca4:	b7 01       	movw	r22, r14
    2ca6:	80 e3       	ldi	r24, 0x30	; 48
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	2c 87       	std	Y+12, r18	; 0x0c
    2cac:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cb2:	22 ff       	sbrs	r18, 2
    2cb4:	17 c0       	rjmp	.+46     	; 0x2ce4 <vfprintf+0x37c>
    2cb6:	21 ff       	sbrs	r18, 1
    2cb8:	03 c0       	rjmp	.+6      	; 0x2cc0 <vfprintf+0x358>
    2cba:	88 e5       	ldi	r24, 0x58	; 88
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <vfprintf+0x35c>
    2cc0:	88 e7       	ldi	r24, 0x78	; 120
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	b7 01       	movw	r22, r14
    2cc6:	0c c0       	rjmp	.+24     	; 0x2ce0 <vfprintf+0x378>
    2cc8:	82 2f       	mov	r24, r18
    2cca:	86 78       	andi	r24, 0x86	; 134
    2ccc:	59 f0       	breq	.+22     	; 0x2ce4 <vfprintf+0x37c>
    2cce:	21 fd       	sbrc	r18, 1
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <vfprintf+0x36e>
    2cd2:	80 e2       	ldi	r24, 0x20	; 32
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <vfprintf+0x370>
    2cd6:	8b e2       	ldi	r24, 0x2B	; 43
    2cd8:	27 fd       	sbrc	r18, 7
    2cda:	8d e2       	ldi	r24, 0x2D	; 45
    2cdc:	b7 01       	movw	r22, r14
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2ce4:	a5 14       	cp	r10, r5
    2ce6:	38 f4       	brcc	.+14     	; 0x2cf6 <vfprintf+0x38e>
    2ce8:	b7 01       	movw	r22, r14
    2cea:	80 e3       	ldi	r24, 0x30	; 48
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2cf2:	5a 94       	dec	r5
    2cf4:	f7 cf       	rjmp	.-18     	; 0x2ce4 <vfprintf+0x37c>
    2cf6:	aa 94       	dec	r10
    2cf8:	f4 01       	movw	r30, r8
    2cfa:	ea 0d       	add	r30, r10
    2cfc:	f1 1d       	adc	r31, r1
    2cfe:	80 81       	ld	r24, Z
    2d00:	b7 01       	movw	r22, r14
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2d08:	a1 10       	cpse	r10, r1
    2d0a:	f5 cf       	rjmp	.-22     	; 0x2cf6 <vfprintf+0x38e>
    2d0c:	33 20       	and	r3, r3
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <vfprintf+0x3aa>
    2d10:	51 ce       	rjmp	.-862    	; 0x29b4 <vfprintf+0x4c>
    2d12:	b7 01       	movw	r22, r14
    2d14:	80 e2       	ldi	r24, 0x20	; 32
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 f7 16 	call	0x2dee	; 0x2dee <fputc>
    2d1c:	3a 94       	dec	r3
    2d1e:	f6 cf       	rjmp	.-20     	; 0x2d0c <vfprintf+0x3a4>
    2d20:	f7 01       	movw	r30, r14
    2d22:	86 81       	ldd	r24, Z+6	; 0x06
    2d24:	97 81       	ldd	r25, Z+7	; 0x07
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <vfprintf+0x3c4>
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	9f ef       	ldi	r25, 0xFF	; 255
    2d2c:	2c 96       	adiw	r28, 0x0c	; 12
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	df 90       	pop	r13
    2d46:	cf 90       	pop	r12
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	7f 90       	pop	r7
    2d52:	6f 90       	pop	r6
    2d54:	5f 90       	pop	r5
    2d56:	4f 90       	pop	r4
    2d58:	3f 90       	pop	r3
    2d5a:	2f 90       	pop	r2
    2d5c:	08 95       	ret

00002d5e <__eerd_byte_m1284p>:
    2d5e:	f9 99       	sbic	0x1f, 1	; 31
    2d60:	fe cf       	rjmp	.-4      	; 0x2d5e <__eerd_byte_m1284p>
    2d62:	92 bd       	out	0x22, r25	; 34
    2d64:	81 bd       	out	0x21, r24	; 33
    2d66:	f8 9a       	sbi	0x1f, 0	; 31
    2d68:	99 27       	eor	r25, r25
    2d6a:	80 b5       	in	r24, 0x20	; 32
    2d6c:	08 95       	ret

00002d6e <__eewr_byte_m1284p>:
    2d6e:	26 2f       	mov	r18, r22

00002d70 <__eewr_r18_m1284p>:
    2d70:	f9 99       	sbic	0x1f, 1	; 31
    2d72:	fe cf       	rjmp	.-4      	; 0x2d70 <__eewr_r18_m1284p>
    2d74:	1f ba       	out	0x1f, r1	; 31
    2d76:	92 bd       	out	0x22, r25	; 34
    2d78:	81 bd       	out	0x21, r24	; 33
    2d7a:	20 bd       	out	0x20, r18	; 32
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	fa 9a       	sbi	0x1f, 2	; 31
    2d82:	f9 9a       	sbi	0x1f, 1	; 31
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	08 95       	ret

00002d8a <calloc>:
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	86 9f       	mul	r24, r22
    2d94:	80 01       	movw	r16, r0
    2d96:	87 9f       	mul	r24, r23
    2d98:	10 0d       	add	r17, r0
    2d9a:	96 9f       	mul	r25, r22
    2d9c:	10 0d       	add	r17, r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	c8 01       	movw	r24, r16
    2da2:	0e 94 a2 12 	call	0x2544	; 0x2544 <malloc>
    2da6:	ec 01       	movw	r28, r24
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	29 f0       	breq	.+10     	; 0x2db6 <calloc+0x2c>
    2dac:	a8 01       	movw	r20, r16
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	0e 94 df 13 	call	0x27be	; 0x27be <memset>
    2db6:	ce 01       	movw	r24, r28
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	08 95       	ret

00002dc2 <strnlen_P>:
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	05 90       	lpm	r0, Z+
    2dc6:	61 50       	subi	r22, 0x01	; 1
    2dc8:	70 40       	sbci	r23, 0x00	; 0
    2dca:	01 10       	cpse	r0, r1
    2dcc:	d8 f7       	brcc	.-10     	; 0x2dc4 <strnlen_P+0x2>
    2dce:	80 95       	com	r24
    2dd0:	90 95       	com	r25
    2dd2:	8e 0f       	add	r24, r30
    2dd4:	9f 1f       	adc	r25, r31
    2dd6:	08 95       	ret

00002dd8 <strnlen>:
    2dd8:	fc 01       	movw	r30, r24
    2dda:	61 50       	subi	r22, 0x01	; 1
    2ddc:	70 40       	sbci	r23, 0x00	; 0
    2dde:	01 90       	ld	r0, Z+
    2de0:	01 10       	cpse	r0, r1
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <strnlen+0x2>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	8e 0f       	add	r24, r30
    2dea:	9f 1f       	adc	r25, r31
    2dec:	08 95       	ret

00002dee <fputc>:
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	18 2f       	mov	r17, r24
    2df8:	09 2f       	mov	r16, r25
    2dfa:	eb 01       	movw	r28, r22
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	81 fd       	sbrc	r24, 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <fputc+0x1a>
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	20 c0       	rjmp	.+64     	; 0x2e48 <fputc+0x5a>
    2e08:	82 ff       	sbrs	r24, 2
    2e0a:	10 c0       	rjmp	.+32     	; 0x2e2c <fputc+0x3e>
    2e0c:	4e 81       	ldd	r20, Y+6	; 0x06
    2e0e:	5f 81       	ldd	r21, Y+7	; 0x07
    2e10:	2c 81       	ldd	r18, Y+4	; 0x04
    2e12:	3d 81       	ldd	r19, Y+5	; 0x05
    2e14:	42 17       	cp	r20, r18
    2e16:	53 07       	cpc	r21, r19
    2e18:	7c f4       	brge	.+30     	; 0x2e38 <fputc+0x4a>
    2e1a:	e8 81       	ld	r30, Y
    2e1c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e1e:	9f 01       	movw	r18, r30
    2e20:	2f 5f       	subi	r18, 0xFF	; 255
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	39 83       	std	Y+1, r19	; 0x01
    2e26:	28 83       	st	Y, r18
    2e28:	10 83       	st	Z, r17
    2e2a:	06 c0       	rjmp	.+12     	; 0x2e38 <fputc+0x4a>
    2e2c:	e8 85       	ldd	r30, Y+8	; 0x08
    2e2e:	f9 85       	ldd	r31, Y+9	; 0x09
    2e30:	81 2f       	mov	r24, r17
    2e32:	09 95       	icall
    2e34:	89 2b       	or	r24, r25
    2e36:	29 f7       	brne	.-54     	; 0x2e02 <fputc+0x14>
    2e38:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e3c:	2f 5f       	subi	r18, 0xFF	; 255
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	3f 83       	std	Y+7, r19	; 0x07
    2e42:	2e 83       	std	Y+6, r18	; 0x06
    2e44:	81 2f       	mov	r24, r17
    2e46:	90 2f       	mov	r25, r16
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <__ultoa_invert>:
    2e52:	fa 01       	movw	r30, r20
    2e54:	aa 27       	eor	r26, r26
    2e56:	28 30       	cpi	r18, 0x08	; 8
    2e58:	51 f1       	breq	.+84     	; 0x2eae <__ultoa_invert+0x5c>
    2e5a:	20 31       	cpi	r18, 0x10	; 16
    2e5c:	81 f1       	breq	.+96     	; 0x2ebe <__ultoa_invert+0x6c>
    2e5e:	e8 94       	clt
    2e60:	6f 93       	push	r22
    2e62:	6e 7f       	andi	r22, 0xFE	; 254
    2e64:	6e 5f       	subi	r22, 0xFE	; 254
    2e66:	7f 4f       	sbci	r23, 0xFF	; 255
    2e68:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	af 4f       	sbci	r26, 0xFF	; 255
    2e6e:	b1 e0       	ldi	r27, 0x01	; 1
    2e70:	3e d0       	rcall	.+124    	; 0x2eee <__ultoa_invert+0x9c>
    2e72:	b4 e0       	ldi	r27, 0x04	; 4
    2e74:	3c d0       	rcall	.+120    	; 0x2eee <__ultoa_invert+0x9c>
    2e76:	67 0f       	add	r22, r23
    2e78:	78 1f       	adc	r23, r24
    2e7a:	89 1f       	adc	r24, r25
    2e7c:	9a 1f       	adc	r25, r26
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	68 0f       	add	r22, r24
    2e82:	79 1f       	adc	r23, r25
    2e84:	8a 1f       	adc	r24, r26
    2e86:	91 1d       	adc	r25, r1
    2e88:	a1 1d       	adc	r26, r1
    2e8a:	6a 0f       	add	r22, r26
    2e8c:	71 1d       	adc	r23, r1
    2e8e:	81 1d       	adc	r24, r1
    2e90:	91 1d       	adc	r25, r1
    2e92:	a1 1d       	adc	r26, r1
    2e94:	20 d0       	rcall	.+64     	; 0x2ed6 <__ultoa_invert+0x84>
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <__ultoa_invert+0x48>
    2e98:	68 94       	set
    2e9a:	3f 91       	pop	r19
    2e9c:	2a e0       	ldi	r18, 0x0A	; 10
    2e9e:	26 9f       	mul	r18, r22
    2ea0:	11 24       	eor	r1, r1
    2ea2:	30 19       	sub	r19, r0
    2ea4:	30 5d       	subi	r19, 0xD0	; 208
    2ea6:	31 93       	st	Z+, r19
    2ea8:	de f6       	brtc	.-74     	; 0x2e60 <__ultoa_invert+0xe>
    2eaa:	cf 01       	movw	r24, r30
    2eac:	08 95       	ret
    2eae:	46 2f       	mov	r20, r22
    2eb0:	47 70       	andi	r20, 0x07	; 7
    2eb2:	40 5d       	subi	r20, 0xD0	; 208
    2eb4:	41 93       	st	Z+, r20
    2eb6:	b3 e0       	ldi	r27, 0x03	; 3
    2eb8:	0f d0       	rcall	.+30     	; 0x2ed8 <__ultoa_invert+0x86>
    2eba:	c9 f7       	brne	.-14     	; 0x2eae <__ultoa_invert+0x5c>
    2ebc:	f6 cf       	rjmp	.-20     	; 0x2eaa <__ultoa_invert+0x58>
    2ebe:	46 2f       	mov	r20, r22
    2ec0:	4f 70       	andi	r20, 0x0F	; 15
    2ec2:	40 5d       	subi	r20, 0xD0	; 208
    2ec4:	4a 33       	cpi	r20, 0x3A	; 58
    2ec6:	18 f0       	brcs	.+6      	; 0x2ece <__ultoa_invert+0x7c>
    2ec8:	49 5d       	subi	r20, 0xD9	; 217
    2eca:	31 fd       	sbrc	r19, 1
    2ecc:	40 52       	subi	r20, 0x20	; 32
    2ece:	41 93       	st	Z+, r20
    2ed0:	02 d0       	rcall	.+4      	; 0x2ed6 <__ultoa_invert+0x84>
    2ed2:	a9 f7       	brne	.-22     	; 0x2ebe <__ultoa_invert+0x6c>
    2ed4:	ea cf       	rjmp	.-44     	; 0x2eaa <__ultoa_invert+0x58>
    2ed6:	b4 e0       	ldi	r27, 0x04	; 4
    2ed8:	a6 95       	lsr	r26
    2eda:	97 95       	ror	r25
    2edc:	87 95       	ror	r24
    2ede:	77 95       	ror	r23
    2ee0:	67 95       	ror	r22
    2ee2:	ba 95       	dec	r27
    2ee4:	c9 f7       	brne	.-14     	; 0x2ed8 <__ultoa_invert+0x86>
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	61 05       	cpc	r22, r1
    2eea:	71 05       	cpc	r23, r1
    2eec:	08 95       	ret
    2eee:	9b 01       	movw	r18, r22
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	0a 2e       	mov	r0, r26
    2ef4:	06 94       	lsr	r0
    2ef6:	57 95       	ror	r21
    2ef8:	47 95       	ror	r20
    2efa:	37 95       	ror	r19
    2efc:	27 95       	ror	r18
    2efe:	ba 95       	dec	r27
    2f00:	c9 f7       	brne	.-14     	; 0x2ef4 <__ultoa_invert+0xa2>
    2f02:	62 0f       	add	r22, r18
    2f04:	73 1f       	adc	r23, r19
    2f06:	84 1f       	adc	r24, r20
    2f08:	95 1f       	adc	r25, r21
    2f0a:	a0 1d       	adc	r26, r0
    2f0c:	08 95       	ret

00002f0e <_exit>:
    2f0e:	f8 94       	cli

00002f10 <__stop_program>:
    2f10:	ff cf       	rjmp	.-2      	; 0x2f10 <__stop_program>
