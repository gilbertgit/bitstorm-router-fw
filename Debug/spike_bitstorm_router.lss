
spike_bitstorm_router.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002000  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000adc  00800128  00800128  000020bc  2**0
                  ALLOC
  3 .stab         00005e80  00000000  00000000  000020bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003e04  00000000  00000000  00007f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000bd40  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  0000bd58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fc  00000000  00000000  0000bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000050  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000172  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_16>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_20>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      70:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_28>
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      80:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      84:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000008c <BTLE_hex>:
      8c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000009d <__c.2256>:
      9d:	72 73 73 69 3d 25 64 20 62 61 74 74 3d 25 64 20     rssi=%d batt=%d 
      ad:	74 65 6d 70 3d 25 64 20 6d 61 63 3d 25 64 20 0d     temp=%d mac=%d .
      bd:	0a 00 00                                            ...

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e4       	ldi	r29, 0x40	; 64
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 e0       	ldi	r30, 0x00	; 0
      d4:	f0 e2       	ldi	r31, 0x20	; 32
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	2c e0       	ldi	r18, 0x0C	; 12
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 30       	cpi	r26, 0x04	; 4
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <main>
      fa:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <wan_init>:
	CONFIGURE, WAIT_FOR_DATA, WAIT_FOR_NWK_BUSY, WAIT_FOR_NWK_READY
};
static uint8_t state = CONFIGURE;

void wan_init() {
	wan_usart_init();
     102:	0e 94 86 04 	call	0x90c	; 0x90c <wan_usart_init>

	wan_driver_init();
     106:	0e 94 06 03 	call	0x60c	; 0x60c <wan_driver_init>
     10a:	08 95       	ret

0000010c <wan_set_cts>:
}

void wan_set_cts() {
	//pd0 low
	PORTD &= ~_BV(PD0);
     10c:	58 98       	cbi	0x0b, 0	; 11
     10e:	08 95       	ret

00000110 <wan_get_rts>:
}

uint8_t wan_get_rts() {
	// return logic high or low
	return (PIND & _BV(PD1));
     110:	89 b1       	in	r24, 0x09	; 9
}
     112:	82 70       	andi	r24, 0x02	; 2
     114:	08 95       	ret

00000116 <wan_reset_frame>:

void wan_reset_frame(void) {
	frame_ready = false;
     116:	10 92 81 01 	sts	0x0181, r1
	frame_index = 0;
     11a:	10 92 30 01 	sts	0x0130, r1
     11e:	10 92 2f 01 	sts	0x012F, r1
     122:	08 95       	ret

00000124 <wan_state_configure>:
}

void wan_state_configure(void) {
	if (wan_config_tick()) {
     124:	0e 94 ed 02 	call	0x5da	; 0x5da <wan_config_tick>
     128:	88 23       	and	r24, r24
     12a:	21 f0       	breq	.+8      	; 0x134 <wan_state_configure+0x10>
		state = WAIT_FOR_DATA;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 28 01 	sts	0x0128, r24
     132:	08 95       	ret
	} else if (frame_ready) {
     134:	80 91 81 01 	lds	r24, 0x0181
     138:	88 23       	and	r24, r24
     13a:	59 f0       	breq	.+22     	; 0x152 <wan_state_configure+0x2e>
		if (wan_config_received(frame_buff)) {
     13c:	81 e3       	ldi	r24, 0x31	; 49
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 cf 02 	call	0x59e	; 0x59e <wan_config_received>
     144:	88 23       	and	r24, r24
     146:	19 f0       	breq	.+6      	; 0x14e <wan_state_configure+0x2a>
			state = WAIT_FOR_DATA;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 28 01 	sts	0x0128, r24
		}
		wan_reset_frame();
     14e:	0e 94 8b 00 	call	0x116	; 0x116 <wan_reset_frame>
     152:	08 95       	ret

00000154 <frame_tick>:
			LED_ON
		}
	}
}

void frame_tick() {
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
		frame_buff[frame_index] = wan_usart_data_read();
		if (frame_index == 0) {
			frame_length = frame_buff[frame_index];
     15c:	01 e3       	ldi	r16, 0x31	; 49
     15e:	11 e0       	ldi	r17, 0x01	; 1
	}
}

void frame_tick() {
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
     160:	2e c0       	rjmp	.+92     	; 0x1be <frame_tick+0x6a>
		frame_buff[frame_index] = wan_usart_data_read();
     162:	c0 91 2f 01 	lds	r28, 0x012F
     166:	d0 91 30 01 	lds	r29, 0x0130
     16a:	0e 94 c2 04 	call	0x984	; 0x984 <wan_usart_data_read>
     16e:	cf 5c       	subi	r28, 0xCF	; 207
     170:	de 4f       	sbci	r29, 0xFE	; 254
     172:	88 83       	st	Y, r24
		if (frame_index == 0) {
     174:	80 91 2f 01 	lds	r24, 0x012F
     178:	90 91 30 01 	lds	r25, 0x0130
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	41 f4       	brne	.+16     	; 0x190 <frame_tick+0x3c>
			frame_length = frame_buff[frame_index];
     180:	f8 01       	movw	r30, r16
     182:	20 81       	ld	r18, Z
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	30 93 2e 01 	sts	0x012E, r19
     18a:	20 93 2d 01 	sts	0x012D, r18
     18e:	12 c0       	rjmp	.+36     	; 0x1b4 <frame_tick+0x60>
		} else if (frame_index >= frame_length) {
     190:	20 91 2d 01 	lds	r18, 0x012D
     194:	30 91 2e 01 	lds	r19, 0x012E
     198:	82 17       	cp	r24, r18
     19a:	93 07       	cpc	r25, r19
     19c:	5c f0       	brlt	.+22     	; 0x1b4 <frame_tick+0x60>
			frame_ready = true;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 81 01 	sts	0x0181, r24
			while (wan_usart_data_available())
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <frame_tick+0x56>
				wan_usart_data_read();
     1a6:	0e 94 c2 04 	call	0x984	; 0x984 <wan_usart_data_read>
		frame_buff[frame_index] = wan_usart_data_read();
		if (frame_index == 0) {
			frame_length = frame_buff[frame_index];
		} else if (frame_index >= frame_length) {
			frame_ready = true;
			while (wan_usart_data_available())
     1aa:	0e 94 bc 04 	call	0x978	; 0x978 <wan_usart_data_available>
     1ae:	81 11       	cpse	r24, r1
     1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <frame_tick+0x52>
     1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <frame_tick+0x72>
				wan_usart_data_read();
			break;
		}

		frame_index++;
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 30 01 	sts	0x0130, r25
     1ba:	80 93 2f 01 	sts	0x012F, r24
	}
}

void frame_tick() {
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
     1be:	0e 94 bc 04 	call	0x978	; 0x978 <wan_usart_data_available>
     1c2:	81 11       	cpse	r24, r1
     1c4:	ce cf       	rjmp	.-100    	; 0x162 <frame_tick+0xe>
			break;
		}

		frame_index++;
	}
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <build_app_msg>:
		}
		break;
	}
}

void build_app_msg(btle_msg_t *btle_msg, app_msg_t *msg) {
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	dc 01       	movw	r26, r24
     1d6:	fb 01       	movw	r30, r22

	msg->messageType = 0x01;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 83       	st	Z, r24
	msg->nodeType = 0x01;
     1dc:	81 83       	std	Z+1, r24	; 0x01
	msg->extAddr = btle_msg->mac;
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	7c 91       	ld	r23, X
     1e2:	11 97       	sbiw	r26, 0x01	; 1
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	6c 91       	ld	r22, X
     1e8:	12 97       	sbiw	r26, 0x02	; 2
     1ea:	13 96       	adiw	r26, 0x03	; 3
     1ec:	5c 91       	ld	r21, X
     1ee:	13 97       	sbiw	r26, 0x03	; 3
     1f0:	14 96       	adiw	r26, 0x04	; 4
     1f2:	4c 91       	ld	r20, X
     1f4:	14 97       	sbiw	r26, 0x04	; 4
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	3c 91       	ld	r19, X
     1fa:	15 97       	sbiw	r26, 0x05	; 5
     1fc:	16 96       	adiw	r26, 0x06	; 6
     1fe:	2c 91       	ld	r18, X
     200:	16 97       	sbiw	r26, 0x06	; 6
     202:	17 96       	adiw	r26, 0x07	; 7
     204:	9c 91       	ld	r25, X
     206:	17 97       	sbiw	r26, 0x07	; 7
     208:	18 96       	adiw	r26, 0x08	; 8
     20a:	8c 91       	ld	r24, X
     20c:	18 97       	sbiw	r26, 0x08	; 8
     20e:	72 83       	std	Z+2, r23	; 0x02
     210:	63 83       	std	Z+3, r22	; 0x03
     212:	54 83       	std	Z+4, r21	; 0x04
     214:	45 83       	std	Z+5, r20	; 0x05
     216:	36 83       	std	Z+6, r19	; 0x06
     218:	27 83       	std	Z+7, r18	; 0x07
     21a:	90 87       	std	Z+8, r25	; 0x08
     21c:	81 87       	std	Z+9, r24	; 0x09
	msg->shortAddr = shared.mac & 0x0000FFFF;
     21e:	90 91 f8 0b 	lds	r25, 0x0BF8
     222:	80 91 f9 0b 	lds	r24, 0x0BF9
     226:	d0 91 fa 0b 	lds	r29, 0x0BFA
     22a:	c0 91 fb 0b 	lds	r28, 0x0BFB
     22e:	70 91 fc 0b 	lds	r23, 0x0BFC
     232:	60 91 fd 0b 	lds	r22, 0x0BFD
     236:	50 91 fe 0b 	lds	r21, 0x0BFE
     23a:	40 91 ff 0b 	lds	r20, 0x0BFF
     23e:	92 87       	std	Z+10, r25	; 0x0a
     240:	83 87       	std	Z+11, r24	; 0x0b
	msg->routerAddr = shared.mac;
     242:	94 87       	std	Z+12, r25	; 0x0c
     244:	85 87       	std	Z+13, r24	; 0x0d
     246:	d6 87       	std	Z+14, r29	; 0x0e
     248:	c7 87       	std	Z+15, r28	; 0x0f
     24a:	70 8b       	std	Z+16, r23	; 0x10
     24c:	61 8b       	std	Z+17, r22	; 0x11
     24e:	52 8b       	std	Z+18, r21	; 0x12
     250:	43 8b       	std	Z+19, r20	; 0x13
	//softVersion;
	//channelMask;
	msg->panId = 0x1973; // need to set pan in zigbit
     252:	83 e7       	ldi	r24, 0x73	; 115
     254:	99 e1       	ldi	r25, 0x19	; 25
     256:	95 8b       	std	Z+21, r25	; 0x15
     258:	84 8b       	std	Z+20, r24	; 0x14
	msg->workingChannel = 0x16;
     25a:	86 e1       	ldi	r24, 0x16	; 22
     25c:	86 8b       	std	Z+22, r24	; 0x16
	msg->parentShortAddr = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 8f       	std	Z+24, r25	; 0x18
     264:	87 8b       	std	Z+23, r24	; 0x17
	msg->lqi = 0;
     266:	11 8e       	std	Z+25, r1	; 0x19

	msg->rssi = btle_msg->rssi;
     268:	8c 91       	ld	r24, X
     26a:	82 8f       	std	Z+26, r24	; 0x1a
	msg->battery = btle_msg->batt;
     26c:	19 96       	adiw	r26, 0x09	; 9
     26e:	4d 91       	ld	r20, X+
     270:	5c 91       	ld	r21, X
     272:	1a 97       	sbiw	r26, 0x0a	; 10
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	44 8f       	std	Z+28, r20	; 0x1c
     27a:	55 8f       	std	Z+29, r21	; 0x1d
     27c:	66 8f       	std	Z+30, r22	; 0x1e
     27e:	77 8f       	std	Z+31, r23	; 0x1f
	msg->temperature = btle_msg->temp;
     280:	1b 96       	adiw	r26, 0x0b	; 11
     282:	8d 91       	ld	r24, X+
     284:	9c 91       	ld	r25, X
     286:	1c 97       	sbiw	r26, 0x0c	; 12
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	80 a3       	std	Z+32, r24	; 0x20
     28e:	91 a3       	std	Z+33, r25	; 0x21
     290:	a2 a3       	std	Z+34, r26	; 0x22
     292:	b3 a3       	std	Z+35, r27	; 0x23
	//msg->cs = 0;
	//for (int i = 0; i < sizeof(app_msg_t) - 1; msg->cs ^= ((uint8_t*) msg)[i++])
	//	;

	// ACTUALLY, don't calculate the CS, let the frame cs do the trick
	msg->cs = 0xCC;
     294:	8c ec       	ldi	r24, 0xCC	; 204
     296:	84 a3       	std	Z+36, r24	; 0x24
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <wan_state_wait_for_data>:
		}
		wan_reset_frame();
	}
}

void wan_state_wait_for_data(void) {
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	cf 58       	subi	r28, 0x8F	; 143
     2b0:	d1 09       	sbc	r29, r1
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
	// check if we have data to send
	if (circular_queue_data_available()) {
     2bc:	0e 94 18 07 	call	0xe30	; 0xe30 <circular_queue_data_available>
     2c0:	88 23       	and	r24, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <wan_state_wait_for_data+0x28>
     2c4:	8d c0       	rjmp	.+282    	; 0x3e0 <wan_state_wait_for_data+0x142>
		// check to see if we can send (network not busy)
		if (NWK_READY) {
     2c6:	18 9b       	sbis	0x03, 0	; 3
     2c8:	8b c0       	rjmp	.+278    	; 0x3e0 <wan_state_wait_for_data+0x142>
     2ca:	8e 01       	movw	r16, r28
     2cc:	0a 58       	subi	r16, 0x8A	; 138
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	78 01       	movw	r14, r16
     2d2:	85 e1       	ldi	r24, 0x15	; 21
     2d4:	e8 0e       	add	r14, r24
     2d6:	f1 1c       	adc	r15, r1

			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++) {
				temp[i] = circular_queue_data_read();
     2d8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <circular_queue_data_read>
     2dc:	f8 01       	movw	r30, r16
     2de:	81 93       	st	Z+, r24
     2e0:	8f 01       	movw	r16, r30
		// check to see if we can send (network not busy)
		if (NWK_READY) {

			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++) {
     2e2:	ee 15       	cp	r30, r14
     2e4:	ff 05       	cpc	r31, r15
     2e6:	c1 f7       	brne	.-16     	; 0x2d8 <wan_state_wait_for_data+0x3a>

			app_msg_t app_msg;
			cmd_send_header_t cmd_header;
			uint8_t frame[80];

			build_app_msg(msg, &app_msg);
     2e8:	be 01       	movw	r22, r28
     2ea:	6f 5a       	subi	r22, 0xAF	; 175
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	ce 01       	movw	r24, r28
     2f0:	8a 58       	subi	r24, 0x8A	; 138
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <build_app_msg>

			frame[0] = sizeof(cmd_header) + sizeof(app_msg) + 1;
     2f8:	8b e2       	ldi	r24, 0x2B	; 43
     2fa:	89 83       	std	Y+1, r24	; 0x01

			if (msg->type == MSG_TYPE_IN_PROX)
     2fc:	c6 57       	subi	r28, 0x76	; 118
     2fe:	df 4f       	sbci	r29, 0xFF	; 255
     300:	88 81       	ld	r24, Y
     302:	ca 58       	subi	r28, 0x8A	; 138
     304:	d0 40       	sbci	r29, 0x00	; 0
     306:	85 30       	cpi	r24, 0x05	; 5
     308:	21 f4       	brne	.+8      	; 0x312 <wan_state_wait_for_data+0x74>
				app_msg.messageType = CMD_IN_PROX;
     30a:	62 96       	adiw	r28, 0x12	; 18
     30c:	8f af       	std	Y+63, r24	; 0x3f
     30e:	62 97       	sbiw	r28, 0x12	; 18
     310:	47 c0       	rjmp	.+142    	; 0x3a0 <wan_state_wait_for_data+0x102>
			else if (msg->type == MSG_TYPE_OUT_PROX)
     312:	86 30       	cpi	r24, 0x06	; 6
     314:	09 f0       	breq	.+2      	; 0x318 <wan_state_wait_for_data+0x7a>
     316:	44 c0       	rjmp	.+136    	; 0x3a0 <wan_state_wait_for_data+0x102>
				app_msg.messageType = CMD_OUT_PROX;
     318:	62 96       	adiw	r28, 0x12	; 18
     31a:	8f af       	std	Y+63, r24	; 0x3f
     31c:	62 97       	sbiw	r28, 0x12	; 18
     31e:	40 c0       	rjmp	.+128    	; 0x3a0 <wan_state_wait_for_data+0x102>
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     320:	ab e8       	ldi	r26, 0x8B	; 139
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	ac 0f       	add	r26, r28
     326:	bd 1f       	adc	r27, r29
     328:	a2 0f       	add	r26, r18
     32a:	b3 1f       	adc	r27, r19
     32c:	2c 91       	ld	r18, X
     32e:	21 93       	st	Z+, r18
			cmd_header.short_id = 0x0000;
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	9c 01       	movw	r18, r24
     334:	85 30       	cpi	r24, 0x05	; 5
     336:	91 05       	cpc	r25, r1
     338:	99 f7       	brne	.-26     	; 0x320 <wan_state_wait_for_data+0x82>
     33a:	fe 01       	movw	r30, r28
     33c:	37 96       	adiw	r30, 0x07	; 7
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
			cmd_header.short_id = 0x0000;
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
				frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
     346:	a1 e5       	ldi	r26, 0x51	; 81
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	ac 0f       	add	r26, r28
     34c:	bd 1f       	adc	r27, r29
     34e:	a2 0f       	add	r26, r18
     350:	b3 1f       	adc	r27, r19
     352:	2c 91       	ld	r18, X
     354:	21 93       	st	Z+, r18
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	9c 01       	movw	r18, r24
     35a:	85 32       	cpi	r24, 0x25	; 37
     35c:	91 05       	cpc	r25, r1
     35e:	99 f7       	brne	.-26     	; 0x346 <wan_state_wait_for_data+0xa8>
     360:	fe 01       	movw	r30, r28
     362:	31 96       	adiw	r30, 0x01	; 1
     364:	ce 01       	movw	r24, r28
     366:	8c 96       	adiw	r24, 0x2c	; 44
     368:	20 e0       	ldi	r18, 0x00	; 0
				frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
			}
			// checksum
			uint8_t cs = 0;
			for (int i = 0; i < frame_index; cs ^= frame[i++]);
     36a:	31 91       	ld	r19, Z+
     36c:	23 27       	eor	r18, r19
     36e:	e8 17       	cp	r30, r24
     370:	f9 07       	cpc	r31, r25
     372:	d9 f7       	brne	.-10     	; 0x36a <wan_state_wait_for_data+0xcc>
			frame[frame_index++] = cs;
     374:	2c a7       	std	Y+44, r18	; 0x2c

			// push out the lw-mesh radio
			wan_usart_transmit_bytes((char*) frame, frame_index);
     376:	6c e2       	ldi	r22, 0x2C	; 44
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <wan_usart_transmit_bytes>

			state = WAIT_FOR_NWK_BUSY;
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	80 93 28 01 	sts	0x0128, r24
			prev_millis = clock_time();
     388:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
     38c:	60 93 29 01 	sts	0x0129, r22
     390:	70 93 2a 01 	sts	0x012A, r23
     394:	80 93 2b 01 	sts	0x012B, r24
     398:	90 93 2c 01 	sts	0x012C, r25
			LED_ON
     39c:	5f 98       	cbi	0x0b, 7	; 11
     39e:	20 c0       	rjmp	.+64     	; 0x3e0 <wan_state_wait_for_data+0x142>
				app_msg.messageType = CMD_OUT_PROX;

#ifdef ZB_ACK
			cmd_header.command = CMD_ACK_SEND;
#else
			cmd_header.command = CMD_SEND;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	c5 57       	subi	r28, 0x75	; 117
     3a4:	df 4f       	sbci	r29, 0xFF	; 255
     3a6:	88 83       	st	Y, r24
     3a8:	cb 58       	subi	r28, 0x8B	; 139
     3aa:	d0 40       	sbci	r29, 0x00	; 0
#endif
			cmd_header.pan_id = 0x1973;
     3ac:	83 e7       	ldi	r24, 0x73	; 115
     3ae:	99 e1       	ldi	r25, 0x19	; 25
     3b0:	c4 57       	subi	r28, 0x74	; 116
     3b2:	df 4f       	sbci	r29, 0xFF	; 255
     3b4:	99 83       	std	Y+1, r25	; 0x01
     3b6:	88 83       	st	Y, r24
     3b8:	cc 58       	subi	r28, 0x8C	; 140
     3ba:	d0 40       	sbci	r29, 0x00	; 0
			cmd_header.short_id = 0x0000;
     3bc:	c2 57       	subi	r28, 0x72	; 114
     3be:	df 4f       	sbci	r29, 0xFF	; 255
     3c0:	18 82       	st	Y, r1
     3c2:	ce 58       	subi	r28, 0x8E	; 142
     3c4:	d0 40       	sbci	r29, 0x00	; 0
			cmd_header.message_length = sizeof(app_msg);
     3c6:	85 e2       	ldi	r24, 0x25	; 37
     3c8:	c1 57       	subi	r28, 0x71	; 113
     3ca:	df 4f       	sbci	r29, 0xFF	; 255
     3cc:	88 83       	st	Y, r24
     3ce:	cf 58       	subi	r28, 0x8F	; 143
     3d0:	d0 40       	sbci	r29, 0x00	; 0
     3d2:	fe 01       	movw	r30, r28
     3d4:	32 96       	adiw	r30, 0x02	; 2

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	a0 cf       	rjmp	.-192    	; 0x320 <wan_state_wait_for_data+0x82>
			state = WAIT_FOR_NWK_BUSY;
			prev_millis = clock_time();
			LED_ON
		}
	}
}
     3e0:	c1 57       	subi	r28, 0x71	; 113
     3e2:	df 4f       	sbci	r29, 0xFF	; 255
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <wan_tick>:

		frame_index++;
	}
}

void wan_tick() {
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17

	clock_time_t elapsed;

	frame_tick();
     400:	0e 94 aa 00 	call	0x154	; 0x154 <frame_tick>

	switch (state) {
     404:	80 91 28 01 	lds	r24, 0x0128
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	49 f0       	breq	.+18     	; 0x41e <wan_tick+0x22>
     40c:	28 f0       	brcs	.+10     	; 0x418 <wan_tick+0x1c>
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	49 f0       	breq	.+18     	; 0x424 <wan_tick+0x28>
     412:	83 30       	cpi	r24, 0x03	; 3
     414:	b1 f0       	breq	.+44     	; 0x442 <wan_tick+0x46>
     416:	35 c0       	rjmp	.+106    	; 0x482 <wan_tick+0x86>
	case CONFIGURE:
		wan_state_configure();
     418:	0e 94 92 00 	call	0x124	; 0x124 <wan_state_configure>
		break;
     41c:	32 c0       	rjmp	.+100    	; 0x482 <wan_tick+0x86>
	case WAIT_FOR_DATA:
		wan_state_wait_for_data();
     41e:	0e 94 4f 01 	call	0x29e	; 0x29e <wan_state_wait_for_data>
		break;
     422:	2f c0       	rjmp	.+94     	; 0x482 <wan_tick+0x86>
	case WAIT_FOR_NWK_BUSY:
		if (NWK_BUSY) {
     424:	83 b1       	in	r24, 0x03	; 3
			state = WAIT_FOR_NWK_READY;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 93 28 01 	sts	0x0128, r24
			prev_millis = clock_time();
     42c:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
     430:	60 93 29 01 	sts	0x0129, r22
     434:	70 93 2a 01 	sts	0x012A, r23
     438:	80 93 2b 01 	sts	0x012B, r24
     43c:	90 93 2c 01 	sts	0x012C, r25
     440:	20 c0       	rjmp	.+64     	; 0x482 <wan_tick+0x86>
				prev_millis = clock_time();
			}
		}
		break;
	case WAIT_FOR_NWK_READY:
		if (NWK_READY) {
     442:	18 9b       	sbis	0x03, 0	; 3
     444:	05 c0       	rjmp	.+10     	; 0x450 <wan_tick+0x54>
			state = WAIT_FOR_DATA;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 28 01 	sts	0x0128, r24
			LED_OFF
     44c:	5f 9a       	sbi	0x0b, 7	; 11
     44e:	19 c0       	rjmp	.+50     	; 0x482 <wan_tick+0x86>
		} else {
			// Don't wait forever - although, if it never goes to READY, there's not much we can do...
			elapsed = clock_time() - prev_millis;
     450:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
     454:	00 91 29 01 	lds	r16, 0x0129
     458:	10 91 2a 01 	lds	r17, 0x012A
     45c:	20 91 2b 01 	lds	r18, 0x012B
     460:	30 91 2c 01 	lds	r19, 0x012C
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	80 1b       	sub	r24, r16
     46a:	91 0b       	sbc	r25, r17
     46c:	a2 0b       	sbc	r26, r18
     46e:	b3 0b       	sbc	r27, r19
			if (elapsed >= WAN_NWK_READY_TIMEOUT) {
     470:	80 3a       	cpi	r24, 0xA0	; 160
     472:	9f 40       	sbci	r25, 0x0F	; 15
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	20 f0       	brcs	.+8      	; 0x482 <wan_tick+0x86>
				state = WAIT_FOR_DATA;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 28 01 	sts	0x0128, r24
				LED_OFF
     480:	5f 9a       	sbi	0x0b, 7	; 11
			}
		}
		break;
	}
}
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <wan_enqueue>:
	msg->cs = 0xCC;
}

queue_results_t wan_enqueue(wan_msg_t *msg) {
	//queue_results_t result = queue_enqueue(&wan_queue, &msg, sizeof(wan_msg_t));
	queue_results_t result = queue_enqueue(&wan_queue, msg, sizeof(wan_msg_t));
     488:	4d e0       	ldi	r20, 0x0D	; 13
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	bc 01       	movw	r22, r24
     48e:	82 eb       	ldi	r24, 0xB2	; 178
     490:	99 e0       	ldi	r25, 0x09	; 9
     492:	0e 94 49 07 	call	0xe92	; 0xe92 <queue_enqueue>

	return result;
}
     496:	08 95       	ret

00000498 <wan_get_device_address>:
	SEND_MAC_REQ, CONFIG_NTW_REQ, AWAITING_RESP, FINISHED
};
uint8_t state = SEND_MAC_REQ;

void wan_get_device_address()
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	2a 97       	sbiw	r28, 0x0a	; 10
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
	cmd_header_t cmd_header;
	uint8_t frame[10];
	frame[0] = sizeof(cmd_header) + 1;
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	89 83       	std	Y+1, r24	; 0x01
	cmd_header.command = CMD_GET_ADDRESS;
     4b0:	84 e0       	ldi	r24, 0x04	; 4
	int frame_index = 1;
	// header
	for (int i = 0; i < sizeof(cmd_header); i++)
	{
		frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     4b2:	8a 83       	std	Y+2, r24	; 0x02
	}
	// checksum
	uint8_t cs = 0;
	for (int i = 0; i < frame_index; cs ^= frame[i++]);
     4b4:	86 e0       	ldi	r24, 0x06	; 6
	frame[frame_index++] = cs;
     4b6:	8b 83       	std	Y+3, r24	; 0x03

	wan_usart_transmit_bytes((char*) frame, frame_index);
     4b8:	63 e0       	ldi	r22, 0x03	; 3
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <wan_usart_transmit_bytes>
}
     4c4:	2a 96       	adiw	r28, 0x0a	; 10
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <wan_config_network>:

void wan_config_network()
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	60 97       	sbiw	r28, 0x10	; 16
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	cmd_config_ntw_t config_ntw;

	config_ntw.command = CMD_CONFIG_NETWORK;
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	89 83       	std	Y+1, r24	; 0x01
	config_ntw.pan_id = 0x1973;
     4ee:	83 e7       	ldi	r24, 0x73	; 115
     4f0:	99 e1       	ldi	r25, 0x19	; 25
     4f2:	9b 83       	std	Y+3, r25	; 0x03
     4f4:	8a 83       	std	Y+2, r24	; 0x02
	config_ntw.short_id = shared.mac & 0x0000FFFF;
     4f6:	80 91 f8 0b 	lds	r24, 0x0BF8
     4fa:	90 91 f9 0b 	lds	r25, 0x0BF9
     4fe:	9d 83       	std	Y+5, r25	; 0x05
     500:	8c 83       	std	Y+4, r24	; 0x04
	config_ntw.channel = 0x16;
     502:	86 e1       	ldi	r24, 0x16	; 22
     504:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	8f 83       	std	Y+7, r24	; 0x07
     50a:	fe 01       	movw	r30, r28
     50c:	38 96       	adiw	r30, 0x08	; 8

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
     516:	a1 e0       	ldi	r26, 0x01	; 1
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	ac 0f       	add	r26, r28
     51c:	bd 1f       	adc	r27, r29
     51e:	a2 0f       	add	r26, r18
     520:	b3 1f       	adc	r27, r19
     522:	2c 91       	ld	r18, X
     524:	21 93       	st	Z+, r18
	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	9c 01       	movw	r18, r24
     52a:	86 30       	cpi	r24, 0x06	; 6
     52c:	91 05       	cpc	r25, r1
     52e:	99 f7       	brne	.-26     	; 0x516 <wan_config_network+0x40>
     530:	fe 01       	movw	r30, r28
     532:	37 96       	adiw	r30, 0x07	; 7
     534:	ce 01       	movw	r24, r28
     536:	0e 96       	adiw	r24, 0x0e	; 14
     538:	20 e0       	ldi	r18, 0x00	; 0
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
	}
	// checksum
	uint8_t cs = 0;
	for (int i = 0; i < frame_index; cs ^= frame[i++]);
     53a:	31 91       	ld	r19, Z+
     53c:	23 27       	eor	r18, r19
     53e:	e8 17       	cp	r30, r24
     540:	f9 07       	cpc	r31, r25
     542:	d9 f7       	brne	.-10     	; 0x53a <wan_config_network+0x64>
	frame[frame_index++] = cs;
     544:	2e 87       	std	Y+14, r18	; 0x0e

	wan_usart_transmit_bytes((char*) frame, frame_index);
     546:	68 e0       	ldi	r22, 0x08	; 8
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	ce 01       	movw	r24, r28
     54c:	07 96       	adiw	r24, 0x07	; 7
     54e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <wan_usart_transmit_bytes>
}
     552:	60 96       	adiw	r28, 0x10	; 16
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <config_mac_resp>:

	return (state == FINISHED ? true : false);
}

void config_mac_resp(mac_resp_t * resp)
{
     564:	fc 01       	movw	r30, r24
	shared.mac = resp->wan_device_address;
     566:	71 81       	ldd	r23, Z+1	; 0x01
     568:	62 81       	ldd	r22, Z+2	; 0x02
     56a:	53 81       	ldd	r21, Z+3	; 0x03
     56c:	44 81       	ldd	r20, Z+4	; 0x04
     56e:	35 81       	ldd	r19, Z+5	; 0x05
     570:	26 81       	ldd	r18, Z+6	; 0x06
     572:	97 81       	ldd	r25, Z+7	; 0x07
     574:	80 85       	ldd	r24, Z+8	; 0x08
     576:	70 93 f8 0b 	sts	0x0BF8, r23
     57a:	60 93 f9 0b 	sts	0x0BF9, r22
     57e:	50 93 fa 0b 	sts	0x0BFA, r21
     582:	40 93 fb 0b 	sts	0x0BFB, r20
     586:	30 93 fc 0b 	sts	0x0BFC, r19
     58a:	20 93 fd 0b 	sts	0x0BFD, r18
     58e:	90 93 fe 0b 	sts	0x0BFE, r25
     592:	80 93 ff 0b 	sts	0x0BFF, r24
	state = CONFIG_NTW_REQ;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 82 01 	sts	0x0182, r24
     59c:	08 95       	ret

0000059e <wan_config_received>:
	wan_usart_transmit_bytes((char*) frame, frame_index);
}

bool wan_config_received(uint8_t * buff)
{
	resp_type = buff[1];
     59e:	fc 01       	movw	r30, r24
     5a0:	21 81       	ldd	r18, Z+1	; 0x01
     5a2:	20 93 83 01 	sts	0x0183, r18
	switch (resp_type)
     5a6:	23 30       	cpi	r18, 0x03	; 3
     5a8:	31 f0       	breq	.+12     	; 0x5b6 <wan_config_received+0x18>
     5aa:	24 30       	cpi	r18, 0x04	; 4
     5ac:	39 f4       	brne	.+14     	; 0x5bc <wan_config_received+0x1e>
	{
	case resp_type_address:
		config_mac_resp((mac_resp_t *) &buff[1]);
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	0e 94 b2 02 	call	0x564	; 0x564 <config_mac_resp>
		break;
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <wan_config_received+0x1e>
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	80 93 82 01 	sts	0x0182, r24
	case resp_type_config_ntw:
		config_ntw_resp((config_ntw_resp_t *) &buff[1]);
		break;
	}

	return (state == FINISHED ? true : false);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 91 82 01 	lds	r25, 0x0182
     5c2:	93 30       	cpi	r25, 0x03	; 3
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <wan_config_received+0x2a>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
}
     5c8:	08 95       	ret

000005ca <config_ntw_resp>:
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	80 93 82 01 	sts	0x0182, r24
     5d0:	08 95       	ret

000005d2 <no_ack_status_resp>:
}

void no_ack_status_resp(no_ack_status_resp_t * resp)
{
	state = FINISHED;
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	80 93 82 01 	sts	0x0182, r24
     5d8:	08 95       	ret

000005da <wan_config_tick>:
}

bool wan_config_tick()
{
	switch (state)
     5da:	80 91 82 01 	lds	r24, 0x0182
     5de:	88 23       	and	r24, r24
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <wan_config_tick+0xe>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <wan_config_tick+0x1a>
     5e6:	0b c0       	rjmp	.+22     	; 0x5fe <wan_config_tick+0x24>
	{
	case SEND_MAC_REQ:
		wan_get_device_address();
     5e8:	0e 94 4c 02 	call	0x498	; 0x498 <wan_get_device_address>
		state = AWAITING_RESP;
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	80 93 82 01 	sts	0x0182, r24
		break;
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <wan_config_tick+0x24>
	case CONFIG_NTW_REQ:
		wan_config_network();
     5f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <wan_config_network>
		state = AWAITING_RESP;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	80 93 82 01 	sts	0x0182, r24
	}
	return (state == FINISHED ? true : false);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 91 82 01 	lds	r25, 0x0182
     604:	93 30       	cpi	r25, 0x03	; 3
     606:	09 f0       	breq	.+2      	; 0x60a <wan_config_tick+0x30>
     608:	80 e0       	ldi	r24, 0x00	; 0
}
     60a:	08 95       	ret

0000060c <wan_driver_init>:
	}
}

static void init_buffer()
{
	wan_line_index = 0;
     60c:	10 92 85 01 	sts	0x0185, r1
     610:	10 92 84 01 	sts	0x0184, r1
	memset(wan_line_buffer, '\0', sizeof(wan_line_buffer));
     614:	81 e8       	ldi	r24, 0x81	; 129
     616:	e7 ec       	ldi	r30, 0xC7	; 199
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	df 01       	movw	r26, r30
     61c:	98 2f       	mov	r25, r24
     61e:	1d 92       	st	X+, r1
     620:	9a 95       	dec	r25
     622:	e9 f7       	brne	.-6      	; 0x61e <wan_driver_init+0x12>
}

static void init_lines()
{
	memset(wan_lines, '\0', sizeof(wan_lines));
     624:	e8 e4       	ldi	r30, 0x48	; 72
     626:	fa e0       	ldi	r31, 0x0A	; 10
     628:	df 01       	movw	r26, r30
     62a:	1d 92       	st	X+, r1
     62c:	8a 95       	dec	r24
     62e:	e9 f7       	brne	.-6      	; 0x62a <wan_driver_init+0x1e>
     630:	08 95       	ret

00000632 <wan_driver_tick>:
	init_lines();
}

void wan_driver_tick()
{
	if (wan_usart_data_available())
     632:	0e 94 bc 04 	call	0x978	; 0x978 <wan_usart_data_available>
     636:	08 95       	ret

00000638 <clock_init>:
//volatile clock_time_t future;

void clock_init()
{
	// timer ctc mode
		TCCR0A |= _BV(WGM01);
     638:	84 b5       	in	r24, 0x24	; 36
     63a:	82 60       	ori	r24, 0x02	; 2
     63c:	84 bd       	out	0x24, r24	; 36

		// F_CPU/64/1000 = 125
		OCR0A = F_CPU/64/1000;
     63e:	8d e7       	ldi	r24, 0x7D	; 125
     640:	87 bd       	out	0x27, r24	; 39
		// Enable timer set prescalar to 64
		TCCR0B |= _BV(CS01) | _BV(CS00);
     642:	85 b5       	in	r24, 0x25	; 37
     644:	83 60       	ori	r24, 0x03	; 3
     646:	85 bd       	out	0x25, r24	; 37

		// Enable Output Compare Match A
		TIMSK0 = _BV(OCIE0A);
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	80 93 6e 00 	sts	0x006E, r24
     64e:	08 95       	ret

00000650 <clock_time>:
}

clock_time_t clock_time()
{
	return clock_millis;
     650:	60 91 c9 0a 	lds	r22, 0x0AC9
     654:	70 91 ca 0a 	lds	r23, 0x0ACA
     658:	80 91 cb 0a 	lds	r24, 0x0ACB
     65c:	90 91 cc 0a 	lds	r25, 0x0ACC
}
     660:	08 95       	ret

00000662 <delay_millis>:

void delay_millis(clock_time_t millis)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     666:	00 91 c9 0a 	lds	r16, 0x0AC9
     66a:	10 91 ca 0a 	lds	r17, 0x0ACA
     66e:	20 91 cb 0a 	lds	r18, 0x0ACB
     672:	30 91 cc 0a 	lds	r19, 0x0ACC
}

void delay_millis(clock_time_t millis)
{
	clock_time_t future = clock_time() + millis;
     676:	ab 01       	movw	r20, r22
     678:	bc 01       	movw	r22, r24
     67a:	40 0f       	add	r20, r16
     67c:	51 1f       	adc	r21, r17
     67e:	62 1f       	adc	r22, r18
     680:	73 1f       	adc	r23, r19
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     682:	80 91 c9 0a 	lds	r24, 0x0AC9
     686:	90 91 ca 0a 	lds	r25, 0x0ACA
     68a:	a0 91 cb 0a 	lds	r26, 0x0ACB
     68e:	b0 91 cc 0a 	lds	r27, 0x0ACC
{
	clock_time_t future = clock_time() + millis;

	while(true)
	{
		if(clock_time() > future)
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	98 f7       	brcc	.-26     	; 0x682 <delay_millis+0x20>
		{
			break;
		}
	}
}
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
	clock_millis++;
     6b4:	80 91 c9 0a 	lds	r24, 0x0AC9
     6b8:	90 91 ca 0a 	lds	r25, 0x0ACA
     6bc:	a0 91 cb 0a 	lds	r26, 0x0ACB
     6c0:	b0 91 cc 0a 	lds	r27, 0x0ACC
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	a1 1d       	adc	r26, r1
     6c8:	b1 1d       	adc	r27, r1
     6ca:	80 93 c9 0a 	sts	0x0AC9, r24
     6ce:	90 93 ca 0a 	sts	0x0ACA, r25
     6d2:	a0 93 cb 0a 	sts	0x0ACB, r26
     6d6:	b0 93 cc 0a 	sts	0x0ACC, r27
}
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <isr_tick>:

void isr_tick()
{
	clock_millis++;
     6ec:	80 91 c9 0a 	lds	r24, 0x0AC9
     6f0:	90 91 ca 0a 	lds	r25, 0x0ACA
     6f4:	a0 91 cb 0a 	lds	r26, 0x0ACB
     6f8:	b0 91 cc 0a 	lds	r27, 0x0ACC
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 c9 0a 	sts	0x0AC9, r24
     706:	90 93 ca 0a 	sts	0x0ACA, r25
     70a:	a0 93 cb 0a 	sts	0x0ACB, r26
     70e:	b0 93 cc 0a 	sts	0x0ACC, r27
     712:	08 95       	ret

00000714 <config_init>:

config_t config;

void config_init()
{
	config.var_bool = false;
     714:	10 92 cd 0a 	sts	0x0ACD, r1
	config.var_int8_t = 0;
     718:	10 92 d4 0a 	sts	0x0AD4, r1
	config.var_int16_t = 0;
     71c:	10 92 d3 0a 	sts	0x0AD3, r1
     720:	10 92 d2 0a 	sts	0x0AD2, r1
	config.var_int32_t = 0;
     724:	10 92 ce 0a 	sts	0x0ACE, r1
     728:	10 92 cf 0a 	sts	0x0ACF, r1
     72c:	10 92 d0 0a 	sts	0x0AD0, r1
     730:	10 92 d1 0a 	sts	0x0AD1, r1
	config.var_uint8_t = 0;
     734:	10 92 db 0a 	sts	0x0ADB, r1
	config.var_uint16_t = 0;
     738:	10 92 da 0a 	sts	0x0ADA, r1
     73c:	10 92 d9 0a 	sts	0x0AD9, r1
	config.var_uint32_t = 0;
     740:	10 92 d5 0a 	sts	0x0AD5, r1
     744:	10 92 d6 0a 	sts	0x0AD6, r1
     748:	10 92 d7 0a 	sts	0x0AD7, r1
     74c:	10 92 d8 0a 	sts	0x0AD8, r1
     750:	08 95       	ret

00000752 <load_config>:

}


void load_config()
{
     752:	08 95       	ret

00000754 <write_config>:
}

void write_config()
{
     754:	08 95       	ret

00000756 <_btle_set_rx_cb>:

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     756:	90 93 dd 0a 	sts	0x0ADD, r25
     75a:	80 93 dc 0a 	sts	0x0ADC, r24
     75e:	08 95       	ret

00000760 <btle_usart_init>:
}

void btle_usart_init()
{
	UBRR1H = UBRRH_VALUE;
     760:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     764:	8c e0       	ldi	r24, 0x0C	; 12
     766:	80 93 cc 00 	sts	0x00CC, r24

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     76a:	e9 ec       	ldi	r30, 0xC9	; 201
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	88 68       	ori	r24, 0x88	; 136
     772:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     774:	80 81       	ld	r24, Z
     776:	88 61       	ori	r24, 0x18	; 24
     778:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     77a:	ea ec       	ldi	r30, 0xCA	; 202
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	86 60       	ori	r24, 0x06	; 6
     782:	80 83       	st	Z, r24
     784:	08 95       	ret

00000786 <btle_usart_init_cb>:
}

// not in use at this time
void btle_usart_init_cb(btle_rx_cb_t cb)
{
	UBRR1H = UBRRH_VALUE;
     786:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     78a:	2c e0       	ldi	r18, 0x0C	; 12
     78c:	20 93 cc 00 	sts	0x00CC, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     790:	e9 ec       	ldi	r30, 0xC9	; 201
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	20 81       	ld	r18, Z
     796:	28 68       	ori	r18, 0x88	; 136
     798:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     79a:	20 81       	ld	r18, Z
     79c:	28 61       	ori	r18, 0x18	; 24
     79e:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     7a0:	ea ec       	ldi	r30, 0xCA	; 202
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	20 81       	ld	r18, Z
     7a6:	26 60       	ori	r18, 0x06	; 6
     7a8:	20 83       	st	Z, r18

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     7aa:	90 93 dd 0a 	sts	0x0ADD, r25
     7ae:	80 93 dc 0a 	sts	0x0ADC, r24
     7b2:	08 95       	ret

000007b4 <btle_usart_put_char>:
	_btle_set_rx_cb(cb);
}

void btle_usart_put_char(unsigned char c)
{
	int i = (unsigned int)(btle_buffer.head + 1) % BTLE_RX_BUFFER_SIZE;
     7b4:	40 91 89 03 	lds	r20, 0x0389
     7b8:	50 91 8a 03 	lds	r21, 0x038A
     7bc:	9a 01       	movw	r18, r20
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != btle_buffer.tail) {
     7c4:	60 91 8b 03 	lds	r22, 0x038B
     7c8:	70 91 8c 03 	lds	r23, 0x038C
     7cc:	62 17       	cp	r22, r18
     7ce:	73 07       	cpc	r23, r19
     7d0:	41 f0       	breq	.+16     	; 0x7e2 <btle_usart_put_char+0x2e>
		btle_buffer.buffer[btle_buffer.head] = c;
     7d2:	fa 01       	movw	r30, r20
     7d4:	e7 57       	subi	r30, 0x77	; 119
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	80 83       	st	Z, r24
		btle_buffer.head = i;
     7da:	30 93 8a 03 	sts	0x038A, r19
     7de:	20 93 89 03 	sts	0x0389, r18
     7e2:	08 95       	ret

000007e4 <btle_usart_clear_buffer>:
}


void btle_usart_clear_buffer()
{
	memset(&btle_buffer, 0, sizeof(BTLE_BUFFER));
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	e9 e8       	ldi	r30, 0x89	; 137
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	df 01       	movw	r26, r30
     7ee:	9c 01       	movw	r18, r24
     7f0:	1d 92       	st	X+, r1
     7f2:	21 50       	subi	r18, 0x01	; 1
     7f4:	30 40       	sbci	r19, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <btle_usart_clear_buffer+0xc>
     7f8:	08 95       	ret

000007fa <btle_usart_data_available>:
}

uint8_t btle_usart_data_available()
{
	return (uint8_t)(BTLE_RX_BUFFER_SIZE + btle_buffer.head - btle_buffer.tail) % BTLE_RX_BUFFER_SIZE;
     7fa:	80 91 89 03 	lds	r24, 0x0389
     7fe:	90 91 8b 03 	lds	r25, 0x038B
}
     802:	89 1b       	sub	r24, r25
     804:	08 95       	ret

00000806 <btle_usart_data_read>:

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
     806:	20 91 8b 03 	lds	r18, 0x038B
     80a:	30 91 8c 03 	lds	r19, 0x038C
     80e:	80 91 89 03 	lds	r24, 0x0389
     812:	90 91 8a 03 	lds	r25, 0x038A
     816:	82 17       	cp	r24, r18
     818:	93 07       	cpc	r25, r19
     81a:	61 f0       	breq	.+24     	; 0x834 <btle_usart_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
     81c:	f9 01       	movw	r30, r18
     81e:	e7 57       	subi	r30, 0x77	; 119
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	80 81       	ld	r24, Z
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
     824:	2f 5f       	subi	r18, 0xFF	; 255
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	31 70       	andi	r19, 0x01	; 1
     82a:	30 93 8c 03 	sts	0x038C, r19
     82e:	20 93 8b 03 	sts	0x038B, r18
		return c;
     832:	08 95       	ret

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
		return -1;
     834:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
		return c;
	}
}
     836:	08 95       	ret

00000838 <btle_usart_transmit>:

void btle_usart_transmit(uint8_t data )
{
	while (!( UCSR1A & (1<<UDRE1)));
     838:	e8 ec       	ldi	r30, 0xC8	; 200
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	90 81       	ld	r25, Z
     83e:	95 ff       	sbrs	r25, 5
     840:	fd cf       	rjmp	.-6      	; 0x83c <btle_usart_transmit+0x4>
	UDR1 = data;
     842:	80 93 ce 00 	sts	0x00CE, r24
     846:	08 95       	ret

00000848 <btle_usart_transmit_bytes>:
}

void btle_usart_transmit_bytes(char data[], int size)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	for (int i=0;i<size;i++)
     84c:	16 16       	cp	r1, r22
     84e:	17 06       	cpc	r1, r23
     850:	7c f4       	brge	.+30     	; 0x870 <btle_usart_transmit_bytes+0x28>
     852:	dc 01       	movw	r26, r24
     854:	86 0f       	add	r24, r22
     856:	97 1f       	adc	r25, r23
	{
		while (!( UCSR1A & (1<<UDRE1)));
     858:	e8 ec       	ldi	r30, 0xC8	; 200
     85a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
     85c:	ce ec       	ldi	r28, 0xCE	; 206
     85e:	d0 e0       	ldi	r29, 0x00	; 0

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
	{
		while (!( UCSR1A & (1<<UDRE1)));
     860:	20 81       	ld	r18, Z
     862:	25 ff       	sbrs	r18, 5
     864:	fd cf       	rjmp	.-6      	; 0x860 <btle_usart_transmit_bytes+0x18>
		UDR1 = data[i];
     866:	2d 91       	ld	r18, X+
     868:	28 83       	st	Y, r18
	UDR1 = data;
}

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
     86a:	a8 17       	cp	r26, r24
     86c:	b9 07       	cpc	r27, r25
     86e:	c1 f7       	brne	.-16     	; 0x860 <btle_usart_transmit_bytes+0x18>
	{
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <btle_usart_transmit_string>:

void btle_usart_transmit_string(char * data)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
	unsigned char c = *data;
     87a:	fc 01       	movw	r30, r24
     87c:	20 81       	ld	r18, Z

	while (c) {
     87e:	22 23       	and	r18, r18
     880:	69 f0       	breq	.+26     	; 0x89c <btle_usart_transmit_string+0x26>
     882:	dc 01       	movw	r26, r24
     884:	11 96       	adiw	r26, 0x01	; 1
		while (!( UCSR1A & (1<<UDRE1)));
     886:	e8 ec       	ldi	r30, 0xC8	; 200
     888:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = c;
     88a:	ce ec       	ldi	r28, 0xCE	; 206
     88c:	d0 e0       	ldi	r29, 0x00	; 0
void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
		while (!( UCSR1A & (1<<UDRE1)));
     88e:	80 81       	ld	r24, Z
     890:	85 ff       	sbrs	r24, 5
     892:	fd cf       	rjmp	.-6      	; 0x88e <btle_usart_transmit_string+0x18>
		UDR1 = c;
     894:	28 83       	st	Y, r18
		c = *(++data);
     896:	2d 91       	ld	r18, X+

void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
     898:	21 11       	cpse	r18, r1
     89a:	f9 cf       	rjmp	.-14     	; 0x88e <btle_usart_transmit_string+0x18>
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = c;
		c = *(++data);
	}
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <__vector_28>:

ISR(BTLE_ISR_VECTOR)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	0b b6       	in	r0, 0x3b	; 59
     8ae:	0f 92       	push	r0
     8b0:	2f 93       	push	r18
     8b2:	3f 93       	push	r19
     8b4:	4f 93       	push	r20
     8b6:	5f 93       	push	r21
     8b8:	6f 93       	push	r22
     8ba:	7f 93       	push	r23
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	cf 93       	push	r28
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
	char data = UDR1;
     8ca:	c0 91 ce 00 	lds	r28, 0x00CE
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	btle_usart_put_char(data);
     8ce:	8c 2f       	mov	r24, r28
     8d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <btle_usart_put_char>

	// debug callback to main program
	if (btle_rx_cb != 0)
     8d4:	e0 91 dc 0a 	lds	r30, 0x0ADC
     8d8:	f0 91 dd 0a 	lds	r31, 0x0ADD
     8dc:	30 97       	sbiw	r30, 0x00	; 0
     8de:	11 f0       	breq	.+4      	; 0x8e4 <__vector_28+0x42>
	{
		btle_rx_cb(data);
     8e0:	8c 2f       	mov	r24, r28
     8e2:	09 95       	icall
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	cf 91       	pop	r28
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <wan_usart_init>:

WAN_BUFFER wan_buffer = { { 0 }, 0, 0 };

void wan_usart_init()
{
	UBRR0H = UBRRH_VALUE;
     90c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	80 93 c4 00 	sts	0x00C4, r24

	// Enble receiver and transmitter
	UCSR0B |= (1 << RXCIE0) | (1 << TXEN0);
     916:	e1 ec       	ldi	r30, 0xC1	; 193
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 68       	ori	r24, 0x88	; 136
     91e:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     920:	80 81       	ld	r24, Z
     922:	88 61       	ori	r24, 0x18	; 24
     924:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     926:	e2 ec       	ldi	r30, 0xC2	; 194
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	86 60       	ori	r24, 0x06	; 6
     92e:	80 83       	st	Z, r24
     930:	08 95       	ret

00000932 <wan_usart_put_char>:
}

void wan_usart_put_char(unsigned char c)
{
	int i = (unsigned int) (wan_buffer.head + 1) % WAN_RX_BUFFER_SIZE;
     932:	40 91 8d 05 	lds	r20, 0x058D
     936:	50 91 8e 05 	lds	r21, 0x058E
     93a:	9a 01       	movw	r18, r20
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != wan_buffer.tail)
     942:	60 91 8f 05 	lds	r22, 0x058F
     946:	70 91 90 05 	lds	r23, 0x0590
     94a:	62 17       	cp	r22, r18
     94c:	73 07       	cpc	r23, r19
     94e:	41 f0       	breq	.+16     	; 0x960 <wan_usart_put_char+0x2e>
	{
		wan_buffer.buffer[wan_buffer.head] = c;
     950:	fa 01       	movw	r30, r20
     952:	e3 57       	subi	r30, 0x73	; 115
     954:	fc 4f       	sbci	r31, 0xFC	; 252
     956:	80 83       	st	Z, r24
		wan_buffer.head = i;
     958:	30 93 8e 05 	sts	0x058E, r19
     95c:	20 93 8d 05 	sts	0x058D, r18
     960:	08 95       	ret

00000962 <wan_usart_clear_buffer>:
	}
}

void wan_usart_clear_buffer()
{
	memset(&wan_buffer, 0, sizeof(WAN_BUFFER));
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	ed e8       	ldi	r30, 0x8D	; 141
     968:	f3 e0       	ldi	r31, 0x03	; 3
     96a:	df 01       	movw	r26, r30
     96c:	9c 01       	movw	r18, r24
     96e:	1d 92       	st	X+, r1
     970:	21 50       	subi	r18, 0x01	; 1
     972:	30 40       	sbci	r19, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <wan_usart_clear_buffer+0xc>
     976:	08 95       	ret

00000978 <wan_usart_data_available>:
}

uint8_t wan_usart_data_available(void)
{
	return (uint8_t) (WAN_RX_BUFFER_SIZE + wan_buffer.head - wan_buffer.tail)
     978:	80 91 8d 05 	lds	r24, 0x058D
     97c:	90 91 8f 05 	lds	r25, 0x058F
			% WAN_RX_BUFFER_SIZE;
}
     980:	89 1b       	sub	r24, r25
     982:	08 95       	ret

00000984 <wan_usart_data_read>:

uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
     984:	20 91 8f 05 	lds	r18, 0x058F
     988:	30 91 90 05 	lds	r19, 0x0590
     98c:	80 91 8d 05 	lds	r24, 0x058D
     990:	90 91 8e 05 	lds	r25, 0x058E
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	61 f0       	breq	.+24     	; 0x9b2 <wan_usart_data_read+0x2e>
	{
		return -1;
	} else
	{
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
     99a:	f9 01       	movw	r30, r18
     99c:	e3 57       	subi	r30, 0x73	; 115
     99e:	fc 4f       	sbci	r31, 0xFC	; 252
     9a0:	80 81       	ld	r24, Z
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	31 70       	andi	r19, 0x01	; 1
     9a8:	30 93 90 05 	sts	0x0590, r19
     9ac:	20 93 8f 05 	sts	0x058F, r18
				% WAN_RX_BUFFER_SIZE;
		return c;
     9b0:	08 95       	ret
uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
	{
		return -1;
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
				% WAN_RX_BUFFER_SIZE;
		return c;
	}
}
     9b4:	08 95       	ret

000009b6 <wan_usart_transmit>:

void wan_usart_transmit(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
     9b6:	e0 ec       	ldi	r30, 0xC0	; 192
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	90 81       	ld	r25, Z
     9bc:	95 ff       	sbrs	r25, 5
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <wan_usart_transmit+0x4>
		;
	UDR0 = data;
     9c0:	80 93 c6 00 	sts	0x00C6, r24
     9c4:	08 95       	ret

000009c6 <wan_usart_transmit_bytes>:
}

void wan_usart_transmit_bytes(char data[], int size)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	for (int i = 0; i < size; i++)
     9ca:	16 16       	cp	r1, r22
     9cc:	17 06       	cpc	r1, r23
     9ce:	7c f4       	brge	.+30     	; 0x9ee <wan_usart_transmit_bytes+0x28>
     9d0:	dc 01       	movw	r26, r24
     9d2:	86 0f       	add	r24, r22
     9d4:	97 1f       	adc	r25, r23
	{
		while (!(UCSR0A & (1 << UDRE0)))
     9d6:	e0 ec       	ldi	r30, 0xC0	; 192
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = data[i];
     9da:	c6 ec       	ldi	r28, 0xC6	; 198
     9dc:	d0 e0       	ldi	r29, 0x00	; 0

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     9de:	20 81       	ld	r18, Z
     9e0:	25 ff       	sbrs	r18, 5
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <wan_usart_transmit_bytes+0x18>
			;
		UDR0 = data[i];
     9e4:	2d 91       	ld	r18, X+
     9e6:	28 83       	st	Y, r18
	UDR0 = data;
}

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
     9e8:	a8 17       	cp	r26, r24
     9ea:	b9 07       	cpc	r27, r25
     9ec:	c1 f7       	brne	.-16     	; 0x9de <wan_usart_transmit_bytes+0x18>
	{
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = data[i];
	}
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <wan_usart_transmit_string>:

void wan_usart_transmit_string(char * data)
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
	unsigned char c = *data;
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 81       	ld	r18, Z

	while (c)
     9fc:	22 23       	and	r18, r18
     9fe:	69 f0       	breq	.+26     	; 0xa1a <wan_usart_transmit_string+0x26>
     a00:	dc 01       	movw	r26, r24
     a02:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1 << UDRE0)))
     a04:	e0 ec       	ldi	r30, 0xC0	; 192
     a06:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = c;
     a08:	c6 ec       	ldi	r28, 0xC6	; 198
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned char c = *data;

	while (c)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     a0c:	80 81       	ld	r24, Z
     a0e:	85 ff       	sbrs	r24, 5
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <wan_usart_transmit_string+0x18>
			;
		UDR0 = c;
     a12:	28 83       	st	Y, r18
		c = *(++data);
     a14:	2d 91       	ld	r18, X+

void wan_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c)
     a16:	21 11       	cpse	r18, r1
     a18:	f9 cf       	rjmp	.-14     	; 0xa0c <wan_usart_transmit_string+0x18>
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = c;
		c = *(++data);
	}
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <__vector_20>:

ISR(WAN_ISR_VECTOR)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0b b6       	in	r0, 0x3b	; 59
     a2c:	0f 92       	push	r0
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
	unsigned char data = UDR0;
     a46:	80 91 c6 00 	lds	r24, 0x00C6
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	wan_usart_put_char(data);
     a4a:	0e 94 99 04 	call	0x932	; 0x932 <wan_usart_put_char>

}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <ramdisk_init>:
static btle_msg_t *valid_head;

static btle_msg_t *deleted_head;

void ramdisk_init()
{
     a74:	8a ea       	ldi	r24, 0xAA	; 170
     a76:	95 e0       	ldi	r25, 0x05	; 5
     a78:	22 ea       	ldi	r18, 0xA2	; 162
     a7a:	37 e0       	ldi	r19, 0x07	; 7
     a7c:	fc 01       	movw	r30, r24
     a7e:	38 97       	sbiw	r30, 0x08	; 8
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
	{
		records[i].next = &records[i + 1];
     a80:	91 83       	std	Z+1, r25	; 0x01
     a82:	80 83       	st	Z, r24
     a84:	45 96       	adiw	r24, 0x15	; 21

void ramdisk_init()
{
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
     a86:	82 17       	cp	r24, r18
     a88:	93 07       	cpc	r25, r19
     a8a:	c1 f7       	brne	.-16     	; 0xa7c <ramdisk_init+0x8>
	{
		records[i].next = &records[i + 1];
	}

	records[i].next = NULL;
     a8c:	10 92 9b 07 	sts	0x079B, r1
     a90:	10 92 9a 07 	sts	0x079A, r1

	deleted_head = &records[0];
     a94:	85 e9       	ldi	r24, 0x95	; 149
     a96:	95 e0       	ldi	r25, 0x05	; 5
     a98:	90 93 92 05 	sts	0x0592, r25
     a9c:	80 93 91 05 	sts	0x0591, r24

	valid_head = NULL;
     aa0:	10 92 94 05 	sts	0x0594, r1
     aa4:	10 92 93 05 	sts	0x0593, r1
     aa8:	08 95       	ret

00000aaa <ramdisk_write>:

}

int ramdisk_write(btle_msg_t to_write)
{
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	f8 88       	ldd	r15, Y+16	; 0x10
     aca:	79 88       	ldd	r7, Y+17	; 0x11
     acc:	8a 88       	ldd	r8, Y+18	; 0x12
     ace:	9b 88       	ldd	r9, Y+19	; 0x13
     ad0:	ac 88       	ldd	r10, Y+20	; 0x14
     ad2:	bd 88       	ldd	r11, Y+21	; 0x15
     ad4:	ce 88       	ldd	r12, Y+22	; 0x16
     ad6:	df 88       	ldd	r13, Y+23	; 0x17
     ad8:	e8 8c       	ldd	r14, Y+24	; 0x18
     ada:	69 8d       	ldd	r22, Y+25	; 0x19
     adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ade:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ae0:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ae2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ae4:	98 a1       	ldd	r25, Y+32	; 0x20
     ae6:	a9 a1       	ldd	r26, Y+33	; 0x21
     ae8:	ba a1       	ldd	r27, Y+34	; 0x22
     aea:	0b a1       	ldd	r16, Y+35	; 0x23
     aec:	1c a1       	ldd	r17, Y+36	; 0x24
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
     aee:	e0 91 91 05 	lds	r30, 0x0591
     af2:	f0 91 92 05 	lds	r31, 0x0592
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	09 f4       	brne	.+2      	; 0xafc <ramdisk_write+0x52>
     afa:	4b c0       	rjmp	.+150    	; 0xb92 <ramdisk_write+0xe8>
		return 0x00;

	//Check for no records
	if (valid_head == NULL )
     afc:	20 91 93 05 	lds	r18, 0x0593
     b00:	30 91 94 05 	lds	r19, 0x0594
     b04:	21 15       	cp	r18, r1
     b06:	31 05       	cpc	r19, r1
     b08:	11 f5       	brne	.+68     	; 0xb4e <ramdisk_write+0xa4>
	{
		temp_1 = deleted_head->next;
     b0a:	25 85       	ldd	r18, Z+13	; 0x0d
     b0c:	36 85       	ldd	r19, Z+14	; 0x0e
		valid_head = deleted_head;
     b0e:	f0 93 94 05 	sts	0x0594, r31
     b12:	e0 93 93 05 	sts	0x0593, r30
		deleted_head = temp_1;
     b16:	30 93 92 05 	sts	0x0592, r19
     b1a:	20 93 91 05 	sts	0x0591, r18
		valid_head->mac = to_write.mac;
     b1e:	71 82       	std	Z+1, r7	; 0x01
     b20:	82 82       	std	Z+2, r8	; 0x02
     b22:	93 82       	std	Z+3, r9	; 0x03
     b24:	a4 82       	std	Z+4, r10	; 0x04
     b26:	b5 82       	std	Z+5, r11	; 0x05
     b28:	c6 82       	std	Z+6, r12	; 0x06
     b2a:	d7 82       	std	Z+7, r13	; 0x07
     b2c:	e0 86       	std	Z+8, r14	; 0x08
		valid_head->batt = to_write.batt;
     b2e:	72 87       	std	Z+10, r23	; 0x0a
     b30:	61 87       	std	Z+9, r22	; 0x09
		valid_head->rssi = to_write.rssi;
     b32:	f0 82       	st	Z, r15
		valid_head->temp = to_write.temp;
     b34:	54 87       	std	Z+12, r21	; 0x0c
     b36:	43 87       	std	Z+11, r20	; 0x0b
		valid_head->next = NULL;
     b38:	16 86       	std	Z+14, r1	; 0x0e
     b3a:	15 86       	std	Z+13, r1	; 0x0d
		valid_head->last_sent = to_write.last_sent;
     b3c:	87 87       	std	Z+15, r24	; 0x0f
     b3e:	90 8b       	std	Z+16, r25	; 0x10
     b40:	a1 8b       	std	Z+17, r26	; 0x11
     b42:	b2 8b       	std	Z+18, r27	; 0x12
		valid_head->count = to_write.count;
     b44:	03 8b       	std	Z+19, r16	; 0x13
		valid_head->type = to_write.type;
     b46:	14 8b       	std	Z+20, r17	; 0x14
		deleted_head = deleted_head->next;
		valid_head->next = temp_1;

	}

	return 0xff;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	24 c0       	rjmp	.+72     	; 0xb96 <ramdisk_write+0xec>
		valid_head->type = to_write.type;
	}

	else
	{
		deleted_head->mac = to_write.mac;
     b4e:	71 82       	std	Z+1, r7	; 0x01
     b50:	82 82       	std	Z+2, r8	; 0x02
     b52:	93 82       	std	Z+3, r9	; 0x03
     b54:	a4 82       	std	Z+4, r10	; 0x04
     b56:	b5 82       	std	Z+5, r11	; 0x05
     b58:	c6 82       	std	Z+6, r12	; 0x06
     b5a:	d7 82       	std	Z+7, r13	; 0x07
     b5c:	e0 86       	std	Z+8, r14	; 0x08
		deleted_head->batt = to_write.batt;
     b5e:	72 87       	std	Z+10, r23	; 0x0a
     b60:	61 87       	std	Z+9, r22	; 0x09
		deleted_head->rssi = to_write.rssi;
     b62:	f0 82       	st	Z, r15
		deleted_head->temp = to_write.temp;
     b64:	54 87       	std	Z+12, r21	; 0x0c
     b66:	43 87       	std	Z+11, r20	; 0x0b
		deleted_head->last_sent = to_write.last_sent;
     b68:	87 87       	std	Z+15, r24	; 0x0f
     b6a:	90 8b       	std	Z+16, r25	; 0x10
     b6c:	a1 8b       	std	Z+17, r26	; 0x11
     b6e:	b2 8b       	std	Z+18, r27	; 0x12
		deleted_head->count = to_write.count;
     b70:	03 8b       	std	Z+19, r16	; 0x13
		deleted_head->type = to_write.type;
     b72:	14 8b       	std	Z+20, r17	; 0x14
		temp_1 = valid_head;
		valid_head = deleted_head;
     b74:	f0 93 94 05 	sts	0x0594, r31
     b78:	e0 93 93 05 	sts	0x0593, r30
		deleted_head = deleted_head->next;
     b7c:	85 85       	ldd	r24, Z+13	; 0x0d
     b7e:	96 85       	ldd	r25, Z+14	; 0x0e
     b80:	90 93 92 05 	sts	0x0592, r25
     b84:	80 93 91 05 	sts	0x0591, r24
		valid_head->next = temp_1;
     b88:	36 87       	std	Z+14, r19	; 0x0e
     b8a:	25 87       	std	Z+13, r18	; 0x0d

	}

	return 0xff;
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <ramdisk_write+0xec>
{
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
		return 0x00;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0

	}

	return 0xff;

}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	08 95       	ret

00000bb2 <ramdisk_erase>:

int ramdisk_erase(btle_msg_t to_remove)
{
     bb2:	2f 92       	push	r2
     bb4:	3f 92       	push	r3
     bb6:	4f 92       	push	r4
     bb8:	5f 92       	push	r5
     bba:	6f 92       	push	r6
     bbc:	7f 92       	push	r7
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9e 88       	ldd	r9, Y+22	; 0x16
     bdc:	8f 88       	ldd	r8, Y+23	; 0x17
     bde:	78 8c       	ldd	r7, Y+24	; 0x18
     be0:	69 8c       	ldd	r6, Y+25	; 0x19
     be2:	5a 8c       	ldd	r5, Y+26	; 0x1a
     be4:	4b 8c       	ldd	r4, Y+27	; 0x1b
     be6:	3c 8c       	ldd	r3, Y+28	; 0x1c
     be8:	2d 8c       	ldd	r2, Y+29	; 0x1d
	btle_msg_t *temp_1 = valid_head;
     bea:	a0 91 93 05 	lds	r26, 0x0593
     bee:	b0 91 94 05 	lds	r27, 0x0594
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	ac 90       	ld	r10, X
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	bc 90       	ld	r11, X
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	13 96       	adiw	r26, 0x03	; 3
     c00:	cc 90       	ld	r12, X
     c02:	13 97       	sbiw	r26, 0x03	; 3
     c04:	14 96       	adiw	r26, 0x04	; 4
     c06:	dc 90       	ld	r13, X
     c08:	14 97       	sbiw	r26, 0x04	; 4
     c0a:	15 96       	adiw	r26, 0x05	; 5
     c0c:	ec 90       	ld	r14, X
     c0e:	15 97       	sbiw	r26, 0x05	; 5
     c10:	16 96       	adiw	r26, 0x06	; 6
     c12:	fc 90       	ld	r15, X
     c14:	16 97       	sbiw	r26, 0x06	; 6
     c16:	17 96       	adiw	r26, 0x07	; 7
     c18:	0c 91       	ld	r16, X
     c1a:	17 97       	sbiw	r26, 0x07	; 7
     c1c:	18 96       	adiw	r26, 0x08	; 8
     c1e:	1c 91       	ld	r17, X
     c20:	18 97       	sbiw	r26, 0x08	; 8
     c22:	29 2d       	mov	r18, r9
     c24:	38 2d       	mov	r19, r8
     c26:	47 2d       	mov	r20, r7
     c28:	56 2d       	mov	r21, r6
     c2a:	65 2d       	mov	r22, r5
     c2c:	74 2d       	mov	r23, r4
     c2e:	83 2d       	mov	r24, r3
     c30:	92 2d       	mov	r25, r2
     c32:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpdi2>
     c36:	09 f4       	brne	.+2      	; 0xc3a <ramdisk_erase+0x88>
     c38:	5f c0       	rjmp	.+190    	; 0xcf8 <ramdisk_erase+0x146>
     c3a:	10 97       	sbiw	r26, 0x00	; 0
     c3c:	09 f4       	brne	.+2      	; 0xc40 <ramdisk_erase+0x8e>
     c3e:	50 c0       	rjmp	.+160    	; 0xce0 <ramdisk_erase+0x12e>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     c40:	fd 01       	movw	r30, r26
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
	{
		temp_1 = temp_1->next;
     c42:	05 84       	ldd	r0, Z+13	; 0x0d
     c44:	f6 85       	ldd	r31, Z+14	; 0x0e
     c46:	e0 2d       	mov	r30, r0

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     c48:	a1 80       	ldd	r10, Z+1	; 0x01
     c4a:	b2 80       	ldd	r11, Z+2	; 0x02
     c4c:	c3 80       	ldd	r12, Z+3	; 0x03
     c4e:	d4 80       	ldd	r13, Z+4	; 0x04
     c50:	e5 80       	ldd	r14, Z+5	; 0x05
     c52:	f6 80       	ldd	r15, Z+6	; 0x06
     c54:	07 81       	ldd	r16, Z+7	; 0x07
     c56:	10 85       	ldd	r17, Z+8	; 0x08
     c58:	29 2d       	mov	r18, r9
     c5a:	38 2d       	mov	r19, r8
     c5c:	47 2d       	mov	r20, r7
     c5e:	56 2d       	mov	r21, r6
     c60:	65 2d       	mov	r22, r5
     c62:	74 2d       	mov	r23, r4
     c64:	83 2d       	mov	r24, r3
     c66:	92 2d       	mov	r25, r2
     c68:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpdi2>
     c6c:	19 f0       	breq	.+6      	; 0xc74 <ramdisk_erase+0xc2>
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	41 f7       	brne	.-48     	; 0xc42 <ramdisk_erase+0x90>
     c72:	39 c0       	rjmp	.+114    	; 0xce6 <ramdisk_erase+0x134>
	{
		temp_1 = temp_1->next;
     c74:	9f 01       	movw	r18, r30
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     c76:	30 97       	sbiw	r30, 0x00	; 0
     c78:	c9 f1       	breq	.+114    	; 0xcec <ramdisk_erase+0x13a>
		return 0x00;

	else if (temp_1 == valid_head)
     c7a:	ae 17       	cp	r26, r30
     c7c:	bf 07       	cpc	r27, r31
     c7e:	99 f4       	brne	.+38     	; 0xca6 <ramdisk_erase+0xf4>
	{
		valid_head = valid_head->next;
     c80:	85 85       	ldd	r24, Z+13	; 0x0d
     c82:	96 85       	ldd	r25, Z+14	; 0x0e
     c84:	90 93 94 05 	sts	0x0594, r25
     c88:	80 93 93 05 	sts	0x0593, r24
		temp_1->next = deleted_head;
     c8c:	80 91 91 05 	lds	r24, 0x0591
     c90:	90 91 92 05 	lds	r25, 0x0592
     c94:	96 87       	std	Z+14, r25	; 0x0e
     c96:	85 87       	std	Z+13, r24	; 0x0d
		deleted_head = temp_1;
     c98:	f0 93 92 05 	sts	0x0592, r31
     c9c:	e0 93 91 05 	sts	0x0591, r30
		temp_2 = deleted_head;
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <ramdisk_erase+0x14e>
	}

	else
	{
		btle_msg_t *temp_2 = valid_head;
		while (temp_2->next != temp_1)
     ca6:	1d 96       	adiw	r26, 0x0d	; 13
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	1e 97       	sbiw	r26, 0x0e	; 14
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <ramdisk_erase+0x106>
		{
			temp_2 = temp_2->next;
     cb4:	dc 01       	movw	r26, r24
     cb6:	f7 cf       	rjmp	.-18     	; 0xca6 <ramdisk_erase+0xf4>
		}

		temp_2->next = temp_1->next;
     cb8:	f9 01       	movw	r30, r18
     cba:	85 85       	ldd	r24, Z+13	; 0x0d
     cbc:	96 85       	ldd	r25, Z+14	; 0x0e
     cbe:	1e 96       	adiw	r26, 0x0e	; 14
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	1d 97       	sbiw	r26, 0x0d	; 13
		temp_2 = deleted_head;
     cc6:	80 91 91 05 	lds	r24, 0x0591
     cca:	90 91 92 05 	lds	r25, 0x0592
		deleted_head = temp_1;
     cce:	30 93 92 05 	sts	0x0592, r19
     cd2:	20 93 91 05 	sts	0x0591, r18
		deleted_head->next = temp_2;
     cd6:	96 87       	std	Z+14, r25	; 0x0e
     cd8:	85 87       	std	Z+13, r24	; 0x0d
	}

	return 0xff;
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	10 c0       	rjmp	.+32     	; 0xd00 <ramdisk_erase+0x14e>
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
		return 0x00;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <ramdisk_erase+0x14e>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <ramdisk_erase+0x14e>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <ramdisk_erase+0x14e>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <ramdisk_erase+0x14e>
	{
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     cf8:	10 97       	sbiw	r26, 0x00	; 0
     cfa:	d9 f3       	breq	.-10     	; 0xcf2 <ramdisk_erase+0x140>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     cfc:	fd 01       	movw	r30, r26
     cfe:	c0 cf       	rjmp	.-128    	; 0xc80 <ramdisk_erase+0xce>
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	5f 90       	pop	r5
     d1e:	4f 90       	pop	r4
     d20:	3f 90       	pop	r3
     d22:	2f 90       	pop	r2
     d24:	08 95       	ret

00000d26 <ramdisk_find>:

btle_msg_t * ramdisk_find(uint64_t target)
{
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	a2 2f       	mov	r26, r18
     d44:	b3 2f       	mov	r27, r19
     d46:	c4 2f       	mov	r28, r20
     d48:	d5 2f       	mov	r29, r21
     d4a:	96 2e       	mov	r9, r22
     d4c:	87 2e       	mov	r8, r23
     d4e:	78 2e       	mov	r7, r24
     d50:	69 2e       	mov	r6, r25
	btle_msg_t *temp_1 = valid_head;
     d52:	e0 91 93 05 	lds	r30, 0x0593
     d56:	f0 91 94 05 	lds	r31, 0x0594

	while (temp_1->mac != target && temp_1 != NULL )
     d5a:	21 81       	ldd	r18, Z+1	; 0x01
     d5c:	32 81       	ldd	r19, Z+2	; 0x02
     d5e:	43 81       	ldd	r20, Z+3	; 0x03
     d60:	54 81       	ldd	r21, Z+4	; 0x04
     d62:	65 81       	ldd	r22, Z+5	; 0x05
     d64:	76 81       	ldd	r23, Z+6	; 0x06
     d66:	87 81       	ldd	r24, Z+7	; 0x07
     d68:	90 85       	ldd	r25, Z+8	; 0x08
     d6a:	aa 2e       	mov	r10, r26
     d6c:	bb 2e       	mov	r11, r27
     d6e:	cc 2e       	mov	r12, r28
     d70:	dd 2e       	mov	r13, r29
     d72:	e9 2c       	mov	r14, r9
     d74:	f8 2c       	mov	r15, r8
     d76:	07 2d       	mov	r16, r7
     d78:	16 2d       	mov	r17, r6
     d7a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpdi2>
     d7e:	d1 f0       	breq	.+52     	; 0xdb4 <ramdisk_find+0x8e>
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	c1 f0       	breq	.+48     	; 0xdb4 <ramdisk_find+0x8e>
	{
		temp_1 = temp_1->next;
     d84:	05 84       	ldd	r0, Z+13	; 0x0d
     d86:	f6 85       	ldd	r31, Z+14	; 0x0e
     d88:	e0 2d       	mov	r30, r0

btle_msg_t * ramdisk_find(uint64_t target)
{
	btle_msg_t *temp_1 = valid_head;

	while (temp_1->mac != target && temp_1 != NULL )
     d8a:	21 81       	ldd	r18, Z+1	; 0x01
     d8c:	32 81       	ldd	r19, Z+2	; 0x02
     d8e:	43 81       	ldd	r20, Z+3	; 0x03
     d90:	54 81       	ldd	r21, Z+4	; 0x04
     d92:	65 81       	ldd	r22, Z+5	; 0x05
     d94:	76 81       	ldd	r23, Z+6	; 0x06
     d96:	87 81       	ldd	r24, Z+7	; 0x07
     d98:	90 85       	ldd	r25, Z+8	; 0x08
     d9a:	aa 2e       	mov	r10, r26
     d9c:	bb 2e       	mov	r11, r27
     d9e:	cc 2e       	mov	r12, r28
     da0:	dd 2e       	mov	r13, r29
     da2:	e9 2c       	mov	r14, r9
     da4:	f8 2c       	mov	r15, r8
     da6:	07 2d       	mov	r16, r7
     da8:	16 2d       	mov	r17, r6
     daa:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpdi2>
     dae:	11 f0       	breq	.+4      	; 0xdb4 <ramdisk_find+0x8e>
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	41 f7       	brne	.-48     	; 0xd84 <ramdisk_find+0x5e>
	{
		temp_1 = temp_1->next;
	}

	return temp_1;
}
     db4:	cf 01       	movw	r24, r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	08 95       	ret

00000dd4 <ramdisk_next>:

btle_msg_t * ramdisk_next(btle_msg_t * target)
{
	if (target == NULL )
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	29 f4       	brne	.+10     	; 0xde2 <ramdisk_next+0xe>
		return valid_head;
     dd8:	80 91 93 05 	lds	r24, 0x0593
     ddc:	90 91 94 05 	lds	r25, 0x0594
     de0:	08 95       	ret
	else
		return (target->next);
     de2:	fc 01       	movw	r30, r24
     de4:	85 85       	ldd	r24, Z+13	; 0x0d
     de6:	96 85       	ldd	r25, Z+14	; 0x0e
}
     de8:	08 95       	ret

00000dea <circular_queue_put_char>:

CIRCULAR_QUEUE circular_queue = {{0},0,0};

void circular_queue_put_char(uint8_t c)
{
	int i = (unsigned int)(circular_queue.head + 1) % CIRCULAR_QUEUE_SIZE;
     dea:	40 91 a2 09 	lds	r20, 0x09A2
     dee:	50 91 a3 09 	lds	r21, 0x09A3
     df2:	9a 01       	movw	r18, r20
     df4:	2f 5f       	subi	r18, 0xFF	; 255
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	31 70       	andi	r19, 0x01	; 1

	if (i != circular_queue.tail) {
     dfa:	60 91 a4 09 	lds	r22, 0x09A4
     dfe:	70 91 a5 09 	lds	r23, 0x09A5
     e02:	62 17       	cp	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	41 f0       	breq	.+16     	; 0xe18 <circular_queue_put_char+0x2e>
		circular_queue.buffer[circular_queue.head] = c;
     e08:	fa 01       	movw	r30, r20
     e0a:	ee 55       	subi	r30, 0x5E	; 94
     e0c:	f8 4f       	sbci	r31, 0xF8	; 248
     e0e:	80 83       	st	Z, r24
		circular_queue.head = i;
     e10:	30 93 a3 09 	sts	0x09A3, r19
     e14:	20 93 a2 09 	sts	0x09A2, r18
     e18:	08 95       	ret

00000e1a <circular_queue_clear_buffer>:
}


void circular_queue_clear_buffer()
{
	memset(&circular_queue, 0, sizeof(CIRCULAR_QUEUE));
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	e2 ea       	ldi	r30, 0xA2	; 162
     e20:	f7 e0       	ldi	r31, 0x07	; 7
     e22:	df 01       	movw	r26, r30
     e24:	9c 01       	movw	r18, r24
     e26:	1d 92       	st	X+, r1
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	30 40       	sbci	r19, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <circular_queue_clear_buffer+0xc>
     e2e:	08 95       	ret

00000e30 <circular_queue_data_available>:
}

uint8_t circular_queue_data_available()
{
	return (uint8_t)(CIRCULAR_QUEUE_SIZE + circular_queue.head - circular_queue.tail) % CIRCULAR_QUEUE_SIZE;
     e30:	80 91 a2 09 	lds	r24, 0x09A2
     e34:	90 91 a4 09 	lds	r25, 0x09A4
}
     e38:	89 1b       	sub	r24, r25
     e3a:	08 95       	ret

00000e3c <circular_queue_data_read>:

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
     e3c:	20 91 a4 09 	lds	r18, 0x09A4
     e40:	30 91 a5 09 	lds	r19, 0x09A5
     e44:	80 91 a2 09 	lds	r24, 0x09A2
     e48:	90 91 a3 09 	lds	r25, 0x09A3
     e4c:	82 17       	cp	r24, r18
     e4e:	93 07       	cpc	r25, r19
     e50:	61 f0       	breq	.+24     	; 0xe6a <circular_queue_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
     e52:	f9 01       	movw	r30, r18
     e54:	ee 55       	subi	r30, 0x5E	; 94
     e56:	f8 4f       	sbci	r31, 0xF8	; 248
     e58:	80 81       	ld	r24, Z
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
     e5a:	2f 5f       	subi	r18, 0xFF	; 255
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	31 70       	andi	r19, 0x01	; 1
     e60:	30 93 a5 09 	sts	0x09A5, r19
     e64:	20 93 a4 09 	sts	0x09A4, r18
		return c;
     e68:	08 95       	ret

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
		return -1;
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
		return c;
	}
}
     e6c:	08 95       	ret

00000e6e <queue_reset>:
// Calculate memory usage as: DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
#define MEMORY_CALC(r)		(r->data_usage + (r->count * sizeof(queue_header_t)) + (r->count * 4));


void queue_reset(queue_t * q)
{
     e6e:	fc 01       	movw	r30, r24
	q->head = 0;
     e70:	15 82       	std	Z+5, r1	; 0x05
     e72:	14 82       	std	Z+4, r1	; 0x04
	q->tail = 0;
     e74:	17 82       	std	Z+7, r1	; 0x07
     e76:	16 82       	std	Z+6, r1	; 0x06
	q->count = 0;
     e78:	13 82       	std	Z+3, r1	; 0x03
     e7a:	12 82       	std	Z+2, r1	; 0x02
	q->data_usage = 0;
     e7c:	11 86       	std	Z+9, r1	; 0x09
     e7e:	10 86       	std	Z+8, r1	; 0x08
	q->memory_usage = 0;
     e80:	13 86       	std	Z+11, r1	; 0x0b
     e82:	12 86       	std	Z+10, r1	; 0x0a
     e84:	08 95       	ret

00000e86 <queue_init>:
}

void queue_init(queue_t * r, uint16_t max)
{
	r->max_size = max;
     e86:	fc 01       	movw	r30, r24
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	60 83       	st	Z, r22
	queue_reset(r);
     e8c:	0e 94 37 07 	call	0xe6e	; 0xe6e <queue_reset>
     e90:	08 95       	ret

00000e92 <queue_enqueue>:
}

queue_results_t queue_enqueue(queue_t * r, void * data, uint16_t length)
{
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
     ea0:	7b 01       	movw	r14, r22
     ea2:	8a 01       	movw	r16, r20
	queue_header_t header;
	uint16_t new_size;

	if (r->max_size)
     ea4:	88 81       	ld	r24, Y
     ea6:	99 81       	ldd	r25, Y+1	; 0x01
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	51 f0       	breq	.+20     	; 0xec0 <queue_enqueue+0x2e>
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
     eac:	2a 85       	ldd	r18, Y+10	; 0x0a
     eae:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb0:	26 5f       	subi	r18, 0xF6	; 246
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	24 0f       	add	r18, r20
     eb6:	35 1f       	adc	r19, r21
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <queue_enqueue+0x2e>
     ebe:	50 c0       	rjmp	.+160    	; 0xf60 <queue_enqueue+0xce>
	}

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);
     ec0:	c8 01       	movw	r24, r16
     ec2:	06 96       	adiw	r24, 0x06	; 6
     ec4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <malloc>

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	09 f4       	brne	.+2      	; 0xece <queue_enqueue+0x3c>
     ecc:	4b c0       	rjmp	.+150    	; 0xf64 <queue_enqueue+0xd2>
	header.length = length;
	header.prev = 0;
	header.next = 0;

	// If the queue is empty,
	if (r->head == 0)
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	23 2b       	or	r18, r19
     ed4:	69 f4       	brne	.+26     	; 0xef0 <queue_enqueue+0x5e>
	{
		// ... add this single object, and it doesn't point to anything
		r->head = obj;
     ed6:	9d 83       	std	Y+5, r25	; 0x05
     ed8:	8c 83       	std	Y+4, r24	; 0x04
		r->tail = obj;
     eda:	9f 83       	std	Y+7, r25	; 0x07
     edc:	8e 83       	std	Y+6, r24	; 0x06
		r->count = 1;
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3b 83       	std	Y+3, r19	; 0x03
     ee4:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage = header.length;
     ee6:	19 87       	std	Y+9, r17	; 0x09
     ee8:	08 87       	std	Y+8, r16	; 0x08
	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;

	// New tail header
	header.length = length;
	header.prev = 0;
     eea:	e0 e0       	ldi	r30, 0x00	; 0
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	12 c0       	rjmp	.+36     	; 0xf14 <queue_enqueue+0x82>
		header.next = 0;
	}
	else
	{
		// ... otherwise, the tail grows. Make this the new tail and bump the counter
		header.prev = r->tail;
     ef0:	ee 81       	ldd	r30, Y+6	; 0x06
     ef2:	ff 81       	ldd	r31, Y+7	; 0x07
		r->tail->next = (queue_header_t *)obj;
     ef4:	93 83       	std	Z+3, r25	; 0x03
     ef6:	82 83       	std	Z+2, r24	; 0x02
		r->tail = (queue_header_t *)obj;
     ef8:	9f 83       	std	Y+7, r25	; 0x07
     efa:	8e 83       	std	Y+6, r24	; 0x06
		r->count++;
     efc:	2a 81       	ldd	r18, Y+2	; 0x02
     efe:	3b 81       	ldd	r19, Y+3	; 0x03
     f00:	2f 5f       	subi	r18, 0xFF	; 255
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	3b 83       	std	Y+3, r19	; 0x03
     f06:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage += header.length;
     f08:	28 85       	ldd	r18, Y+8	; 0x08
     f0a:	39 85       	ldd	r19, Y+9	; 0x09
     f0c:	20 0f       	add	r18, r16
     f0e:	31 1f       	adc	r19, r17
     f10:	39 87       	std	Y+9, r19	; 0x09
     f12:	28 87       	std	Y+8, r18	; 0x08
	}
	r->memory_usage = MEMORY_CALC(r);
     f14:	2a 81       	ldd	r18, Y+2	; 0x02
     f16:	3b 81       	ldd	r19, Y+3	; 0x03
     f18:	a9 01       	movw	r20, r18
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	24 0f       	add	r18, r20
     f2c:	35 1f       	adc	r19, r21
     f2e:	48 85       	ldd	r20, Y+8	; 0x08
     f30:	59 85       	ldd	r21, Y+9	; 0x09
     f32:	24 0f       	add	r18, r20
     f34:	35 1f       	adc	r19, r21
     f36:	3b 87       	std	Y+11, r19	; 0x0b
     f38:	2a 87       	std	Y+10, r18	; 0x0a

	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
     f3a:	dc 01       	movw	r26, r24
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	fc 93       	st	X, r31
     f40:	ee 93       	st	-X, r30
     f42:	13 96       	adiw	r26, 0x03	; 3
     f44:	1c 92       	st	X, r1
     f46:	1e 92       	st	-X, r1
     f48:	12 97       	sbiw	r26, 0x02	; 2
     f4a:	15 96       	adiw	r26, 0x05	; 5
     f4c:	1c 93       	st	X, r17
     f4e:	0e 93       	st	-X, r16
     f50:	14 97       	sbiw	r26, 0x04	; 4
	memcpy(QUEUE_DATA(obj), data, length);
     f52:	a8 01       	movw	r20, r16
     f54:	b7 01       	movw	r22, r14
     f56:	06 96       	adiw	r24, 0x06	; 6
     f58:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <memcpy>

	return QUEUE_SUCCESS;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <queue_enqueue+0xd4>

	if (r->max_size)
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <queue_enqueue+0xd4>

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     f64:	81 e0       	ldi	r24, 0x01	; 1
	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
	memcpy(QUEUE_DATA(obj), data, length);

	return QUEUE_SUCCESS;
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	08 95       	ret

00000f74 <queue_dequeue>:

queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ec 01       	movw	r28, r24
     f82:	7b 01       	movw	r14, r22
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
     f84:	0c 81       	ldd	r16, Y+4	; 0x04
     f86:	1d 81       	ldd	r17, Y+5	; 0x05
     f88:	01 15       	cp	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <queue_dequeue+0x1c>
     f8e:	53 c0       	rjmp	.+166    	; 0x1036 <queue_dequeue+0xc2>

	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
     f90:	d8 01       	movw	r26, r16
     f92:	14 96       	adiw	r26, 0x04	; 4
     f94:	8d 91       	ld	r24, X+
     f96:	9c 91       	ld	r25, X
     f98:	15 97       	sbiw	r26, 0x05	; 5
     f9a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <malloc>
     f9e:	f7 01       	movw	r30, r14
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
	if (dest == 0) return QUEUE_NO_MEMORY;
     fa4:	ef 28       	or	r14, r15
     fa6:	09 f4       	brne	.+2      	; 0xfaa <queue_dequeue+0x36>
     fa8:	48 c0       	rjmp	.+144    	; 0x103a <queue_dequeue+0xc6>
	memcpy(*dest, QUEUE_DATA(header), header->length);
     faa:	d8 01       	movw	r26, r16
     fac:	14 96       	adiw	r26, 0x04	; 4
     fae:	4d 91       	ld	r20, X+
     fb0:	5c 91       	ld	r21, X
     fb2:	15 97       	sbiw	r26, 0x05	; 5
     fb4:	b8 01       	movw	r22, r16
     fb6:	6a 5f       	subi	r22, 0xFA	; 250
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <memcpy>

	// If this was the only object, empty the queue
	if (header->next == 0)
     fbe:	d8 01       	movw	r26, r16
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	13 97       	sbiw	r26, 0x03	; 3
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	49 f4       	brne	.+18     	; 0xfde <queue_dequeue+0x6a>
	{
		r->head = 0;
     fcc:	1d 82       	std	Y+5, r1	; 0x05
     fce:	1c 82       	std	Y+4, r1	; 0x04
		r->tail = 0;
     fd0:	1f 82       	std	Y+7, r1	; 0x07
     fd2:	1e 82       	std	Y+6, r1	; 0x06
		r->count = 0;
     fd4:	1b 82       	std	Y+3, r1	; 0x03
     fd6:	1a 82       	std	Y+2, r1	; 0x02
		r->data_usage = 0;
     fd8:	19 86       	std	Y+9, r1	; 0x09
     fda:	18 86       	std	Y+8, r1	; 0x08
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <queue_dequeue+0x92>
	}
	else
	{
		// Ring still has objects, so set the new head and adjust the count
		r->head = header->next;
     fde:	fd 83       	std	Y+5, r31	; 0x05
     fe0:	ec 83       	std	Y+4, r30	; 0x04
		r->count--;
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	9b 83       	std	Y+3, r25	; 0x03
     fea:	8a 83       	std	Y+2, r24	; 0x02
		r->data_usage -= header->length;
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	99 85       	ldd	r25, Y+9	; 0x09
     ff0:	d8 01       	movw	r26, r16
     ff2:	14 96       	adiw	r26, 0x04	; 4
     ff4:	2d 91       	ld	r18, X+
     ff6:	3c 91       	ld	r19, X
     ff8:	15 97       	sbiw	r26, 0x05	; 5
     ffa:	82 1b       	sub	r24, r18
     ffc:	93 0b       	sbc	r25, r19
     ffe:	99 87       	std	Y+9, r25	; 0x09
    1000:	88 87       	std	Y+8, r24	; 0x08
		((queue_header_t*)r->head)->prev = 0;
    1002:	11 82       	std	Z+1, r1	; 0x01
    1004:	10 82       	st	Z, r1
	}
	r->memory_usage = MEMORY_CALC(r);
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	9c 01       	movw	r18, r24
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	28 85       	ldd	r18, Y+8	; 0x08
    1022:	39 85       	ldd	r19, Y+9	; 0x09
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	9b 87       	std	Y+11, r25	; 0x0b
    102a:	8a 87       	std	Y+10, r24	; 0x0a

	// Finally, free the memory
	free((void*) header);
    102c:	c8 01       	movw	r24, r16
    102e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <free>

	return QUEUE_SUCCESS;
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	03 c0       	rjmp	.+6      	; 0x103c <queue_dequeue+0xc8>
queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	01 c0       	rjmp	.+2      	; 0x103c <queue_dequeue+0xc8>
	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
	if (dest == 0) return QUEUE_NO_MEMORY;
    103a:	81 e0       	ldi	r24, 0x01	; 1

	// Finally, free the memory
	free((void*) header);

	return QUEUE_SUCCESS;
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <queue_find>:

queue_results_t queue_find(queue_t * q, void * src, uint16_t length, queue_header_t ** dest)
{
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	8b 01       	movw	r16, r22
    105c:	7a 01       	movw	r14, r20
    105e:	69 01       	movw	r12, r18
	queue_header_t * h;
	uint8_t comp = 0;

	if (q->count == 0)
    1060:	fc 01       	movw	r30, r24
    1062:	22 81       	ldd	r18, Z+2	; 0x02
    1064:	33 81       	ldd	r19, Z+3	; 0x03
    1066:	23 2b       	or	r18, r19
    1068:	29 f4       	brne	.+10     	; 0x1074 <queue_find+0x2a>
	{
		*dest = 0;
    106a:	f6 01       	movw	r30, r12
    106c:	11 82       	std	Z+1, r1	; 0x01
    106e:	10 82       	st	Z, r1
		return QUEUE_EMPTY;
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <queue_find+0x60>
	}

	h = q->head;
    1074:	fc 01       	movw	r30, r24
    1076:	c4 81       	ldd	r28, Z+4	; 0x04
    1078:	d5 81       	ldd	r29, Z+5	; 0x05
	while (h)
    107a:	20 97       	sbiw	r28, 0x00	; 0
    107c:	99 f0       	breq	.+38     	; 0x10a4 <queue_find+0x5a>
	{
		comp = memcmp(QUEUE_DATA(h), src, length);
    107e:	a7 01       	movw	r20, r14
    1080:	b8 01       	movw	r22, r16
    1082:	ce 01       	movw	r24, r28
    1084:	06 96       	adiw	r24, 0x06	; 6
    1086:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <memcmp>
		if (comp == 0)
    108a:	81 11       	cpse	r24, r1
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <queue_find+0x4e>
		{
			*dest = h;
    108e:	f6 01       	movw	r30, r12
    1090:	d1 83       	std	Z+1, r29	; 0x01
    1092:	c0 83       	st	Z, r28
			return QUEUE_SUCCESS;
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <queue_find+0x60>
		}
		h = h->next;
    1098:	0a 80       	ldd	r0, Y+2	; 0x02
    109a:	db 81       	ldd	r29, Y+3	; 0x03
    109c:	c0 2d       	mov	r28, r0
		*dest = 0;
		return QUEUE_EMPTY;
	}

	h = q->head;
	while (h)
    109e:	20 97       	sbiw	r28, 0x00	; 0
    10a0:	71 f7       	brne	.-36     	; 0x107e <queue_find+0x34>
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <queue_find+0x5e>
		}
		h = h->next;
	}

	// If we got here, it wasn't found
	return QUEUE_NOT_FOUND;
    10a4:	84 e0       	ldi	r24, 0x04	; 4
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <queue_find+0x60>
    10a8:	84 e0       	ldi	r24, 0x04	; 4
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	08 95       	ret

000010bc <queue_remove>:

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	ec 01       	movw	r28, r24
    10c2:	fb 01       	movw	r30, r22
	if (q->count == 0)
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	09 f4       	brne	.+2      	; 0x10ce <queue_remove+0x12>
    10cc:	47 c0       	rjmp	.+142    	; 0x115c <queue_remove+0xa0>
	{
		return QUEUE_EMPTY;
	}
	else if (q->count == 1)
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	41 f4       	brne	.+16     	; 0x10e2 <queue_remove+0x26>
	{
		free((void*)x);
    10d2:	cb 01       	movw	r24, r22
    10d4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <free>
		queue_reset(q);
    10d8:	ce 01       	movw	r24, r28
    10da:	0e 94 37 07 	call	0xe6e	; 0xe6e <queue_reset>
		return QUEUE_SUCCESS;
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	3e c0       	rjmp	.+124    	; 0x115e <queue_remove+0xa2>
	}
	else
	{
		if ((queue_header_t *)(x->prev))
    10e2:	a0 81       	ld	r26, Z
    10e4:	b1 81       	ldd	r27, Z+1	; 0x01
    10e6:	10 97       	sbiw	r26, 0x00	; 0
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <queue_remove+0x3c>
			((queue_header_t *)(x->prev))->next = x->next;
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	13 96       	adiw	r26, 0x03	; 3
    10f0:	9c 93       	st	X, r25
    10f2:	8e 93       	st	-X, r24
    10f4:	12 97       	sbiw	r26, 0x02	; 2
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <queue_remove+0x44>
		else
			q->head = x->next;
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	9d 83       	std	Y+5, r25	; 0x05
    10fe:	8c 83       	std	Y+4, r24	; 0x04

		if ((queue_header_t *)(x->next))
    1100:	a2 81       	ldd	r26, Z+2	; 0x02
    1102:	b3 81       	ldd	r27, Z+3	; 0x03
    1104:	10 97       	sbiw	r26, 0x00	; 0
    1106:	29 f0       	breq	.+10     	; 0x1112 <queue_remove+0x56>
			((queue_header_t *)(x->next))->prev = x->prev;
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	8d 93       	st	X+, r24
    110e:	9c 93       	st	X, r25
    1110:	04 c0       	rjmp	.+8      	; 0x111a <queue_remove+0x5e>
		else
			q->tail = x->prev;
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	9f 83       	std	Y+7, r25	; 0x07
    1118:	8e 83       	std	Y+6, r24	; 0x06

		q->count--;
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9b 83       	std	Y+3, r25	; 0x03
    1122:	8a 83       	std	Y+2, r24	; 0x02
		q->data_usage -= x->length;
    1124:	28 85       	ldd	r18, Y+8	; 0x08
    1126:	39 85       	ldd	r19, Y+9	; 0x09
    1128:	44 81       	ldd	r20, Z+4	; 0x04
    112a:	55 81       	ldd	r21, Z+5	; 0x05
    112c:	24 1b       	sub	r18, r20
    112e:	35 0b       	sbc	r19, r21
    1130:	39 87       	std	Y+9, r19	; 0x09
    1132:	28 87       	std	Y+8, r18	; 0x08
		q->memory_usage = MEMORY_CALC(q);
    1134:	ac 01       	movw	r20, r24
    1136:	44 0f       	add	r20, r20
    1138:	55 1f       	adc	r21, r21
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	84 0f       	add	r24, r20
    1148:	95 1f       	adc	r25, r21
    114a:	28 0f       	add	r18, r24
    114c:	39 1f       	adc	r19, r25
    114e:	3b 87       	std	Y+11, r19	; 0x0b
    1150:	2a 87       	std	Y+10, r18	; 0x0a
		free((void*)x);
    1152:	cf 01       	movw	r24, r30
    1154:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <free>
		return QUEUE_SUCCESS;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	01 c0       	rjmp	.+2      	; 0x115e <queue_remove+0xa2>

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
	if (q->count == 0)
	{
		return QUEUE_EMPTY;
    115c:	83 e0       	ldi	r24, 0x03	; 3
		q->data_usage -= x->length;
		q->memory_usage = MEMORY_CALC(q);
		free((void*)x);
		return QUEUE_SUCCESS;
	}
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <queue_peek_length>:

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    1164:	dc 01       	movw	r26, r24
    1166:	14 96       	adiw	r26, 0x04	; 4
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	15 97       	sbiw	r26, 0x05	; 5
    116e:	30 97       	sbiw	r30, 0x00	; 0
    1170:	39 f0       	breq	.+14     	; 0x1180 <queue_peek_length+0x1c>
	*length = ((queue_header_t *)r->head)->length;
    1172:	84 81       	ldd	r24, Z+4	; 0x04
    1174:	95 81       	ldd	r25, Z+5	; 0x05
    1176:	fb 01       	movw	r30, r22
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
	return QUEUE_SUCCESS;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	08 95       	ret
	}
}

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    1180:	83 e0       	ldi	r24, 0x03	; 3
	*length = ((queue_header_t *)r->head)->length;
	return QUEUE_SUCCESS;
}
    1182:	08 95       	ret

00001184 <queue_clear>:

queue_results_t queue_clear(queue_t * r)
{
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	8c 01       	movw	r16, r24
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
    118e:	fc 01       	movw	r30, r24
    1190:	84 81       	ldd	r24, Z+4	; 0x04
    1192:	95 81       	ldd	r25, Z+5	; 0x05
	while (obj)
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	49 f0       	breq	.+18     	; 0x11aa <queue_clear+0x26>
	{
		next = obj->next;
    1198:	fc 01       	movw	r30, r24
    119a:	c2 81       	ldd	r28, Z+2	; 0x02
    119c:	d3 81       	ldd	r29, Z+3	; 0x03
		free((void *)obj);
    119e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <free>
{
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
	while (obj)
    11a2:	20 97       	sbiw	r28, 0x00	; 0
    11a4:	11 f0       	breq	.+4      	; 0x11aa <queue_clear+0x26>
	{
		next = obj->next;
		free((void *)obj);
		obj = next;
    11a6:	ce 01       	movw	r24, r28
    11a8:	f7 cf       	rjmp	.-18     	; 0x1198 <queue_clear+0x14>
	}

	queue_reset(r);
    11aa:	c8 01       	movw	r24, r16
    11ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <queue_reset>

	return QUEUE_SUCCESS;
}
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <eeprom_read>:
#include "eeprom.h"


uint8_t eeprom_read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
    11bc:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__eerd_byte_m1284p>
}
    11c0:	08 95       	ret

000011c2 <eeprom_write>:

void eeprom_write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
    11c2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__eewr_byte_m1284p>
    11c6:	08 95       	ret

000011c8 <btle_set_cts>:
}

void btle_set_cts()
{
	//pd5 low
	PORTD &= ~_BV(PD5);
    11c8:	5d 98       	cbi	0x0b, 5	; 11
    11ca:	08 95       	ret

000011cc <btle_init>:

void btle_init()
{
	//btle_usart_init();
	// set portd bit 5 as output
	DDRD |= _BV(PD5);
    11cc:	55 9a       	sbi	0x0a, 5	; 10
	// set portd bit 4 as input
	DDRD &= ~_BV(PD4);
    11ce:	54 98       	cbi	0x0a, 4	; 10

	btle_driver_init();
    11d0:	0e 94 16 09 	call	0x122c	; 0x122c <btle_driver_init>
	btle_set_cts();
    11d4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <btle_set_cts>
    11d8:	08 95       	ret

000011da <btle_get_rts>:
}

uint8_t btle_get_rts()
{
	// return logic high or low
	return (PIND & _BV(PD4));
    11da:	89 b1       	in	r24, 0x09	; 9
}
    11dc:	80 71       	andi	r24, 0x10	; 16
    11de:	08 95       	ret

000011e0 <btle_tick>:

void btle_tick()
{
	btle_driver_tick();
    11e0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <btle_driver_tick>
#ifdef BYPASSS_MODE
#else
	ramdisk_clean_tick();
    11e4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <ramdisk_clean_tick>
    11e8:	08 95       	ret

000011ea <btle_enqueue>:
}

queue_results_t btle_enqueue(btle_msg_t *msg)
{
	//queue_results_t result = queue_enqueue(&btle_queue, &msg, sizeof(btle_msg_t));
	queue_results_t result = queue_enqueue(&btle_queue, msg,
    11ea:	45 e1       	ldi	r20, 0x15	; 21
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	bc 01       	movw	r22, r24
    11f0:	8a ee       	ldi	r24, 0xEA	; 234
    11f2:	9a e0       	ldi	r25, 0x0A	; 10
    11f4:	0e 94 49 07 	call	0xe92	; 0xe92 <queue_enqueue>
			sizeof(btle_msg_t));

	return result;
}
    11f8:	08 95       	ret

000011fa <btle_parse_nybble>:

}

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
    11fa:	9f eb       	ldi	r25, 0xBF	; 191
    11fc:	98 0f       	add	r25, r24
    11fe:	96 30       	cpi	r25, 0x06	; 6
    1200:	08 f4       	brcc	.+2      	; 0x1204 <btle_parse_nybble+0xa>
		c = c | 0x20;
    1202:	80 62       	ori	r24, 0x20	; 32
	for (uint8_t i = 0; i < 16; i++)
	{
		if (HEX_DIGITS[i] == c)
    1204:	90 91 17 01 	lds	r25, 0x0117
    1208:	98 17       	cp	r25, r24
    120a:	51 f0       	breq	.+20     	; 0x1220 <btle_parse_nybble+0x26>
    120c:	e8 e1       	ldi	r30, 0x18	; 24
    120e:	f1 e0       	ldi	r31, 0x01	; 1

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    1210:	91 e0       	ldi	r25, 0x01	; 1
	{
		if (HEX_DIGITS[i] == c)
    1212:	21 91       	ld	r18, Z+
    1214:	28 17       	cp	r18, r24
    1216:	31 f0       	breq	.+12     	; 0x1224 <btle_parse_nybble+0x2a>

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	90 31       	cpi	r25, 0x10	; 16
    121c:	d1 f7       	brne	.-12     	; 0x1212 <btle_parse_nybble+0x18>
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <btle_parse_nybble+0x2e>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	08 95       	ret
    1224:	89 2f       	mov	r24, r25
    1226:	08 95       	ret
	{
		if (HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
    1228:	80 e8       	ldi	r24, 0x80	; 128
}
    122a:	08 95       	ret

0000122c <btle_driver_init>:

static btle_msg_t *next_msg = NULL;

void btle_driver_init()
{
	queue_init(&btle_queue, MSG_QUEUE_SIZE);
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e2       	ldi	r23, 0x20	; 32
    1230:	8a ee       	ldi	r24, 0xEA	; 234
    1232:	9a e0       	ldi	r25, 0x0A	; 10
    1234:	0e 94 43 07 	call	0xe86	; 0xe86 <queue_init>
	queue_init(&packet_queue, MSG_QUEUE_SIZE);
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e2       	ldi	r23, 0x20	; 32
    123c:	8e ed       	ldi	r24, 0xDE	; 222
    123e:	9a e0       	ldi	r25, 0x0A	; 10
    1240:	0e 94 43 07 	call	0xe86	; 0xe86 <queue_init>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    1244:	10 92 a9 09 	sts	0x09A9, r1
    1248:	10 92 a8 09 	sts	0x09A8, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    124c:	81 e8       	ldi	r24, 0x81	; 129
    124e:	e7 e7       	ldi	r30, 0x77	; 119
    1250:	fb e0       	ldi	r31, 0x0B	; 11
    1252:	df 01       	movw	r26, r30
    1254:	98 2f       	mov	r25, r24
    1256:	1d 92       	st	X+, r1
    1258:	9a 95       	dec	r25
    125a:	e9 f7       	brne	.-6      	; 0x1256 <btle_driver_init+0x2a>
}

static void init_lines()
{
	memset(btle_lines, '\0', sizeof(btle_lines));
    125c:	e6 ef       	ldi	r30, 0xF6	; 246
    125e:	fa e0       	ldi	r31, 0x0A	; 10
    1260:	df 01       	movw	r26, r30
    1262:	1d 92       	st	X+, r1
    1264:	8a 95       	dec	r24
    1266:	e9 f7       	brne	.-6      	; 0x1262 <btle_driver_init+0x36>
    1268:	08 95       	ret

0000126a <enqueue_packet>:
		}
	}
}

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	8b 01       	movw	r16, r22
	msg->type = msg_type;
    1274:	fb 01       	movw	r30, r22
    1276:	84 8b       	std	Z+20, r24	; 0x14
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
    1280:	f8 01       	movw	r30, r16
    1282:	e8 0f       	add	r30, r24
    1284:	f9 1f       	adc	r31, r25
    1286:	80 81       	ld	r24, Z
    1288:	0e 94 f5 06 	call	0xdea	; 0xdea <circular_queue_put_char>

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
	msg->type = msg_type;
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    128c:	21 96       	adiw	r28, 0x01	; 1
    128e:	ce 01       	movw	r24, r28
    1290:	c5 31       	cpi	r28, 0x15	; 21
    1292:	d1 05       	cpc	r29, r1
    1294:	a9 f7       	brne	.-22     	; 0x1280 <enqueue_packet+0x16>
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	08 95       	ret

000012a0 <btle_driver_tick>:
	init_buffer();
	init_lines();
}

void btle_driver_tick()
{
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	e6 97       	sbiw	r28, 0x36	; 54
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61

	if (btle_usart_data_available())
    12ca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <btle_usart_data_available>
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <btle_driver_tick+0x34>
    12d2:	3a c1       	rjmp	.+628    	; 0x1548 <btle_driver_tick+0x2a8>

// check to see if we have a new line
bool handle_data()
{

	char c = btle_usart_data_read();
    12d4:	0e 94 03 04 	call	0x806	; 0x806 <btle_usart_data_read>

	// ignore null terminated strings
	if (c == '\0')
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de <btle_driver_tick+0x3e>
    12dc:	35 c1       	rjmp	.+618    	; 0x1548 <btle_driver_tick+0x2a8>
		return false;
	// prevent buffer overrun
	if (btle_line_index >= BTLE_MAX_CHARS)
    12de:	20 91 a8 09 	lds	r18, 0x09A8
    12e2:	30 91 a9 09 	lds	r19, 0x09A9
    12e6:	20 38       	cpi	r18, 0x80	; 128
    12e8:	31 05       	cpc	r19, r1
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <btle_driver_tick+0x4e>
    12ec:	2d c1       	rjmp	.+602    	; 0x1548 <btle_driver_tick+0x2a8>
		return false;

	// store character in btle_line_buffer
	btle_line_buffer[btle_line_index] = c;
    12ee:	f9 01       	movw	r30, r18
    12f0:	e9 58       	subi	r30, 0x89	; 137
    12f2:	f4 4f       	sbci	r31, 0xF4	; 244
    12f4:	80 83       	st	Z, r24
	btle_line_index++;
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	30 93 a9 09 	sts	0x09A9, r19
    12fe:	20 93 a8 09 	sts	0x09A8, r18

	// check for end of line
	if (c == BTLE_TKEND[0])
    1302:	8a 30       	cpi	r24, 0x0A	; 10
    1304:	09 f0       	breq	.+2      	; 0x1308 <btle_driver_tick+0x68>
    1306:	20 c1       	rjmp	.+576    	; 0x1548 <btle_driver_tick+0x2a8>
	{
		// copy new message into buffer
		strcpy(btle_lines, btle_line_buffer);
    1308:	67 e7       	ldi	r22, 0x77	; 119
    130a:	7b e0       	ldi	r23, 0x0B	; 11
    130c:	86 ef       	ldi	r24, 0xF6	; 246
    130e:	9a e0       	ldi	r25, 0x0A	; 10
    1310:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <strcpy>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    1314:	10 92 a9 09 	sts	0x09A9, r1
    1318:	10 92 a8 09 	sts	0x09A8, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    131c:	81 e8       	ldi	r24, 0x81	; 129
    131e:	e7 e7       	ldi	r30, 0x77	; 119
    1320:	fb e0       	ldi	r31, 0x0B	; 11
    1322:	df 01       	movw	r26, r30
    1324:	1d 92       	st	X+, r1
    1326:	8a 95       	dec	r24
    1328:	e9 f7       	brne	.-6      	; 0x1324 <btle_driver_tick+0x84>
}

static uint8_t parse_data(const char *token, char **out)
{
	char* ptr = NULL;
	if ((ptr = strstr(btle_lines, token)))
    132a:	6a e2       	ldi	r22, 0x2A	; 42
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	86 ef       	ldi	r24, 0xF6	; 246
    1330:	9a e0       	ldi	r25, 0x0A	; 10
    1332:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <strchr>
    1336:	8c 01       	movw	r16, r24
		{

			char *ptr = NULL;
			// handle the new line

			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND)
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	09 f4       	brne	.+2      	; 0x133e <btle_driver_tick+0x9e>
    133c:	05 c1       	rjmp	.+522    	; 0x1548 <btle_driver_tick+0x2a8>

btle_msg_t btle_handle_le_packet(char * buffer)
{
	btle_msg_t btle_msg;

	memset(&btle_msg, 0, sizeof(btle_msg_t));
    133e:	fe 01       	movw	r30, r28
    1340:	31 96       	adiw	r30, 0x01	; 1
    1342:	85 e1       	ldi	r24, 0x15	; 21
    1344:	df 01       	movw	r26, r30
    1346:	1d 92       	st	X+, r1
    1348:	8a 95       	dec	r24
    134a:	e9 f7       	brne	.-6      	; 0x1346 <btle_driver_tick+0xa6>
	uint64_t mac;
	int i;

	// Validate checksum in bytes 27-28
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
    134c:	f8 01       	movw	r30, r16
    134e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1350:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    1354:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[28]);
    1356:	d8 01       	movw	r26, r16
    1358:	5c 96       	adiw	r26, 0x1c	; 28
    135a:	8c 91       	ld	r24, X
    135c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	ck = (msb << 4) | lsb;
    1360:	b0 e1       	ldi	r27, 0x10	; 16
    1362:	fb 9e       	mul	r15, r27
    1364:	90 01       	movw	r18, r0
    1366:	11 24       	eor	r1, r1
    1368:	82 2b       	or	r24, r18
    136a:	f8 01       	movw	r30, r16
	ckx = 0;
    136c:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i <= 26; i++)
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
		ckx ^= buffer[i];
    1372:	41 91       	ld	r20, Z+
    1374:	94 27       	eor	r25, r20
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
	lsb = btle_parse_nybble(buffer[28]);
	ck = (msb << 4) | lsb;
	ckx = 0;
	for (i = 0; i <= 26; i++)
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	2b 31       	cpi	r18, 0x1B	; 27
    137c:	31 05       	cpc	r19, r1
    137e:	c9 f7       	brne	.-14     	; 0x1372 <btle_driver_tick+0xd2>
		ckx ^= buffer[i];
	if (ck != ckx)
    1380:	89 17       	cp	r24, r25
    1382:	51 f0       	breq	.+20     	; 0x1398 <btle_driver_tick+0xf8>
	{
		return btle_msg;
    1384:	85 e1       	ldi	r24, 0x15	; 21
    1386:	fe 01       	movw	r30, r28
    1388:	31 96       	adiw	r30, 0x01	; 1
    138a:	de 01       	movw	r26, r28
    138c:	56 96       	adiw	r26, 0x16	; 22
    138e:	01 90       	ld	r0, Z+
    1390:	0d 92       	st	X+, r0
    1392:	8a 95       	dec	r24
    1394:	e1 f7       	brne	.-8      	; 0x138e <btle_driver_tick+0xee>
    1396:	d2 c0       	rjmp	.+420    	; 0x153c <btle_driver_tick+0x29c>
	}

	// MAC address - incoming 48bits
	//
	num = (uint8_t *) &mac;
	num[7] = 0;
    1398:	1a aa       	std	Y+50, r1	; 0x32
	num[6] = 0;
    139a:	19 aa       	std	Y+49, r1	; 0x31
	msb = btle_parse_nybble(buffer[1]);
    139c:	f8 01       	movw	r30, r16
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    13a4:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[2]);
    13a6:	d8 01       	movw	r26, r16
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8c 91       	ld	r24, X
    13ac:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[5] = (msb << 4) | lsb;
    13b0:	b0 e1       	ldi	r27, 0x10	; 16
    13b2:	fb 9e       	mul	r15, r27
    13b4:	90 01       	movw	r18, r0
    13b6:	11 24       	eor	r1, r1
    13b8:	f8 2e       	mov	r15, r24
    13ba:	f2 2a       	or	r15, r18
    13bc:	f8 aa       	std	Y+48, r15	; 0x30
	msb = btle_parse_nybble(buffer[3]);
    13be:	f8 01       	movw	r30, r16
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    13c6:	e8 2e       	mov	r14, r24
	lsb = btle_parse_nybble(buffer[4]);
    13c8:	d8 01       	movw	r26, r16
    13ca:	14 96       	adiw	r26, 0x04	; 4
    13cc:	8c 91       	ld	r24, X
    13ce:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[4] = (msb << 4) | lsb;
    13d2:	b0 e1       	ldi	r27, 0x10	; 16
    13d4:	eb 9e       	mul	r14, r27
    13d6:	90 01       	movw	r18, r0
    13d8:	11 24       	eor	r1, r1
    13da:	e8 2e       	mov	r14, r24
    13dc:	e2 2a       	or	r14, r18
    13de:	ef a6       	std	Y+47, r14	; 0x2f
	msb = btle_parse_nybble(buffer[5]);
    13e0:	f8 01       	movw	r30, r16
    13e2:	85 81       	ldd	r24, Z+5	; 0x05
    13e4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    13e8:	d8 2e       	mov	r13, r24
	lsb = btle_parse_nybble(buffer[6]);
    13ea:	d8 01       	movw	r26, r16
    13ec:	16 96       	adiw	r26, 0x06	; 6
    13ee:	8c 91       	ld	r24, X
    13f0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[3] = (msb << 4) | lsb;
    13f4:	b0 e1       	ldi	r27, 0x10	; 16
    13f6:	db 9e       	mul	r13, r27
    13f8:	90 01       	movw	r18, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	d8 2e       	mov	r13, r24
    13fe:	d2 2a       	or	r13, r18
    1400:	de a6       	std	Y+46, r13	; 0x2e
	msb = btle_parse_nybble(buffer[7]);
    1402:	f8 01       	movw	r30, r16
    1404:	87 81       	ldd	r24, Z+7	; 0x07
    1406:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    140a:	c8 2e       	mov	r12, r24
	lsb = btle_parse_nybble(buffer[8]);
    140c:	d8 01       	movw	r26, r16
    140e:	18 96       	adiw	r26, 0x08	; 8
    1410:	8c 91       	ld	r24, X
    1412:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[2] = (msb << 4) | lsb;
    1416:	b0 e1       	ldi	r27, 0x10	; 16
    1418:	cb 9e       	mul	r12, r27
    141a:	90 01       	movw	r18, r0
    141c:	11 24       	eor	r1, r1
    141e:	c8 2e       	mov	r12, r24
    1420:	c2 2a       	or	r12, r18
    1422:	cd a6       	std	Y+45, r12	; 0x2d
	msb = btle_parse_nybble(buffer[9]);
    1424:	f8 01       	movw	r30, r16
    1426:	81 85       	ldd	r24, Z+9	; 0x09
    1428:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    142c:	b8 2e       	mov	r11, r24
	lsb = btle_parse_nybble(buffer[10]);
    142e:	d8 01       	movw	r26, r16
    1430:	1a 96       	adiw	r26, 0x0a	; 10
    1432:	8c 91       	ld	r24, X
    1434:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    1438:	b0 e1       	ldi	r27, 0x10	; 16
    143a:	bb 9e       	mul	r11, r27
    143c:	90 01       	movw	r18, r0
    143e:	11 24       	eor	r1, r1
    1440:	b8 2e       	mov	r11, r24
    1442:	b2 2a       	or	r11, r18
    1444:	bc a6       	std	Y+44, r11	; 0x2c
	msb = btle_parse_nybble(buffer[11]);
    1446:	f8 01       	movw	r30, r16
    1448:	83 85       	ldd	r24, Z+11	; 0x0b
    144a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    144e:	a8 2e       	mov	r10, r24
	lsb = btle_parse_nybble(buffer[12]);
    1450:	d8 01       	movw	r26, r16
    1452:	1c 96       	adiw	r26, 0x0c	; 12
    1454:	8c 91       	ld	r24, X
    1456:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    145a:	b0 e1       	ldi	r27, 0x10	; 16
    145c:	ab 9e       	mul	r10, r27
    145e:	90 01       	movw	r18, r0
    1460:	11 24       	eor	r1, r1
    1462:	a8 2e       	mov	r10, r24
    1464:	a2 2a       	or	r10, r18
    1466:	ab a6       	std	Y+43, r10	; 0x2b

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
    1468:	f8 01       	movw	r30, r16
    146a:	86 85       	ldd	r24, Z+14	; 0x0e
    146c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    1470:	88 2e       	mov	r8, r24
	lsb = btle_parse_nybble(buffer[15]);
    1472:	d8 01       	movw	r26, r16
    1474:	1f 96       	adiw	r26, 0x0f	; 15
    1476:	8c 91       	ld	r24, X
    1478:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    147c:	98 2e       	mov	r9, r24
	rssi = (msb << 4) | lsb;

	// Temperature
	//
	num = (uint8_t *) &temp;
	msb = btle_parse_nybble(buffer[17]);
    147e:	f8 01       	movw	r30, r16
    1480:	81 89       	ldd	r24, Z+17	; 0x11
    1482:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    1486:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[18]);
    1488:	d8 01       	movw	r26, r16
    148a:	52 96       	adiw	r26, 0x12	; 18
    148c:	8c 91       	ld	r24, X
    148e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    1492:	b0 e1       	ldi	r27, 0x10	; 16
    1494:	7b 9e       	mul	r7, r27
    1496:	90 01       	movw	r18, r0
    1498:	11 24       	eor	r1, r1
    149a:	82 2b       	or	r24, r18
    149c:	8b ab       	std	Y+51, r24	; 0x33
	msb = btle_parse_nybble(buffer[19]);
    149e:	f8 01       	movw	r30, r16
    14a0:	83 89       	ldd	r24, Z+19	; 0x13
    14a2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    14a6:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[20]);
    14a8:	d8 01       	movw	r26, r16
    14aa:	54 96       	adiw	r26, 0x14	; 20
    14ac:	8c 91       	ld	r24, X
    14ae:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    14b2:	b0 e1       	ldi	r27, 0x10	; 16
    14b4:	7b 9e       	mul	r7, r27
    14b6:	90 01       	movw	r18, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	82 2b       	or	r24, r18
    14bc:	8c ab       	std	Y+52, r24	; 0x34

	// Battery
	//
	num = (uint8_t *) &batt;
	msb = btle_parse_nybble(buffer[22]);
    14be:	f8 01       	movw	r30, r16
    14c0:	86 89       	ldd	r24, Z+22	; 0x16
    14c2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    14c6:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[23]);
    14c8:	d8 01       	movw	r26, r16
    14ca:	57 96       	adiw	r26, 0x17	; 23
    14cc:	8c 91       	ld	r24, X
    14ce:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    14d2:	b0 e1       	ldi	r27, 0x10	; 16
    14d4:	7b 9e       	mul	r7, r27
    14d6:	90 01       	movw	r18, r0
    14d8:	11 24       	eor	r1, r1
    14da:	82 2b       	or	r24, r18
    14dc:	8d ab       	std	Y+53, r24	; 0x35
	msb = btle_parse_nybble(buffer[24]);
    14de:	f8 01       	movw	r30, r16
    14e0:	80 8d       	ldd	r24, Z+24	; 0x18
    14e2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
    14e6:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[25]);
    14e8:	d8 01       	movw	r26, r16
    14ea:	59 96       	adiw	r26, 0x19	; 25
    14ec:	8c 91       	ld	r24, X
    14ee:	0e 94 fd 08 	call	0x11fa	; 0x11fa <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    14f2:	b0 e1       	ldi	r27, 0x10	; 16
    14f4:	7b 9e       	mul	r7, r27
    14f6:	90 01       	movw	r18, r0
    14f8:	11 24       	eor	r1, r1
    14fa:	82 2b       	or	r24, r18
    14fc:	8e ab       	std	Y+54, r24	; 0x36

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
	lsb = btle_parse_nybble(buffer[15]);
	rssi = (msb << 4) | lsb;
    14fe:	e0 e1       	ldi	r30, 0x10	; 16
    1500:	8e 9e       	mul	r8, r30
    1502:	c0 01       	movw	r24, r0
    1504:	11 24       	eor	r1, r1
    1506:	89 29       	or	r24, r9
	num[0] = (msb << 4) | lsb;
	msb = btle_parse_nybble(buffer[24]);
	lsb = btle_parse_nybble(buffer[25]);
	num[1] = (msb << 4) | lsb;

	btle_msg.rssi = rssi;
    1508:	89 83       	std	Y+1, r24	; 0x01
	btle_msg.mac = mac;
    150a:	aa 82       	std	Y+2, r10	; 0x02
    150c:	bb 82       	std	Y+3, r11	; 0x03
    150e:	cc 82       	std	Y+4, r12	; 0x04
    1510:	dd 82       	std	Y+5, r13	; 0x05
    1512:	ee 82       	std	Y+6, r14	; 0x06
    1514:	ff 82       	std	Y+7, r15	; 0x07
    1516:	18 86       	std	Y+8, r1	; 0x08
    1518:	19 86       	std	Y+9, r1	; 0x09
	btle_msg.batt = batt;
    151a:	8d a9       	ldd	r24, Y+53	; 0x35
    151c:	9e a9       	ldd	r25, Y+54	; 0x36
    151e:	9b 87       	std	Y+11, r25	; 0x0b
    1520:	8a 87       	std	Y+10, r24	; 0x0a
	btle_msg.temp = temp;
    1522:	8b a9       	ldd	r24, Y+51	; 0x33
    1524:	9c a9       	ldd	r25, Y+52	; 0x34
    1526:	9d 87       	std	Y+13, r25	; 0x0d
    1528:	8c 87       	std	Y+12, r24	; 0x0c

	return btle_msg;
    152a:	85 e1       	ldi	r24, 0x15	; 21
    152c:	fe 01       	movw	r30, r28
    152e:	31 96       	adiw	r30, 0x01	; 1
    1530:	de 01       	movw	r26, r28
    1532:	56 96       	adiw	r26, 0x16	; 22
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	8a 95       	dec	r24
    153a:	e1 f7       	brne	.-8      	; 0x1534 <btle_driver_tick+0x294>
			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND)
			{
				btle_msg_t msg = btle_handle_le_packet(ptr);

#ifdef BYPASS_MODE
				enqueue_packet(MSG_TYPE_NORM, &msg);
    153c:	be 01       	movw	r22, r28
    153e:	6a 5e       	subi	r22, 0xEA	; 234
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	0e 94 35 09 	call	0x126a	; 0x126a <enqueue_packet>
				}
#endif
			}
		}
	}
}
    1548:	e6 96       	adiw	r28, 0x36	; 54
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	7f 90       	pop	r7
    156e:	08 95       	ret

00001570 <ramdisk_clean_tick>:
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}

void ramdisk_clean_tick()
{
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	btle_msg_t *msg;
	if (next_msg != NULL)
    1578:	c0 91 a6 09 	lds	r28, 0x09A6
    157c:	d0 91 a7 09 	lds	r29, 0x09A7
    1580:	20 97       	sbiw	r28, 0x00	; 0
    1582:	c1 f1       	breq	.+112    	; 0x15f4 <ramdisk_clean_tick+0x84>
	{
		msg = next_msg;
		next_msg = ramdisk_next(next_msg);
    1584:	ce 01       	movw	r24, r28
    1586:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ramdisk_next>
    158a:	90 93 a7 09 	sts	0x09A7, r25
    158e:	80 93 a6 09 	sts	0x09A6, r24
		if ((clock_time() - msg->last_sent) >= 10000)
    1592:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
    1596:	0f 85       	ldd	r16, Y+15	; 0x0f
    1598:	18 89       	ldd	r17, Y+16	; 0x10
    159a:	29 89       	ldd	r18, Y+17	; 0x11
    159c:	3a 89       	ldd	r19, Y+18	; 0x12
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	80 1b       	sub	r24, r16
    15a4:	91 0b       	sbc	r25, r17
    15a6:	a2 0b       	sbc	r26, r18
    15a8:	b3 0b       	sbc	r27, r19
    15aa:	80 31       	cpi	r24, 0x10	; 16
    15ac:	97 42       	sbci	r25, 0x27	; 39
    15ae:	a1 05       	cpc	r26, r1
    15b0:	b1 05       	cpc	r27, r1
    15b2:	40 f1       	brcs	.+80     	; 0x1604 <ramdisk_clean_tick+0x94>
		{
			//send "is out of prox packet"
			enqueue_packet(MSG_TYPE_OUT_PROX, msg);
    15b4:	be 01       	movw	r22, r28
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	0e 94 35 09 	call	0x126a	; 0x126a <enqueue_packet>
			// erase the packet
			ramdisk_erase(*msg);
    15bc:	8d b7       	in	r24, 0x3d	; 61
    15be:	9e b7       	in	r25, 0x3e	; 62
    15c0:	45 97       	sbiw	r24, 0x15	; 21
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	9e bf       	out	0x3e, r25	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	8d bf       	out	0x3d, r24	; 61
    15cc:	ad b7       	in	r26, 0x3d	; 61
    15ce:	be b7       	in	r27, 0x3e	; 62
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	85 e1       	ldi	r24, 0x15	; 21
    15d4:	fe 01       	movw	r30, r28
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	8a 95       	dec	r24
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <ramdisk_clean_tick+0x66>
    15de:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <ramdisk_erase>
    15e2:	8d b7       	in	r24, 0x3d	; 61
    15e4:	9e b7       	in	r25, 0x3e	; 62
    15e6:	45 96       	adiw	r24, 0x15	; 21
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	9e bf       	out	0x3e, r25	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	8d bf       	out	0x3d, r24	; 61
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <ramdisk_clean_tick+0x94>
		}

	}
	else
	{
		next_msg = ramdisk_next(NULL);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ramdisk_next>
    15fc:	90 93 a7 09 	sts	0x09A7, r25
    1600:	80 93 a6 09 	sts	0x09A6, r24
	}

}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	08 95       	ret

0000160e <encode_string>:

void encode_string(btle_msg_t * value);

#define DEBUG_OUTPUT "rssi=%d batt=%d temp=%d mac=%d \r\n\0"
void encode_string(btle_msg_t * value)
{
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	e2 97       	sbiw	r28, 0x32	; 50
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	fc 01       	movw	r30, r24
	char tmp[50];

	memset(tmp, '\0', 50);
    1628:	8e 01       	movw	r16, r28
    162a:	0f 5f       	subi	r16, 0xFF	; 255
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	82 e3       	ldi	r24, 0x32	; 50
    1630:	d8 01       	movw	r26, r16
    1632:	1d 92       	st	X+, r1
    1634:	8a 95       	dec	r24
    1636:	e9 f7       	brne	.-6      	; 0x1632 <encode_string+0x24>
	sprintf_P(tmp, PSTR(DEBUG_OUTPUT), value->rssi, value->batt, value->temp,
    1638:	80 85       	ldd	r24, Z+8	; 0x08
    163a:	8f 93       	push	r24
    163c:	87 81       	ldd	r24, Z+7	; 0x07
    163e:	8f 93       	push	r24
    1640:	86 81       	ldd	r24, Z+6	; 0x06
    1642:	8f 93       	push	r24
    1644:	85 81       	ldd	r24, Z+5	; 0x05
    1646:	8f 93       	push	r24
    1648:	84 81       	ldd	r24, Z+4	; 0x04
    164a:	8f 93       	push	r24
    164c:	83 81       	ldd	r24, Z+3	; 0x03
    164e:	8f 93       	push	r24
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	8f 93       	push	r24
    1654:	81 81       	ldd	r24, Z+1	; 0x01
    1656:	8f 93       	push	r24
    1658:	84 85       	ldd	r24, Z+12	; 0x0c
    165a:	8f 93       	push	r24
    165c:	83 85       	ldd	r24, Z+11	; 0x0b
    165e:	8f 93       	push	r24
    1660:	82 85       	ldd	r24, Z+10	; 0x0a
    1662:	8f 93       	push	r24
    1664:	81 85       	ldd	r24, Z+9	; 0x09
    1666:	8f 93       	push	r24
    1668:	80 81       	ld	r24, Z
    166a:	1f 92       	push	r1
    166c:	8f 93       	push	r24
    166e:	8d e9       	ldi	r24, 0x9D	; 157
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	1f 93       	push	r17
    1678:	0f 93       	push	r16
    167a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <sprintf_P>
			value->mac);
	//LOG("%s\r\n", tmp);
	wan_usart_transmit_string(tmp);
    167e:	c8 01       	movw	r24, r16
    1680:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <wan_usart_transmit_string>
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
}
    168e:	e2 96       	adiw	r28, 0x32	; 50
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <terminal_in_cb>:
bool timeout();
void set_timer(clock_time_t timeout);

void terminal_in_cb(uint8_t c)
{
	term_in = c;
    16a4:	80 93 b1 09 	sts	0x09B1, r24
    16a8:	08 95       	ret

000016aa <set_timer>:

	}
}

void set_timer(clock_time_t timeout)
{
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	6b 01       	movw	r12, r22
    16b4:	7c 01       	movw	r14, r24
	future = clock_time() + timeout;
    16b6:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
    16ba:	c6 0e       	add	r12, r22
    16bc:	d7 1e       	adc	r13, r23
    16be:	e8 1e       	adc	r14, r24
    16c0:	f9 1e       	adc	r15, r25
    16c2:	c0 92 ad 09 	sts	0x09AD, r12
    16c6:	d0 92 ae 09 	sts	0x09AE, r13
    16ca:	e0 92 af 09 	sts	0x09AF, r14
    16ce:	f0 92 b0 09 	sts	0x09B0, r15
}
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	08 95       	ret

000016dc <timeout>:

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
	bool timeout = false;

	if(clock_time() >= future)
    16e0:	0e 94 28 03 	call	0x650	; 0x650 <clock_time>
    16e4:	00 91 ad 09 	lds	r16, 0x09AD
    16e8:	10 91 ae 09 	lds	r17, 0x09AE
    16ec:	20 91 af 09 	lds	r18, 0x09AF
    16f0:	30 91 b0 09 	lds	r19, 0x09B0
    16f4:	60 17       	cp	r22, r16
    16f6:	71 07       	cpc	r23, r17
    16f8:	82 07       	cpc	r24, r18
    16fa:	93 07       	cpc	r25, r19
    16fc:	40 f0       	brcs	.+16     	; 0x170e <timeout+0x32>
	{
		set_timer(1000);
    16fe:	68 ee       	ldi	r22, 0xE8	; 232
    1700:	73 e0       	ldi	r23, 0x03	; 3
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 55 0b 	call	0x16aa	; 0x16aa <set_timer>
		timeout = true;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <timeout+0x34>

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
	bool timeout = false;
    170e:	80 e0       	ldi	r24, 0x00	; 0
		timeout = true;

	}

	return timeout;
}
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	08 95       	ret

00001716 <main>:

}

int main()
{
	DDRD |= _BV(PD6); // data direction bit
    1716:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= _BV(PD7); // green (D2) output
    1718:	57 9a       	sbi	0x0a, 7	; 10

	PORTD |= _BV(PD7); // set led green off
    171a:	5f 9a       	sbi	0x0b, 7	; 11

	DDRB &= _BV(PB0); // WAN_INT_01
    171c:	84 b1       	in	r24, 0x04	; 4
    171e:	81 70       	andi	r24, 0x01	; 1
    1720:	84 b9       	out	0x04, r24	; 4

	//debug_init(terminal_in_cb);
	btle_usart_init_cb(terminal_in_cb);
    1722:	82 e5       	ldi	r24, 0x52	; 82
    1724:	9b e0       	ldi	r25, 0x0B	; 11
    1726:	0e 94 c3 03 	call	0x786	; 0x786 <btle_usart_init_cb>

	clock_init();
    172a:	0e 94 1c 03 	call	0x638	; 0x638 <clock_init>
	config_init();
    172e:	0e 94 8a 03 	call	0x714	; 0x714 <config_init>
	ramdisk_init();
    1732:	0e 94 3a 05 	call	0xa74	; 0xa74 <ramdisk_init>
	/*
	 * load configuration
	 */

	// btle is on usart1
	btle_init();
    1736:	0e 94 e6 08 	call	0x11cc	; 0x11cc <btle_init>

	// wan is on usart0
	wan_init();
    173a:	0e 94 81 00 	call	0x102	; 0x102 <wan_init>


	sei();
    173e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	89 e6       	ldi	r24, 0x69	; 105
    1744:	98 e1       	ldi	r25, 0x18	; 24
    1746:	21 50       	subi	r18, 0x01	; 1
    1748:	80 40       	sbci	r24, 0x00	; 0
    174a:	90 40       	sbci	r25, 0x00	; 0
    174c:	e1 f7       	brne	.-8      	; 0x1746 <main+0x30>
    174e:	00 c0       	rjmp	.+0      	; 0x1750 <main+0x3a>
    1750:	00 00       	nop
		term_in = 0;

		if(timeout()){
			// just exercising timer
			set_timer(1000);
			PORTD ^= _BV(PD6);
    1752:	c0 e4       	ldi	r28, 0x40	; 64
	sei();

	_delay_ms(1000);

	while(true){
		btle_tick();
    1754:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <btle_tick>
		wan_tick();
    1758:	0e 94 fe 01 	call	0x3fc	; 0x3fc <wan_tick>

		if(term_in > 0)
    175c:	80 91 b1 09 	lds	r24, 0x09B1
		{
			//wan_usart_transmit((char*)term_in);
		}

		term_in = 0;
    1760:	10 92 b1 09 	sts	0x09B1, r1

		if(timeout()){
    1764:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <timeout>
    1768:	88 23       	and	r24, r24
    176a:	a1 f3       	breq	.-24     	; 0x1754 <main+0x3e>
			// just exercising timer
			set_timer(1000);
    176c:	68 ee       	ldi	r22, 0xE8	; 232
    176e:	73 e0       	ldi	r23, 0x03	; 3
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 55 0b 	call	0x16aa	; 0x16aa <set_timer>
			PORTD ^= _BV(PD6);
    1778:	8b b1       	in	r24, 0x0b	; 11
    177a:	8c 27       	eor	r24, r28
    177c:	8b b9       	out	0x0b, r24	; 11
    177e:	ea cf       	rjmp	.-44     	; 0x1754 <main+0x3e>

00001780 <__cmpdi2>:
    1780:	2a 15       	cp	r18, r10
    1782:	3b 05       	cpc	r19, r11
    1784:	4c 05       	cpc	r20, r12
    1786:	5d 05       	cpc	r21, r13
    1788:	6e 05       	cpc	r22, r14
    178a:	7f 05       	cpc	r23, r15
    178c:	80 07       	cpc	r24, r16
    178e:	91 07       	cpc	r25, r17
    1790:	08 95       	ret

00001792 <malloc>:
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	91 05       	cpc	r25, r1
    179a:	10 f4       	brcc	.+4      	; 0x17a0 <malloc+0xe>
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	e0 91 02 0c 	lds	r30, 0x0C02
    17a4:	f0 91 03 0c 	lds	r31, 0x0C03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	30 97       	sbiw	r30, 0x00	; 0
    17b2:	39 f1       	breq	.+78     	; 0x1802 <malloc+0x70>
    17b4:	40 81       	ld	r20, Z
    17b6:	51 81       	ldd	r21, Z+1	; 0x01
    17b8:	48 17       	cp	r20, r24
    17ba:	59 07       	cpc	r21, r25
    17bc:	b8 f0       	brcs	.+46     	; 0x17ec <malloc+0x5a>
    17be:	48 17       	cp	r20, r24
    17c0:	59 07       	cpc	r21, r25
    17c2:	71 f4       	brne	.+28     	; 0x17e0 <malloc+0x4e>
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	10 97       	sbiw	r26, 0x00	; 0
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <malloc+0x44>
    17cc:	13 96       	adiw	r26, 0x03	; 3
    17ce:	9c 93       	st	X, r25
    17d0:	8e 93       	st	-X, r24
    17d2:	12 97       	sbiw	r26, 0x02	; 2
    17d4:	2c c0       	rjmp	.+88     	; 0x182e <malloc+0x9c>
    17d6:	90 93 03 0c 	sts	0x0C03, r25
    17da:	80 93 02 0c 	sts	0x0C02, r24
    17de:	27 c0       	rjmp	.+78     	; 0x182e <malloc+0x9c>
    17e0:	21 15       	cp	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <malloc+0x60>
    17e6:	42 17       	cp	r20, r18
    17e8:	53 07       	cpc	r21, r19
    17ea:	18 f0       	brcs	.+6      	; 0x17f2 <malloc+0x60>
    17ec:	a9 01       	movw	r20, r18
    17ee:	db 01       	movw	r26, r22
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <malloc+0x62>
    17f2:	ef 01       	movw	r28, r30
    17f4:	9a 01       	movw	r18, r20
    17f6:	bd 01       	movw	r22, r26
    17f8:	df 01       	movw	r26, r30
    17fa:	02 80       	ldd	r0, Z+2	; 0x02
    17fc:	f3 81       	ldd	r31, Z+3	; 0x03
    17fe:	e0 2d       	mov	r30, r0
    1800:	d7 cf       	rjmp	.-82     	; 0x17b0 <malloc+0x1e>
    1802:	21 15       	cp	r18, r1
    1804:	31 05       	cpc	r19, r1
    1806:	f9 f0       	breq	.+62     	; 0x1846 <malloc+0xb4>
    1808:	28 1b       	sub	r18, r24
    180a:	39 0b       	sbc	r19, r25
    180c:	24 30       	cpi	r18, 0x04	; 4
    180e:	31 05       	cpc	r19, r1
    1810:	80 f4       	brcc	.+32     	; 0x1832 <malloc+0xa0>
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	61 15       	cp	r22, r1
    1818:	71 05       	cpc	r23, r1
    181a:	21 f0       	breq	.+8      	; 0x1824 <malloc+0x92>
    181c:	fb 01       	movw	r30, r22
    181e:	93 83       	std	Z+3, r25	; 0x03
    1820:	82 83       	std	Z+2, r24	; 0x02
    1822:	04 c0       	rjmp	.+8      	; 0x182c <malloc+0x9a>
    1824:	90 93 03 0c 	sts	0x0C03, r25
    1828:	80 93 02 0c 	sts	0x0C02, r24
    182c:	fe 01       	movw	r30, r28
    182e:	32 96       	adiw	r30, 0x02	; 2
    1830:	44 c0       	rjmp	.+136    	; 0x18ba <malloc+0x128>
    1832:	fe 01       	movw	r30, r28
    1834:	e2 0f       	add	r30, r18
    1836:	f3 1f       	adc	r31, r19
    1838:	81 93       	st	Z+, r24
    183a:	91 93       	st	Z+, r25
    183c:	22 50       	subi	r18, 0x02	; 2
    183e:	31 09       	sbc	r19, r1
    1840:	39 83       	std	Y+1, r19	; 0x01
    1842:	28 83       	st	Y, r18
    1844:	3a c0       	rjmp	.+116    	; 0x18ba <malloc+0x128>
    1846:	20 91 00 0c 	lds	r18, 0x0C00
    184a:	30 91 01 0c 	lds	r19, 0x0C01
    184e:	23 2b       	or	r18, r19
    1850:	41 f4       	brne	.+16     	; 0x1862 <malloc+0xd0>
    1852:	20 91 02 01 	lds	r18, 0x0102
    1856:	30 91 03 01 	lds	r19, 0x0103
    185a:	30 93 01 0c 	sts	0x0C01, r19
    185e:	20 93 00 0c 	sts	0x0C00, r18
    1862:	20 91 00 01 	lds	r18, 0x0100
    1866:	30 91 01 01 	lds	r19, 0x0101
    186a:	21 15       	cp	r18, r1
    186c:	31 05       	cpc	r19, r1
    186e:	41 f4       	brne	.+16     	; 0x1880 <malloc+0xee>
    1870:	2d b7       	in	r18, 0x3d	; 61
    1872:	3e b7       	in	r19, 0x3e	; 62
    1874:	40 91 04 01 	lds	r20, 0x0104
    1878:	50 91 05 01 	lds	r21, 0x0105
    187c:	24 1b       	sub	r18, r20
    187e:	35 0b       	sbc	r19, r21
    1880:	e0 91 00 0c 	lds	r30, 0x0C00
    1884:	f0 91 01 0c 	lds	r31, 0x0C01
    1888:	e2 17       	cp	r30, r18
    188a:	f3 07       	cpc	r31, r19
    188c:	a0 f4       	brcc	.+40     	; 0x18b6 <malloc+0x124>
    188e:	2e 1b       	sub	r18, r30
    1890:	3f 0b       	sbc	r19, r31
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	78 f0       	brcs	.+30     	; 0x18b6 <malloc+0x124>
    1898:	ac 01       	movw	r20, r24
    189a:	4e 5f       	subi	r20, 0xFE	; 254
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	24 17       	cp	r18, r20
    18a0:	35 07       	cpc	r19, r21
    18a2:	48 f0       	brcs	.+18     	; 0x18b6 <malloc+0x124>
    18a4:	4e 0f       	add	r20, r30
    18a6:	5f 1f       	adc	r21, r31
    18a8:	50 93 01 0c 	sts	0x0C01, r21
    18ac:	40 93 00 0c 	sts	0x0C00, r20
    18b0:	81 93       	st	Z+, r24
    18b2:	91 93       	st	Z+, r25
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <malloc+0x128>
    18b6:	e0 e0       	ldi	r30, 0x00	; 0
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	cf 01       	movw	r24, r30
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <free>:
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	09 f4       	brne	.+2      	; 0x18cc <free+0xa>
    18ca:	87 c0       	rjmp	.+270    	; 0x19da <free+0x118>
    18cc:	fc 01       	movw	r30, r24
    18ce:	32 97       	sbiw	r30, 0x02	; 2
    18d0:	13 82       	std	Z+3, r1	; 0x03
    18d2:	12 82       	std	Z+2, r1	; 0x02
    18d4:	c0 91 02 0c 	lds	r28, 0x0C02
    18d8:	d0 91 03 0c 	lds	r29, 0x0C03
    18dc:	20 97       	sbiw	r28, 0x00	; 0
    18de:	81 f4       	brne	.+32     	; 0x1900 <free+0x3e>
    18e0:	20 81       	ld	r18, Z
    18e2:	31 81       	ldd	r19, Z+1	; 0x01
    18e4:	28 0f       	add	r18, r24
    18e6:	39 1f       	adc	r19, r25
    18e8:	80 91 00 0c 	lds	r24, 0x0C00
    18ec:	90 91 01 0c 	lds	r25, 0x0C01
    18f0:	82 17       	cp	r24, r18
    18f2:	93 07       	cpc	r25, r19
    18f4:	79 f5       	brne	.+94     	; 0x1954 <free+0x92>
    18f6:	f0 93 01 0c 	sts	0x0C01, r31
    18fa:	e0 93 00 0c 	sts	0x0C00, r30
    18fe:	6d c0       	rjmp	.+218    	; 0x19da <free+0x118>
    1900:	de 01       	movw	r26, r28
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	ae 17       	cp	r26, r30
    1908:	bf 07       	cpc	r27, r31
    190a:	50 f4       	brcc	.+20     	; 0x1920 <free+0x5e>
    190c:	12 96       	adiw	r26, 0x02	; 2
    190e:	4d 91       	ld	r20, X+
    1910:	5c 91       	ld	r21, X
    1912:	13 97       	sbiw	r26, 0x03	; 3
    1914:	9d 01       	movw	r18, r26
    1916:	41 15       	cp	r20, r1
    1918:	51 05       	cpc	r21, r1
    191a:	09 f1       	breq	.+66     	; 0x195e <free+0x9c>
    191c:	da 01       	movw	r26, r20
    191e:	f3 cf       	rjmp	.-26     	; 0x1906 <free+0x44>
    1920:	b3 83       	std	Z+3, r27	; 0x03
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	40 81       	ld	r20, Z
    1926:	51 81       	ldd	r21, Z+1	; 0x01
    1928:	84 0f       	add	r24, r20
    192a:	95 1f       	adc	r25, r21
    192c:	8a 17       	cp	r24, r26
    192e:	9b 07       	cpc	r25, r27
    1930:	71 f4       	brne	.+28     	; 0x194e <free+0x8c>
    1932:	8d 91       	ld	r24, X+
    1934:	9c 91       	ld	r25, X
    1936:	11 97       	sbiw	r26, 0x01	; 1
    1938:	84 0f       	add	r24, r20
    193a:	95 1f       	adc	r25, r21
    193c:	02 96       	adiw	r24, 0x02	; 2
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	12 96       	adiw	r26, 0x02	; 2
    1944:	8d 91       	ld	r24, X+
    1946:	9c 91       	ld	r25, X
    1948:	13 97       	sbiw	r26, 0x03	; 3
    194a:	93 83       	std	Z+3, r25	; 0x03
    194c:	82 83       	std	Z+2, r24	; 0x02
    194e:	21 15       	cp	r18, r1
    1950:	31 05       	cpc	r19, r1
    1952:	29 f4       	brne	.+10     	; 0x195e <free+0x9c>
    1954:	f0 93 03 0c 	sts	0x0C03, r31
    1958:	e0 93 02 0c 	sts	0x0C02, r30
    195c:	3e c0       	rjmp	.+124    	; 0x19da <free+0x118>
    195e:	d9 01       	movw	r26, r18
    1960:	13 96       	adiw	r26, 0x03	; 3
    1962:	fc 93       	st	X, r31
    1964:	ee 93       	st	-X, r30
    1966:	12 97       	sbiw	r26, 0x02	; 2
    1968:	4d 91       	ld	r20, X+
    196a:	5d 91       	ld	r21, X+
    196c:	a4 0f       	add	r26, r20
    196e:	b5 1f       	adc	r27, r21
    1970:	ea 17       	cp	r30, r26
    1972:	fb 07       	cpc	r31, r27
    1974:	79 f4       	brne	.+30     	; 0x1994 <free+0xd2>
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	84 0f       	add	r24, r20
    197c:	95 1f       	adc	r25, r21
    197e:	02 96       	adiw	r24, 0x02	; 2
    1980:	d9 01       	movw	r26, r18
    1982:	11 96       	adiw	r26, 0x01	; 1
    1984:	9c 93       	st	X, r25
    1986:	8e 93       	st	-X, r24
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	13 96       	adiw	r26, 0x03	; 3
    198e:	9c 93       	st	X, r25
    1990:	8e 93       	st	-X, r24
    1992:	12 97       	sbiw	r26, 0x02	; 2
    1994:	e0 e0       	ldi	r30, 0x00	; 0
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	19 f0       	breq	.+6      	; 0x19a6 <free+0xe4>
    19a0:	fe 01       	movw	r30, r28
    19a2:	ec 01       	movw	r28, r24
    19a4:	f9 cf       	rjmp	.-14     	; 0x1998 <free+0xd6>
    19a6:	ce 01       	movw	r24, r28
    19a8:	02 96       	adiw	r24, 0x02	; 2
    19aa:	28 81       	ld	r18, Y
    19ac:	39 81       	ldd	r19, Y+1	; 0x01
    19ae:	82 0f       	add	r24, r18
    19b0:	93 1f       	adc	r25, r19
    19b2:	20 91 00 0c 	lds	r18, 0x0C00
    19b6:	30 91 01 0c 	lds	r19, 0x0C01
    19ba:	28 17       	cp	r18, r24
    19bc:	39 07       	cpc	r19, r25
    19be:	69 f4       	brne	.+26     	; 0x19da <free+0x118>
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	29 f4       	brne	.+10     	; 0x19ce <free+0x10c>
    19c4:	10 92 03 0c 	sts	0x0C03, r1
    19c8:	10 92 02 0c 	sts	0x0C02, r1
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <free+0x110>
    19ce:	13 82       	std	Z+3, r1	; 0x03
    19d0:	12 82       	std	Z+2, r1	; 0x02
    19d2:	d0 93 01 0c 	sts	0x0C01, r29
    19d6:	c0 93 00 0c 	sts	0x0C00, r28
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <memcmp>:
    19e0:	fb 01       	movw	r30, r22
    19e2:	dc 01       	movw	r26, r24
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <memcmp+0xe>
    19e6:	8d 91       	ld	r24, X+
    19e8:	01 90       	ld	r0, Z+
    19ea:	80 19       	sub	r24, r0
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <memcmp+0x16>
    19ee:	41 50       	subi	r20, 0x01	; 1
    19f0:	50 40       	sbci	r21, 0x00	; 0
    19f2:	c8 f7       	brcc	.-14     	; 0x19e6 <memcmp+0x6>
    19f4:	88 1b       	sub	r24, r24
    19f6:	99 0b       	sbc	r25, r25
    19f8:	08 95       	ret

000019fa <memcpy>:
    19fa:	fb 01       	movw	r30, r22
    19fc:	dc 01       	movw	r26, r24
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <memcpy+0xa>
    1a00:	01 90       	ld	r0, Z+
    1a02:	0d 92       	st	X+, r0
    1a04:	41 50       	subi	r20, 0x01	; 1
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	d8 f7       	brcc	.-10     	; 0x1a00 <memcpy+0x6>
    1a0a:	08 95       	ret

00001a0c <strchr>:
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	81 91       	ld	r24, Z+
    1a10:	86 17       	cp	r24, r22
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <strchr+0x10>
    1a14:	88 23       	and	r24, r24
    1a16:	d9 f7       	brne	.-10     	; 0x1a0e <strchr+0x2>
    1a18:	99 27       	eor	r25, r25
    1a1a:	08 95       	ret
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret

00001a22 <strcpy>:
    1a22:	fb 01       	movw	r30, r22
    1a24:	dc 01       	movw	r26, r24
    1a26:	01 90       	ld	r0, Z+
    1a28:	0d 92       	st	X+, r0
    1a2a:	00 20       	and	r0, r0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <strcpy+0x4>
    1a2e:	08 95       	ret

00001a30 <sprintf_P>:
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	0d 89       	ldd	r16, Y+21	; 0x15
    1a4a:	1e 89       	ldd	r17, Y+22	; 0x16
    1a4c:	8e e0       	ldi	r24, 0x0E	; 14
    1a4e:	8c 83       	std	Y+4, r24	; 0x04
    1a50:	1a 83       	std	Y+2, r17	; 0x02
    1a52:	09 83       	std	Y+1, r16	; 0x01
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	9f e7       	ldi	r25, 0x7F	; 127
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	ae 01       	movw	r20, r28
    1a5e:	47 5e       	subi	r20, 0xE7	; 231
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	6f 89       	ldd	r22, Y+23	; 0x17
    1a64:	78 8d       	ldd	r23, Y+24	; 0x18
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <vfprintf>
    1a6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a70:	f8 85       	ldd	r31, Y+8	; 0x08
    1a72:	e0 0f       	add	r30, r16
    1a74:	f1 1f       	adc	r31, r17
    1a76:	10 82       	st	Z, r1
    1a78:	2e 96       	adiw	r28, 0x0e	; 14
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <vfprintf>:
    1a8e:	2f 92       	push	r2
    1a90:	3f 92       	push	r3
    1a92:	4f 92       	push	r4
    1a94:	5f 92       	push	r5
    1a96:	6f 92       	push	r6
    1a98:	7f 92       	push	r7
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	7c 01       	movw	r14, r24
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	8a 01       	movw	r16, r20
    1ac8:	fc 01       	movw	r30, r24
    1aca:	17 82       	std	Z+7, r1	; 0x07
    1acc:	16 82       	std	Z+6, r1	; 0x06
    1ace:	83 81       	ldd	r24, Z+3	; 0x03
    1ad0:	81 ff       	sbrs	r24, 1
    1ad2:	bd c1       	rjmp	.+890    	; 0x1e4e <vfprintf+0x3c0>
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	4c 01       	movw	r8, r24
    1ada:	f7 01       	movw	r30, r14
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	f6 01       	movw	r30, r12
    1ae0:	93 fd       	sbrc	r25, 3
    1ae2:	85 91       	lpm	r24, Z+
    1ae4:	93 ff       	sbrs	r25, 3
    1ae6:	81 91       	ld	r24, Z+
    1ae8:	6f 01       	movw	r12, r30
    1aea:	88 23       	and	r24, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <vfprintf+0x62>
    1aee:	ab c1       	rjmp	.+854    	; 0x1e46 <vfprintf+0x3b8>
    1af0:	85 32       	cpi	r24, 0x25	; 37
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <vfprintf+0x74>
    1af4:	93 fd       	sbrc	r25, 3
    1af6:	85 91       	lpm	r24, Z+
    1af8:	93 ff       	sbrs	r25, 3
    1afa:	81 91       	ld	r24, Z+
    1afc:	6f 01       	movw	r12, r30
    1afe:	85 32       	cpi	r24, 0x25	; 37
    1b00:	29 f4       	brne	.+10     	; 0x1b0c <vfprintf+0x7e>
    1b02:	b7 01       	movw	r22, r14
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1b0a:	e7 cf       	rjmp	.-50     	; 0x1ada <vfprintf+0x4c>
    1b0c:	51 2c       	mov	r5, r1
    1b0e:	31 2c       	mov	r3, r1
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	20 32       	cpi	r18, 0x20	; 32
    1b14:	a0 f4       	brcc	.+40     	; 0x1b3e <vfprintf+0xb0>
    1b16:	8b 32       	cpi	r24, 0x2B	; 43
    1b18:	69 f0       	breq	.+26     	; 0x1b34 <vfprintf+0xa6>
    1b1a:	30 f4       	brcc	.+12     	; 0x1b28 <vfprintf+0x9a>
    1b1c:	80 32       	cpi	r24, 0x20	; 32
    1b1e:	59 f0       	breq	.+22     	; 0x1b36 <vfprintf+0xa8>
    1b20:	83 32       	cpi	r24, 0x23	; 35
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <vfprintf+0xb0>
    1b24:	20 61       	ori	r18, 0x10	; 16
    1b26:	2c c0       	rjmp	.+88     	; 0x1b80 <vfprintf+0xf2>
    1b28:	8d 32       	cpi	r24, 0x2D	; 45
    1b2a:	39 f0       	breq	.+14     	; 0x1b3a <vfprintf+0xac>
    1b2c:	80 33       	cpi	r24, 0x30	; 48
    1b2e:	39 f4       	brne	.+14     	; 0x1b3e <vfprintf+0xb0>
    1b30:	21 60       	ori	r18, 0x01	; 1
    1b32:	26 c0       	rjmp	.+76     	; 0x1b80 <vfprintf+0xf2>
    1b34:	22 60       	ori	r18, 0x02	; 2
    1b36:	24 60       	ori	r18, 0x04	; 4
    1b38:	23 c0       	rjmp	.+70     	; 0x1b80 <vfprintf+0xf2>
    1b3a:	28 60       	ori	r18, 0x08	; 8
    1b3c:	21 c0       	rjmp	.+66     	; 0x1b80 <vfprintf+0xf2>
    1b3e:	27 fd       	sbrc	r18, 7
    1b40:	27 c0       	rjmp	.+78     	; 0x1b90 <vfprintf+0x102>
    1b42:	30 ed       	ldi	r19, 0xD0	; 208
    1b44:	38 0f       	add	r19, r24
    1b46:	3a 30       	cpi	r19, 0x0A	; 10
    1b48:	78 f4       	brcc	.+30     	; 0x1b68 <vfprintf+0xda>
    1b4a:	26 ff       	sbrs	r18, 6
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <vfprintf+0xcc>
    1b4e:	fa e0       	ldi	r31, 0x0A	; 10
    1b50:	5f 9e       	mul	r5, r31
    1b52:	30 0d       	add	r19, r0
    1b54:	11 24       	eor	r1, r1
    1b56:	53 2e       	mov	r5, r19
    1b58:	13 c0       	rjmp	.+38     	; 0x1b80 <vfprintf+0xf2>
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	38 9e       	mul	r3, r24
    1b5e:	30 0d       	add	r19, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	33 2e       	mov	r3, r19
    1b64:	20 62       	ori	r18, 0x20	; 32
    1b66:	0c c0       	rjmp	.+24     	; 0x1b80 <vfprintf+0xf2>
    1b68:	8e 32       	cpi	r24, 0x2E	; 46
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <vfprintf+0xe6>
    1b6c:	26 fd       	sbrc	r18, 6
    1b6e:	6b c1       	rjmp	.+726    	; 0x1e46 <vfprintf+0x3b8>
    1b70:	20 64       	ori	r18, 0x40	; 64
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0xf2>
    1b74:	8c 36       	cpi	r24, 0x6C	; 108
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <vfprintf+0xee>
    1b78:	20 68       	ori	r18, 0x80	; 128
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <vfprintf+0xf2>
    1b7c:	88 36       	cpi	r24, 0x68	; 104
    1b7e:	41 f4       	brne	.+16     	; 0x1b90 <vfprintf+0x102>
    1b80:	f6 01       	movw	r30, r12
    1b82:	93 fd       	sbrc	r25, 3
    1b84:	85 91       	lpm	r24, Z+
    1b86:	93 ff       	sbrs	r25, 3
    1b88:	81 91       	ld	r24, Z+
    1b8a:	6f 01       	movw	r12, r30
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	c1 cf       	rjmp	.-126    	; 0x1b12 <vfprintf+0x84>
    1b90:	98 2f       	mov	r25, r24
    1b92:	9f 7d       	andi	r25, 0xDF	; 223
    1b94:	95 54       	subi	r25, 0x45	; 69
    1b96:	93 30       	cpi	r25, 0x03	; 3
    1b98:	28 f4       	brcc	.+10     	; 0x1ba4 <vfprintf+0x116>
    1b9a:	0c 5f       	subi	r16, 0xFC	; 252
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	ff e3       	ldi	r31, 0x3F	; 63
    1ba0:	f9 83       	std	Y+1, r31	; 0x01
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <vfprintf+0x130>
    1ba4:	83 36       	cpi	r24, 0x63	; 99
    1ba6:	31 f0       	breq	.+12     	; 0x1bb4 <vfprintf+0x126>
    1ba8:	83 37       	cpi	r24, 0x73	; 115
    1baa:	71 f0       	breq	.+28     	; 0x1bc8 <vfprintf+0x13a>
    1bac:	83 35       	cpi	r24, 0x53	; 83
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <vfprintf+0x124>
    1bb0:	5b c0       	rjmp	.+182    	; 0x1c68 <vfprintf+0x1da>
    1bb2:	22 c0       	rjmp	.+68     	; 0x1bf8 <vfprintf+0x16a>
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	80 81       	ld	r24, Z
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	0e 5f       	subi	r16, 0xFE	; 254
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	44 24       	eor	r4, r4
    1bc0:	43 94       	inc	r4
    1bc2:	51 2c       	mov	r5, r1
    1bc4:	54 01       	movw	r10, r8
    1bc6:	15 c0       	rjmp	.+42     	; 0x1bf2 <vfprintf+0x164>
    1bc8:	38 01       	movw	r6, r16
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	6f 0e       	add	r6, r31
    1bce:	71 1c       	adc	r7, r1
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	a0 80       	ld	r10, Z
    1bd4:	b1 80       	ldd	r11, Z+1	; 0x01
    1bd6:	26 ff       	sbrs	r18, 6
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <vfprintf+0x152>
    1bda:	65 2d       	mov	r22, r5
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <vfprintf+0x156>
    1be0:	6f ef       	ldi	r22, 0xFF	; 255
    1be2:	7f ef       	ldi	r23, 0xFF	; 255
    1be4:	c5 01       	movw	r24, r10
    1be6:	2c 87       	std	Y+12, r18	; 0x0c
    1be8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <strnlen>
    1bec:	2c 01       	movw	r4, r24
    1bee:	83 01       	movw	r16, r6
    1bf0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf2:	2f 77       	andi	r18, 0x7F	; 127
    1bf4:	22 2e       	mov	r2, r18
    1bf6:	17 c0       	rjmp	.+46     	; 0x1c26 <vfprintf+0x198>
    1bf8:	38 01       	movw	r6, r16
    1bfa:	f2 e0       	ldi	r31, 0x02	; 2
    1bfc:	6f 0e       	add	r6, r31
    1bfe:	71 1c       	adc	r7, r1
    1c00:	f8 01       	movw	r30, r16
    1c02:	a0 80       	ld	r10, Z
    1c04:	b1 80       	ldd	r11, Z+1	; 0x01
    1c06:	26 ff       	sbrs	r18, 6
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <vfprintf+0x182>
    1c0a:	65 2d       	mov	r22, r5
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x186>
    1c10:	6f ef       	ldi	r22, 0xFF	; 255
    1c12:	7f ef       	ldi	r23, 0xFF	; 255
    1c14:	c5 01       	movw	r24, r10
    1c16:	2c 87       	std	Y+12, r18	; 0x0c
    1c18:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <strnlen_P>
    1c1c:	2c 01       	movw	r4, r24
    1c1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c20:	20 68       	ori	r18, 0x80	; 128
    1c22:	22 2e       	mov	r2, r18
    1c24:	83 01       	movw	r16, r6
    1c26:	23 fc       	sbrc	r2, 3
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <vfprintf+0x1d2>
    1c2a:	83 2d       	mov	r24, r3
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	48 16       	cp	r4, r24
    1c30:	59 06       	cpc	r5, r25
    1c32:	b0 f4       	brcc	.+44     	; 0x1c60 <vfprintf+0x1d2>
    1c34:	b7 01       	movw	r22, r14
    1c36:	80 e2       	ldi	r24, 0x20	; 32
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1c3e:	3a 94       	dec	r3
    1c40:	f4 cf       	rjmp	.-24     	; 0x1c2a <vfprintf+0x19c>
    1c42:	f5 01       	movw	r30, r10
    1c44:	27 fc       	sbrc	r2, 7
    1c46:	85 91       	lpm	r24, Z+
    1c48:	27 fe       	sbrs	r2, 7
    1c4a:	81 91       	ld	r24, Z+
    1c4c:	5f 01       	movw	r10, r30
    1c4e:	b7 01       	movw	r22, r14
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1c56:	31 10       	cpse	r3, r1
    1c58:	3a 94       	dec	r3
    1c5a:	f1 e0       	ldi	r31, 0x01	; 1
    1c5c:	4f 1a       	sub	r4, r31
    1c5e:	51 08       	sbc	r5, r1
    1c60:	41 14       	cp	r4, r1
    1c62:	51 04       	cpc	r5, r1
    1c64:	71 f7       	brne	.-36     	; 0x1c42 <vfprintf+0x1b4>
    1c66:	e5 c0       	rjmp	.+458    	; 0x1e32 <vfprintf+0x3a4>
    1c68:	84 36       	cpi	r24, 0x64	; 100
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <vfprintf+0x1e2>
    1c6c:	89 36       	cpi	r24, 0x69	; 105
    1c6e:	39 f5       	brne	.+78     	; 0x1cbe <vfprintf+0x230>
    1c70:	f8 01       	movw	r30, r16
    1c72:	27 ff       	sbrs	r18, 7
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <vfprintf+0x1f6>
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0c 5f       	subi	r16, 0xFC	; 252
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	08 c0       	rjmp	.+16     	; 0x1c94 <vfprintf+0x206>
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	88 27       	eor	r24, r24
    1c8a:	77 fd       	sbrc	r23, 7
    1c8c:	80 95       	com	r24
    1c8e:	98 2f       	mov	r25, r24
    1c90:	0e 5f       	subi	r16, 0xFE	; 254
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	2f 76       	andi	r18, 0x6F	; 111
    1c96:	b2 2e       	mov	r11, r18
    1c98:	97 ff       	sbrs	r25, 7
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <vfprintf+0x220>
    1c9c:	90 95       	com	r25
    1c9e:	80 95       	com	r24
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	20 68       	ori	r18, 0x80	; 128
    1cac:	b2 2e       	mov	r11, r18
    1cae:	2a e0       	ldi	r18, 0x0A	; 10
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	a4 01       	movw	r20, r8
    1cb4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__ultoa_invert>
    1cb8:	a8 2e       	mov	r10, r24
    1cba:	a8 18       	sub	r10, r8
    1cbc:	44 c0       	rjmp	.+136    	; 0x1d46 <vfprintf+0x2b8>
    1cbe:	85 37       	cpi	r24, 0x75	; 117
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <vfprintf+0x23e>
    1cc2:	2f 7e       	andi	r18, 0xEF	; 239
    1cc4:	b2 2e       	mov	r11, r18
    1cc6:	2a e0       	ldi	r18, 0x0A	; 10
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	25 c0       	rjmp	.+74     	; 0x1d16 <vfprintf+0x288>
    1ccc:	f2 2f       	mov	r31, r18
    1cce:	f9 7f       	andi	r31, 0xF9	; 249
    1cd0:	bf 2e       	mov	r11, r31
    1cd2:	8f 36       	cpi	r24, 0x6F	; 111
    1cd4:	c1 f0       	breq	.+48     	; 0x1d06 <vfprintf+0x278>
    1cd6:	18 f4       	brcc	.+6      	; 0x1cde <vfprintf+0x250>
    1cd8:	88 35       	cpi	r24, 0x58	; 88
    1cda:	79 f0       	breq	.+30     	; 0x1cfa <vfprintf+0x26c>
    1cdc:	b4 c0       	rjmp	.+360    	; 0x1e46 <vfprintf+0x3b8>
    1cde:	80 37       	cpi	r24, 0x70	; 112
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <vfprintf+0x25a>
    1ce2:	88 37       	cpi	r24, 0x78	; 120
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <vfprintf+0x260>
    1ce6:	af c0       	rjmp	.+350    	; 0x1e46 <vfprintf+0x3b8>
    1ce8:	2f 2f       	mov	r18, r31
    1cea:	20 61       	ori	r18, 0x10	; 16
    1cec:	b2 2e       	mov	r11, r18
    1cee:	b4 fe       	sbrs	r11, 4
    1cf0:	0d c0       	rjmp	.+26     	; 0x1d0c <vfprintf+0x27e>
    1cf2:	8b 2d       	mov	r24, r11
    1cf4:	84 60       	ori	r24, 0x04	; 4
    1cf6:	b8 2e       	mov	r11, r24
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <vfprintf+0x27e>
    1cfa:	24 ff       	sbrs	r18, 4
    1cfc:	0a c0       	rjmp	.+20     	; 0x1d12 <vfprintf+0x284>
    1cfe:	9f 2f       	mov	r25, r31
    1d00:	96 60       	ori	r25, 0x06	; 6
    1d02:	b9 2e       	mov	r11, r25
    1d04:	06 c0       	rjmp	.+12     	; 0x1d12 <vfprintf+0x284>
    1d06:	28 e0       	ldi	r18, 0x08	; 8
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	05 c0       	rjmp	.+10     	; 0x1d16 <vfprintf+0x288>
    1d0c:	20 e1       	ldi	r18, 0x10	; 16
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x288>
    1d12:	20 e1       	ldi	r18, 0x10	; 16
    1d14:	32 e0       	ldi	r19, 0x02	; 2
    1d16:	f8 01       	movw	r30, r16
    1d18:	b7 fe       	sbrs	r11, 7
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <vfprintf+0x29c>
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	0c 5f       	subi	r16, 0xFC	; 252
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x2a8>
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 5f       	subi	r16, 0xFE	; 254
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	a4 01       	movw	r20, r8
    1d38:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__ultoa_invert>
    1d3c:	a8 2e       	mov	r10, r24
    1d3e:	a8 18       	sub	r10, r8
    1d40:	fb 2d       	mov	r31, r11
    1d42:	ff 77       	andi	r31, 0x7F	; 127
    1d44:	bf 2e       	mov	r11, r31
    1d46:	b6 fe       	sbrs	r11, 6
    1d48:	0b c0       	rjmp	.+22     	; 0x1d60 <vfprintf+0x2d2>
    1d4a:	2b 2d       	mov	r18, r11
    1d4c:	2e 7f       	andi	r18, 0xFE	; 254
    1d4e:	a5 14       	cp	r10, r5
    1d50:	50 f4       	brcc	.+20     	; 0x1d66 <vfprintf+0x2d8>
    1d52:	b4 fe       	sbrs	r11, 4
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <vfprintf+0x2dc>
    1d56:	b2 fc       	sbrc	r11, 2
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <vfprintf+0x2dc>
    1d5a:	2b 2d       	mov	r18, r11
    1d5c:	2e 7e       	andi	r18, 0xEE	; 238
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <vfprintf+0x2dc>
    1d60:	7a 2c       	mov	r7, r10
    1d62:	2b 2d       	mov	r18, r11
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <vfprintf+0x2de>
    1d66:	7a 2c       	mov	r7, r10
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <vfprintf+0x2de>
    1d6a:	75 2c       	mov	r7, r5
    1d6c:	24 ff       	sbrs	r18, 4
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <vfprintf+0x2fc>
    1d70:	fe 01       	movw	r30, r28
    1d72:	ea 0d       	add	r30, r10
    1d74:	f1 1d       	adc	r31, r1
    1d76:	80 81       	ld	r24, Z
    1d78:	80 33       	cpi	r24, 0x30	; 48
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <vfprintf+0x2f2>
    1d7c:	29 7e       	andi	r18, 0xE9	; 233
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <vfprintf+0x304>
    1d80:	22 ff       	sbrs	r18, 2
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0x302>
    1d84:	73 94       	inc	r7
    1d86:	73 94       	inc	r7
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <vfprintf+0x304>
    1d8a:	82 2f       	mov	r24, r18
    1d8c:	86 78       	andi	r24, 0x86	; 134
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <vfprintf+0x304>
    1d90:	73 94       	inc	r7
    1d92:	23 fd       	sbrc	r18, 3
    1d94:	13 c0       	rjmp	.+38     	; 0x1dbc <vfprintf+0x32e>
    1d96:	20 ff       	sbrs	r18, 0
    1d98:	06 c0       	rjmp	.+12     	; 0x1da6 <vfprintf+0x318>
    1d9a:	5a 2c       	mov	r5, r10
    1d9c:	73 14       	cp	r7, r3
    1d9e:	18 f4       	brcc	.+6      	; 0x1da6 <vfprintf+0x318>
    1da0:	53 0c       	add	r5, r3
    1da2:	57 18       	sub	r5, r7
    1da4:	73 2c       	mov	r7, r3
    1da6:	73 14       	cp	r7, r3
    1da8:	68 f4       	brcc	.+26     	; 0x1dc4 <vfprintf+0x336>
    1daa:	b7 01       	movw	r22, r14
    1dac:	80 e2       	ldi	r24, 0x20	; 32
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	2c 87       	std	Y+12, r18	; 0x0c
    1db2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1db6:	73 94       	inc	r7
    1db8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dba:	f5 cf       	rjmp	.-22     	; 0x1da6 <vfprintf+0x318>
    1dbc:	73 14       	cp	r7, r3
    1dbe:	10 f4       	brcc	.+4      	; 0x1dc4 <vfprintf+0x336>
    1dc0:	37 18       	sub	r3, r7
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x338>
    1dc4:	31 2c       	mov	r3, r1
    1dc6:	24 ff       	sbrs	r18, 4
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <vfprintf+0x360>
    1dca:	b7 01       	movw	r22, r14
    1dcc:	80 e3       	ldi	r24, 0x30	; 48
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	2c 87       	std	Y+12, r18	; 0x0c
    1dd2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1dd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd8:	22 ff       	sbrs	r18, 2
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <vfprintf+0x37c>
    1ddc:	21 ff       	sbrs	r18, 1
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <vfprintf+0x358>
    1de0:	88 e5       	ldi	r24, 0x58	; 88
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <vfprintf+0x35c>
    1de6:	88 e7       	ldi	r24, 0x78	; 120
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	b7 01       	movw	r22, r14
    1dec:	0c c0       	rjmp	.+24     	; 0x1e06 <vfprintf+0x378>
    1dee:	82 2f       	mov	r24, r18
    1df0:	86 78       	andi	r24, 0x86	; 134
    1df2:	59 f0       	breq	.+22     	; 0x1e0a <vfprintf+0x37c>
    1df4:	21 fd       	sbrc	r18, 1
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <vfprintf+0x36e>
    1df8:	80 e2       	ldi	r24, 0x20	; 32
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <vfprintf+0x370>
    1dfc:	8b e2       	ldi	r24, 0x2B	; 43
    1dfe:	27 fd       	sbrc	r18, 7
    1e00:	8d e2       	ldi	r24, 0x2D	; 45
    1e02:	b7 01       	movw	r22, r14
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e0a:	a5 14       	cp	r10, r5
    1e0c:	38 f4       	brcc	.+14     	; 0x1e1c <vfprintf+0x38e>
    1e0e:	b7 01       	movw	r22, r14
    1e10:	80 e3       	ldi	r24, 0x30	; 48
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e18:	5a 94       	dec	r5
    1e1a:	f7 cf       	rjmp	.-18     	; 0x1e0a <vfprintf+0x37c>
    1e1c:	aa 94       	dec	r10
    1e1e:	f4 01       	movw	r30, r8
    1e20:	ea 0d       	add	r30, r10
    1e22:	f1 1d       	adc	r31, r1
    1e24:	80 81       	ld	r24, Z
    1e26:	b7 01       	movw	r22, r14
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e2e:	a1 10       	cpse	r10, r1
    1e30:	f5 cf       	rjmp	.-22     	; 0x1e1c <vfprintf+0x38e>
    1e32:	33 20       	and	r3, r3
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <vfprintf+0x3aa>
    1e36:	51 ce       	rjmp	.-862    	; 0x1ada <vfprintf+0x4c>
    1e38:	b7 01       	movw	r22, r14
    1e3a:	80 e2       	ldi	r24, 0x20	; 32
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e42:	3a 94       	dec	r3
    1e44:	f6 cf       	rjmp	.-20     	; 0x1e32 <vfprintf+0x3a4>
    1e46:	f7 01       	movw	r30, r14
    1e48:	86 81       	ldd	r24, Z+6	; 0x06
    1e4a:	97 81       	ldd	r25, Z+7	; 0x07
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <vfprintf+0x3c4>
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	9f ef       	ldi	r25, 0xFF	; 255
    1e52:	2c 96       	adiw	r28, 0x0c	; 12
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	6f 90       	pop	r6
    1e7a:	5f 90       	pop	r5
    1e7c:	4f 90       	pop	r4
    1e7e:	3f 90       	pop	r3
    1e80:	2f 90       	pop	r2
    1e82:	08 95       	ret

00001e84 <__eerd_byte_m1284p>:
    1e84:	f9 99       	sbic	0x1f, 1	; 31
    1e86:	fe cf       	rjmp	.-4      	; 0x1e84 <__eerd_byte_m1284p>
    1e88:	92 bd       	out	0x22, r25	; 34
    1e8a:	81 bd       	out	0x21, r24	; 33
    1e8c:	f8 9a       	sbi	0x1f, 0	; 31
    1e8e:	99 27       	eor	r25, r25
    1e90:	80 b5       	in	r24, 0x20	; 32
    1e92:	08 95       	ret

00001e94 <__eewr_byte_m1284p>:
    1e94:	26 2f       	mov	r18, r22

00001e96 <__eewr_r18_m1284p>:
    1e96:	f9 99       	sbic	0x1f, 1	; 31
    1e98:	fe cf       	rjmp	.-4      	; 0x1e96 <__eewr_r18_m1284p>
    1e9a:	1f ba       	out	0x1f, r1	; 31
    1e9c:	92 bd       	out	0x22, r25	; 34
    1e9e:	81 bd       	out	0x21, r24	; 33
    1ea0:	20 bd       	out	0x20, r18	; 32
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	fa 9a       	sbi	0x1f, 2	; 31
    1ea8:	f9 9a       	sbi	0x1f, 1	; 31
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	08 95       	ret

00001eb0 <strnlen_P>:
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	61 50       	subi	r22, 0x01	; 1
    1eb6:	70 40       	sbci	r23, 0x00	; 0
    1eb8:	01 10       	cpse	r0, r1
    1eba:	d8 f7       	brcc	.-10     	; 0x1eb2 <strnlen_P+0x2>
    1ebc:	80 95       	com	r24
    1ebe:	90 95       	com	r25
    1ec0:	8e 0f       	add	r24, r30
    1ec2:	9f 1f       	adc	r25, r31
    1ec4:	08 95       	ret

00001ec6 <strnlen>:
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	61 50       	subi	r22, 0x01	; 1
    1eca:	70 40       	sbci	r23, 0x00	; 0
    1ecc:	01 90       	ld	r0, Z+
    1ece:	01 10       	cpse	r0, r1
    1ed0:	d8 f7       	brcc	.-10     	; 0x1ec8 <strnlen+0x2>
    1ed2:	80 95       	com	r24
    1ed4:	90 95       	com	r25
    1ed6:	8e 0f       	add	r24, r30
    1ed8:	9f 1f       	adc	r25, r31
    1eda:	08 95       	ret

00001edc <fputc>:
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	18 2f       	mov	r17, r24
    1ee6:	09 2f       	mov	r16, r25
    1ee8:	eb 01       	movw	r28, r22
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	81 fd       	sbrc	r24, 1
    1eee:	03 c0       	rjmp	.+6      	; 0x1ef6 <fputc+0x1a>
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
    1ef2:	9f ef       	ldi	r25, 0xFF	; 255
    1ef4:	20 c0       	rjmp	.+64     	; 0x1f36 <fputc+0x5a>
    1ef6:	82 ff       	sbrs	r24, 2
    1ef8:	10 c0       	rjmp	.+32     	; 0x1f1a <fputc+0x3e>
    1efa:	4e 81       	ldd	r20, Y+6	; 0x06
    1efc:	5f 81       	ldd	r21, Y+7	; 0x07
    1efe:	2c 81       	ldd	r18, Y+4	; 0x04
    1f00:	3d 81       	ldd	r19, Y+5	; 0x05
    1f02:	42 17       	cp	r20, r18
    1f04:	53 07       	cpc	r21, r19
    1f06:	7c f4       	brge	.+30     	; 0x1f26 <fputc+0x4a>
    1f08:	e8 81       	ld	r30, Y
    1f0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f0c:	9f 01       	movw	r18, r30
    1f0e:	2f 5f       	subi	r18, 0xFF	; 255
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	39 83       	std	Y+1, r19	; 0x01
    1f14:	28 83       	st	Y, r18
    1f16:	10 83       	st	Z, r17
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <fputc+0x4a>
    1f1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f1c:	f9 85       	ldd	r31, Y+9	; 0x09
    1f1e:	81 2f       	mov	r24, r17
    1f20:	09 95       	icall
    1f22:	89 2b       	or	r24, r25
    1f24:	29 f7       	brne	.-54     	; 0x1ef0 <fputc+0x14>
    1f26:	2e 81       	ldd	r18, Y+6	; 0x06
    1f28:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2a:	2f 5f       	subi	r18, 0xFF	; 255
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	3f 83       	std	Y+7, r19	; 0x07
    1f30:	2e 83       	std	Y+6, r18	; 0x06
    1f32:	81 2f       	mov	r24, r17
    1f34:	90 2f       	mov	r25, r16
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <__ultoa_invert>:
    1f40:	fa 01       	movw	r30, r20
    1f42:	aa 27       	eor	r26, r26
    1f44:	28 30       	cpi	r18, 0x08	; 8
    1f46:	51 f1       	breq	.+84     	; 0x1f9c <__ultoa_invert+0x5c>
    1f48:	20 31       	cpi	r18, 0x10	; 16
    1f4a:	81 f1       	breq	.+96     	; 0x1fac <__ultoa_invert+0x6c>
    1f4c:	e8 94       	clt
    1f4e:	6f 93       	push	r22
    1f50:	6e 7f       	andi	r22, 0xFE	; 254
    1f52:	6e 5f       	subi	r22, 0xFE	; 254
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	af 4f       	sbci	r26, 0xFF	; 255
    1f5c:	b1 e0       	ldi	r27, 0x01	; 1
    1f5e:	3e d0       	rcall	.+124    	; 0x1fdc <__ultoa_invert+0x9c>
    1f60:	b4 e0       	ldi	r27, 0x04	; 4
    1f62:	3c d0       	rcall	.+120    	; 0x1fdc <__ultoa_invert+0x9c>
    1f64:	67 0f       	add	r22, r23
    1f66:	78 1f       	adc	r23, r24
    1f68:	89 1f       	adc	r24, r25
    1f6a:	9a 1f       	adc	r25, r26
    1f6c:	a1 1d       	adc	r26, r1
    1f6e:	68 0f       	add	r22, r24
    1f70:	79 1f       	adc	r23, r25
    1f72:	8a 1f       	adc	r24, r26
    1f74:	91 1d       	adc	r25, r1
    1f76:	a1 1d       	adc	r26, r1
    1f78:	6a 0f       	add	r22, r26
    1f7a:	71 1d       	adc	r23, r1
    1f7c:	81 1d       	adc	r24, r1
    1f7e:	91 1d       	adc	r25, r1
    1f80:	a1 1d       	adc	r26, r1
    1f82:	20 d0       	rcall	.+64     	; 0x1fc4 <__ultoa_invert+0x84>
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <__ultoa_invert+0x48>
    1f86:	68 94       	set
    1f88:	3f 91       	pop	r19
    1f8a:	2a e0       	ldi	r18, 0x0A	; 10
    1f8c:	26 9f       	mul	r18, r22
    1f8e:	11 24       	eor	r1, r1
    1f90:	30 19       	sub	r19, r0
    1f92:	30 5d       	subi	r19, 0xD0	; 208
    1f94:	31 93       	st	Z+, r19
    1f96:	de f6       	brtc	.-74     	; 0x1f4e <__ultoa_invert+0xe>
    1f98:	cf 01       	movw	r24, r30
    1f9a:	08 95       	ret
    1f9c:	46 2f       	mov	r20, r22
    1f9e:	47 70       	andi	r20, 0x07	; 7
    1fa0:	40 5d       	subi	r20, 0xD0	; 208
    1fa2:	41 93       	st	Z+, r20
    1fa4:	b3 e0       	ldi	r27, 0x03	; 3
    1fa6:	0f d0       	rcall	.+30     	; 0x1fc6 <__ultoa_invert+0x86>
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <__ultoa_invert+0x5c>
    1faa:	f6 cf       	rjmp	.-20     	; 0x1f98 <__ultoa_invert+0x58>
    1fac:	46 2f       	mov	r20, r22
    1fae:	4f 70       	andi	r20, 0x0F	; 15
    1fb0:	40 5d       	subi	r20, 0xD0	; 208
    1fb2:	4a 33       	cpi	r20, 0x3A	; 58
    1fb4:	18 f0       	brcs	.+6      	; 0x1fbc <__ultoa_invert+0x7c>
    1fb6:	49 5d       	subi	r20, 0xD9	; 217
    1fb8:	31 fd       	sbrc	r19, 1
    1fba:	40 52       	subi	r20, 0x20	; 32
    1fbc:	41 93       	st	Z+, r20
    1fbe:	02 d0       	rcall	.+4      	; 0x1fc4 <__ultoa_invert+0x84>
    1fc0:	a9 f7       	brne	.-22     	; 0x1fac <__ultoa_invert+0x6c>
    1fc2:	ea cf       	rjmp	.-44     	; 0x1f98 <__ultoa_invert+0x58>
    1fc4:	b4 e0       	ldi	r27, 0x04	; 4
    1fc6:	a6 95       	lsr	r26
    1fc8:	97 95       	ror	r25
    1fca:	87 95       	ror	r24
    1fcc:	77 95       	ror	r23
    1fce:	67 95       	ror	r22
    1fd0:	ba 95       	dec	r27
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <__ultoa_invert+0x86>
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	61 05       	cpc	r22, r1
    1fd8:	71 05       	cpc	r23, r1
    1fda:	08 95       	ret
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	0a 2e       	mov	r0, r26
    1fe2:	06 94       	lsr	r0
    1fe4:	57 95       	ror	r21
    1fe6:	47 95       	ror	r20
    1fe8:	37 95       	ror	r19
    1fea:	27 95       	ror	r18
    1fec:	ba 95       	dec	r27
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__ultoa_invert+0xa2>
    1ff0:	62 0f       	add	r22, r18
    1ff2:	73 1f       	adc	r23, r19
    1ff4:	84 1f       	adc	r24, r20
    1ff6:	95 1f       	adc	r25, r21
    1ff8:	a0 1d       	adc	r26, r0
    1ffa:	08 95       	ret

00001ffc <_exit>:
    1ffc:	f8 94       	cli

00001ffe <__stop_program>:
    1ffe:	ff cf       	rjmp	.-2      	; 0x1ffe <__stop_program>
