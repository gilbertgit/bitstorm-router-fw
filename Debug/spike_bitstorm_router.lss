
spike_bitstorm_router.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001f94  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad8  00800128  00800128  00002050  2**0
                  ALLOC
  3 .stab         00005de4  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003daa  00000000  00000000  00007e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000bbde  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  0000bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fc  00000000  00000000  0000bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000050  00000000  00000000  0000bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000172  00000000  00000000  0000bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_16>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_20>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      70:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_28>
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      80:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      84:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000008c <BTLE_hex>:
      8c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000009d <__c.2256>:
      9d:	72 73 73 69 3d 25 64 20 62 61 74 74 3d 25 64 20     rssi=%d batt=%d 
      ad:	74 65 6d 70 3d 25 64 20 6d 61 63 3d 25 64 20 0d     temp=%d mac=%d .
      bd:	0a 00 00                                            ...

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e4       	ldi	r29, 0x40	; 64
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e4 e9       	ldi	r30, 0x94	; 148
      d4:	ff e1       	ldi	r31, 0x1F	; 31
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	2c e0       	ldi	r18, 0x0C	; 12
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a0 30       	cpi	r26, 0x00	; 0
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <main>
      fa:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <wan_init>:
	CONFIGURE, WAIT_FOR_DATA, WAIT_FOR_NWK_BUSY, WAIT_FOR_NWK_READY
};
static uint8_t state = CONFIGURE;

void wan_init() {
	wan_usart_init();
     102:	0e 94 50 04 	call	0x8a0	; 0x8a0 <wan_usart_init>

	wan_driver_init();
     106:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <wan_driver_init>
     10a:	08 95       	ret

0000010c <wan_set_cts>:
}

void wan_set_cts() {
	//pd0 low
	PORTD &= ~_BV(PD0);
     10c:	58 98       	cbi	0x0b, 0	; 11
     10e:	08 95       	ret

00000110 <wan_get_rts>:
}

uint8_t wan_get_rts() {
	// return logic high or low
	return (PIND & _BV(PD1));
     110:	89 b1       	in	r24, 0x09	; 9
}
     112:	82 70       	andi	r24, 0x02	; 2
     114:	08 95       	ret

00000116 <wan_reset_frame>:

void wan_reset_frame(void) {
	frame_ready = false;
     116:	10 92 7d 01 	sts	0x017D, r1
	frame_index = 0;
     11a:	10 92 2c 01 	sts	0x012C, r1
     11e:	10 92 2b 01 	sts	0x012B, r1
     122:	08 95       	ret

00000124 <wan_state_configure>:
}

void wan_state_configure(void) {
	if (wan_config_tick()) {
     124:	0e 94 b7 02 	call	0x56e	; 0x56e <wan_config_tick>
     128:	88 23       	and	r24, r24
     12a:	21 f0       	breq	.+8      	; 0x134 <wan_state_configure+0x10>
		state = WAIT_FOR_DATA;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 28 01 	sts	0x0128, r24
     132:	08 95       	ret
	} else if (frame_ready) {
     134:	80 91 7d 01 	lds	r24, 0x017D
     138:	88 23       	and	r24, r24
     13a:	59 f0       	breq	.+22     	; 0x152 <wan_state_configure+0x2e>
		if (wan_config_received(frame_buff)) {
     13c:	8d e2       	ldi	r24, 0x2D	; 45
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 99 02 	call	0x532	; 0x532 <wan_config_received>
     144:	88 23       	and	r24, r24
     146:	19 f0       	breq	.+6      	; 0x14e <wan_state_configure+0x2a>
			state = WAIT_FOR_DATA;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 28 01 	sts	0x0128, r24
		}
		wan_reset_frame();
     14e:	0e 94 8b 00 	call	0x116	; 0x116 <wan_reset_frame>
     152:	08 95       	ret

00000154 <frame_tick>:
			LED_ON
		}
	}
}

void frame_tick() {
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
		frame_buff[frame_index] = wan_usart_data_read();
		if (frame_index == 0) {
			frame_length = frame_buff[frame_index];
     15c:	0d e2       	ldi	r16, 0x2D	; 45
     15e:	11 e0       	ldi	r17, 0x01	; 1
	}
}

void frame_tick() {
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
     160:	2e c0       	rjmp	.+92     	; 0x1be <frame_tick+0x6a>
		frame_buff[frame_index] = wan_usart_data_read();
     162:	c0 91 2b 01 	lds	r28, 0x012B
     166:	d0 91 2c 01 	lds	r29, 0x012C
     16a:	0e 94 8c 04 	call	0x918	; 0x918 <wan_usart_data_read>
     16e:	c3 5d       	subi	r28, 0xD3	; 211
     170:	de 4f       	sbci	r29, 0xFE	; 254
     172:	88 83       	st	Y, r24
		if (frame_index == 0) {
     174:	80 91 2b 01 	lds	r24, 0x012B
     178:	90 91 2c 01 	lds	r25, 0x012C
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	41 f4       	brne	.+16     	; 0x190 <frame_tick+0x3c>
			frame_length = frame_buff[frame_index];
     180:	f8 01       	movw	r30, r16
     182:	20 81       	ld	r18, Z
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	30 93 2a 01 	sts	0x012A, r19
     18a:	20 93 29 01 	sts	0x0129, r18
     18e:	12 c0       	rjmp	.+36     	; 0x1b4 <frame_tick+0x60>
		} else if (frame_index >= frame_length) {
     190:	20 91 29 01 	lds	r18, 0x0129
     194:	30 91 2a 01 	lds	r19, 0x012A
     198:	82 17       	cp	r24, r18
     19a:	93 07       	cpc	r25, r19
     19c:	5c f0       	brlt	.+22     	; 0x1b4 <frame_tick+0x60>
			frame_ready = true;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 7d 01 	sts	0x017D, r24
			while (wan_usart_data_available())
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <frame_tick+0x56>
				wan_usart_data_read();
     1a6:	0e 94 8c 04 	call	0x918	; 0x918 <wan_usart_data_read>
		frame_buff[frame_index] = wan_usart_data_read();
		if (frame_index == 0) {
			frame_length = frame_buff[frame_index];
		} else if (frame_index >= frame_length) {
			frame_ready = true;
			while (wan_usart_data_available())
     1aa:	0e 94 86 04 	call	0x90c	; 0x90c <wan_usart_data_available>
     1ae:	81 11       	cpse	r24, r1
     1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <frame_tick+0x52>
     1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <frame_tick+0x72>
				wan_usart_data_read();
			break;
		}

		frame_index++;
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 2c 01 	sts	0x012C, r25
     1ba:	80 93 2b 01 	sts	0x012B, r24
	}
}

void frame_tick() {
	// do some sanity checks on buffer overruns
	while (wan_usart_data_available()) {
     1be:	0e 94 86 04 	call	0x90c	; 0x90c <wan_usart_data_available>
     1c2:	81 11       	cpse	r24, r1
     1c4:	ce cf       	rjmp	.-100    	; 0x162 <frame_tick+0xe>
			break;
		}

		frame_index++;
	}
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <build_app_msg>:
		}
		break;
	}
}

void build_app_msg(btle_msg_t *btle_msg, app_msg_t *msg) {
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	dc 01       	movw	r26, r24
     1d6:	fb 01       	movw	r30, r22

	msg->messageType = 0x01;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 83       	st	Z, r24
	msg->nodeType = 0x01;
     1dc:	81 83       	std	Z+1, r24	; 0x01
	msg->extAddr = btle_msg->mac;
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	7c 91       	ld	r23, X
     1e2:	11 97       	sbiw	r26, 0x01	; 1
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	6c 91       	ld	r22, X
     1e8:	12 97       	sbiw	r26, 0x02	; 2
     1ea:	13 96       	adiw	r26, 0x03	; 3
     1ec:	5c 91       	ld	r21, X
     1ee:	13 97       	sbiw	r26, 0x03	; 3
     1f0:	14 96       	adiw	r26, 0x04	; 4
     1f2:	4c 91       	ld	r20, X
     1f4:	14 97       	sbiw	r26, 0x04	; 4
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	3c 91       	ld	r19, X
     1fa:	15 97       	sbiw	r26, 0x05	; 5
     1fc:	16 96       	adiw	r26, 0x06	; 6
     1fe:	2c 91       	ld	r18, X
     200:	16 97       	sbiw	r26, 0x06	; 6
     202:	17 96       	adiw	r26, 0x07	; 7
     204:	9c 91       	ld	r25, X
     206:	17 97       	sbiw	r26, 0x07	; 7
     208:	18 96       	adiw	r26, 0x08	; 8
     20a:	8c 91       	ld	r24, X
     20c:	18 97       	sbiw	r26, 0x08	; 8
     20e:	72 83       	std	Z+2, r23	; 0x02
     210:	63 83       	std	Z+3, r22	; 0x03
     212:	54 83       	std	Z+4, r21	; 0x04
     214:	45 83       	std	Z+5, r20	; 0x05
     216:	36 83       	std	Z+6, r19	; 0x06
     218:	27 83       	std	Z+7, r18	; 0x07
     21a:	90 87       	std	Z+8, r25	; 0x08
     21c:	81 87       	std	Z+9, r24	; 0x09
	msg->shortAddr = shared.mac & 0x0000FFFF;
     21e:	90 91 f4 0b 	lds	r25, 0x0BF4
     222:	80 91 f5 0b 	lds	r24, 0x0BF5
     226:	d0 91 f6 0b 	lds	r29, 0x0BF6
     22a:	c0 91 f7 0b 	lds	r28, 0x0BF7
     22e:	70 91 f8 0b 	lds	r23, 0x0BF8
     232:	60 91 f9 0b 	lds	r22, 0x0BF9
     236:	50 91 fa 0b 	lds	r21, 0x0BFA
     23a:	40 91 fb 0b 	lds	r20, 0x0BFB
     23e:	92 87       	std	Z+10, r25	; 0x0a
     240:	83 87       	std	Z+11, r24	; 0x0b
	msg->routerAddr = shared.mac;
     242:	94 87       	std	Z+12, r25	; 0x0c
     244:	85 87       	std	Z+13, r24	; 0x0d
     246:	d6 87       	std	Z+14, r29	; 0x0e
     248:	c7 87       	std	Z+15, r28	; 0x0f
     24a:	70 8b       	std	Z+16, r23	; 0x10
     24c:	61 8b       	std	Z+17, r22	; 0x11
     24e:	52 8b       	std	Z+18, r21	; 0x12
     250:	43 8b       	std	Z+19, r20	; 0x13
	//softVersion;
	//channelMask;
	msg->panId = 0x1973; // need to set pan in zigbit
     252:	83 e7       	ldi	r24, 0x73	; 115
     254:	99 e1       	ldi	r25, 0x19	; 25
     256:	95 8b       	std	Z+21, r25	; 0x15
     258:	84 8b       	std	Z+20, r24	; 0x14
	msg->workingChannel = 0x16;
     25a:	86 e1       	ldi	r24, 0x16	; 22
     25c:	86 8b       	std	Z+22, r24	; 0x16
	msg->parentShortAddr = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 8f       	std	Z+24, r25	; 0x18
     264:	87 8b       	std	Z+23, r24	; 0x17
	msg->lqi = 0;
     266:	11 8e       	std	Z+25, r1	; 0x19

	msg->rssi = btle_msg->rssi;
     268:	8c 91       	ld	r24, X
     26a:	82 8f       	std	Z+26, r24	; 0x1a
	msg->battery = btle_msg->batt;
     26c:	19 96       	adiw	r26, 0x09	; 9
     26e:	4d 91       	ld	r20, X+
     270:	5c 91       	ld	r21, X
     272:	1a 97       	sbiw	r26, 0x0a	; 10
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	44 8f       	std	Z+28, r20	; 0x1c
     27a:	55 8f       	std	Z+29, r21	; 0x1d
     27c:	66 8f       	std	Z+30, r22	; 0x1e
     27e:	77 8f       	std	Z+31, r23	; 0x1f
	msg->temperature = btle_msg->temp;
     280:	1b 96       	adiw	r26, 0x0b	; 11
     282:	8d 91       	ld	r24, X+
     284:	9c 91       	ld	r25, X
     286:	1c 97       	sbiw	r26, 0x0c	; 12
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	80 a3       	std	Z+32, r24	; 0x20
     28e:	91 a3       	std	Z+33, r25	; 0x21
     290:	a2 a3       	std	Z+34, r26	; 0x22
     292:	b3 a3       	std	Z+35, r27	; 0x23

	// Calculate CS
	msg->cs = 0;
     294:	14 a2       	std	Z+36, r1	; 0x24
	for (int i=0; i < sizeof(app_msg_t)-1; msg->cs ^= ((uint8_t*)msg)[i++]) ;
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	df 01       	movw	r26, r30
     2a2:	a2 0f       	add	r26, r18
     2a4:	b3 1f       	adc	r27, r19
     2a6:	44 a1       	ldd	r20, Z+36	; 0x24
     2a8:	2c 91       	ld	r18, X
     2aa:	24 27       	eor	r18, r20
     2ac:	24 a3       	std	Z+36, r18	; 0x24
     2ae:	9c 01       	movw	r18, r24
     2b0:	84 32       	cpi	r24, 0x24	; 36
     2b2:	91 05       	cpc	r25, r1
     2b4:	a1 f7       	brne	.-24     	; 0x29e <build_app_msg+0xce>
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <wan_state_wait_for_data>:
		}
		wan_reset_frame();
	}
}

void wan_state_wait_for_data(void) {
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	cf 58       	subi	r28, 0x8F	; 143
     2ce:	d1 09       	sbc	r29, r1
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
	// check if we have data to send
	if (circular_queue_data_available()) {
     2da:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <circular_queue_data_available>
     2de:	88 23       	and	r24, r24
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <wan_state_wait_for_data+0x28>
     2e2:	79 c0       	rjmp	.+242    	; 0x3d6 <wan_state_wait_for_data+0x11a>
		// check to see if we can send (network not busy)
		if (NWK_READY) {
     2e4:	18 9b       	sbis	0x03, 0	; 3
     2e6:	77 c0       	rjmp	.+238    	; 0x3d6 <wan_state_wait_for_data+0x11a>
     2e8:	8e 01       	movw	r16, r28
     2ea:	0a 58       	subi	r16, 0x8A	; 138
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
     2ee:	78 01       	movw	r14, r16
     2f0:	85 e1       	ldi	r24, 0x15	; 21
     2f2:	e8 0e       	add	r14, r24
     2f4:	f1 1c       	adc	r15, r1

			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++) {
				temp[i] = circular_queue_data_read();
     2f6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <circular_queue_data_read>
     2fa:	f8 01       	movw	r30, r16
     2fc:	81 93       	st	Z+, r24
     2fe:	8f 01       	movw	r16, r30
		// check to see if we can send (network not busy)
		if (NWK_READY) {

			btle_msg_t *msg;
			uint8_t temp[sizeof(btle_msg_t)];
			for (int i = 0; i < sizeof(btle_msg_t); i++) {
     300:	ee 15       	cp	r30, r14
     302:	ff 05       	cpc	r31, r15
     304:	c1 f7       	brne	.-16     	; 0x2f6 <wan_state_wait_for_data+0x3a>

			app_msg_t app_msg;
			cmd_send_header_t cmd_header;
			uint8_t frame[80];

			build_app_msg(msg, &app_msg);
     306:	be 01       	movw	r22, r28
     308:	6f 5a       	subi	r22, 0xAF	; 175
     30a:	7f 4f       	sbci	r23, 0xFF	; 255
     30c:	ce 01       	movw	r24, r28
     30e:	8a 58       	subi	r24, 0x8A	; 138
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <build_app_msg>

			frame[0] = sizeof(cmd_header) + sizeof(app_msg) + 1;
     316:	8b e2       	ldi	r24, 0x2B	; 43
     318:	89 83       	std	Y+1, r24	; 0x01

			if (msg->type == MSG_TYPE_IN_PROX)
     31a:	c6 57       	subi	r28, 0x76	; 118
     31c:	df 4f       	sbci	r29, 0xFF	; 255
     31e:	88 81       	ld	r24, Y
     320:	ca 58       	subi	r28, 0x8A	; 138
     322:	d0 40       	sbci	r29, 0x00	; 0
     324:	85 30       	cpi	r24, 0x05	; 5
     326:	21 f4       	brne	.+8      	; 0x330 <wan_state_wait_for_data+0x74>
				app_msg.messageType = CMD_IN_PROX;
     328:	62 96       	adiw	r28, 0x12	; 18
     32a:	8f af       	std	Y+63, r24	; 0x3f
     32c:	62 97       	sbiw	r28, 0x12	; 18
     32e:	33 c0       	rjmp	.+102    	; 0x396 <wan_state_wait_for_data+0xda>
			else if (msg->type == MSG_TYPE_OUT_PROX)
     330:	86 30       	cpi	r24, 0x06	; 6
     332:	89 f5       	brne	.+98     	; 0x396 <wan_state_wait_for_data+0xda>
				app_msg.messageType = CMD_OUT_PROX;
     334:	62 96       	adiw	r28, 0x12	; 18
     336:	8f af       	std	Y+63, r24	; 0x3f
     338:	62 97       	sbiw	r28, 0x12	; 18
     33a:	2d c0       	rjmp	.+90     	; 0x396 <wan_state_wait_for_data+0xda>
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     33c:	ab e8       	ldi	r26, 0x8B	; 139
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	ac 0f       	add	r26, r28
     342:	bd 1f       	adc	r27, r29
     344:	a2 0f       	add	r26, r18
     346:	b3 1f       	adc	r27, r19
     348:	2c 91       	ld	r18, X
     34a:	21 93       	st	Z+, r18
			cmd_header.short_id = 0x0000;
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	9c 01       	movw	r18, r24
     350:	85 30       	cpi	r24, 0x05	; 5
     352:	91 05       	cpc	r25, r1
     354:	99 f7       	brne	.-26     	; 0x33c <wan_state_wait_for_data+0x80>
     356:	fe 01       	movw	r30, r28
     358:	37 96       	adiw	r30, 0x07	; 7
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
			cmd_header.short_id = 0x0000;
			cmd_header.message_length = sizeof(app_msg);

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
				frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
     362:	a1 e5       	ldi	r26, 0x51	; 81
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ac 0f       	add	r26, r28
     368:	bd 1f       	adc	r27, r29
     36a:	a2 0f       	add	r26, r18
     36c:	b3 1f       	adc	r27, r19
     36e:	2c 91       	ld	r18, X
     370:	21 93       	st	Z+, r18
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
				frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
			}
			// message
			for (int i = 0; i < sizeof(app_msg_t); i++) {
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	9c 01       	movw	r18, r24
     376:	85 32       	cpi	r24, 0x25	; 37
     378:	91 05       	cpc	r25, r1
     37a:	99 f7       	brne	.-26     	; 0x362 <wan_state_wait_for_data+0xa6>
				frame[frame_index++] = ((uint8_t *) (&app_msg))[i];
			}
			// checksum
			frame[frame_index++] = 0xFF;
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	8c a7       	std	Y+44, r24	; 0x2c

				// push out the lw-mesh radio
			wan_usart_transmit_bytes((char*) frame, frame_index);
     380:	6c e2       	ldi	r22, 0x2C	; 44
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 ad 04 	call	0x95a	; 0x95a <wan_usart_transmit_bytes>

			state = WAIT_FOR_NWK_BUSY;
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	80 93 28 01 	sts	0x0128, r24
			LED_ON
     392:	5f 98       	cbi	0x0b, 7	; 11
     394:	20 c0       	rjmp	.+64     	; 0x3d6 <wan_state_wait_for_data+0x11a>
				app_msg.messageType = CMD_OUT_PROX;

#ifdef ZB_ACK
			cmd_header.command = CMD_ACK_SEND;
#else
			cmd_header.command = CMD_SEND;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	c5 57       	subi	r28, 0x75	; 117
     39a:	df 4f       	sbci	r29, 0xFF	; 255
     39c:	88 83       	st	Y, r24
     39e:	cb 58       	subi	r28, 0x8B	; 139
     3a0:	d0 40       	sbci	r29, 0x00	; 0
#endif
			cmd_header.pan_id = 0x1973;
     3a2:	83 e7       	ldi	r24, 0x73	; 115
     3a4:	99 e1       	ldi	r25, 0x19	; 25
     3a6:	c4 57       	subi	r28, 0x74	; 116
     3a8:	df 4f       	sbci	r29, 0xFF	; 255
     3aa:	99 83       	std	Y+1, r25	; 0x01
     3ac:	88 83       	st	Y, r24
     3ae:	cc 58       	subi	r28, 0x8C	; 140
     3b0:	d0 40       	sbci	r29, 0x00	; 0
			cmd_header.short_id = 0x0000;
     3b2:	c2 57       	subi	r28, 0x72	; 114
     3b4:	df 4f       	sbci	r29, 0xFF	; 255
     3b6:	18 82       	st	Y, r1
     3b8:	ce 58       	subi	r28, 0x8E	; 142
     3ba:	d0 40       	sbci	r29, 0x00	; 0
			cmd_header.message_length = sizeof(app_msg);
     3bc:	85 e2       	ldi	r24, 0x25	; 37
     3be:	c1 57       	subi	r28, 0x71	; 113
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	88 83       	st	Y, r24
     3c4:	cf 58       	subi	r28, 0x8F	; 143
     3c6:	d0 40       	sbci	r29, 0x00	; 0
     3c8:	fe 01       	movw	r30, r28
     3ca:	32 96       	adiw	r30, 0x02	; 2

			int frame_index = 1;
			// header
			for (int i = 0; i < sizeof(cmd_header); i++) {
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	b3 cf       	rjmp	.-154    	; 0x33c <wan_state_wait_for_data+0x80>

			state = WAIT_FOR_NWK_BUSY;
			LED_ON
		}
	}
}
     3d6:	c1 57       	subi	r28, 0x71	; 113
     3d8:	df 4f       	sbci	r29, 0xFF	; 255
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	08 95       	ret

000003f2 <wan_tick>:
	}
}

void wan_tick() {

	frame_tick();
     3f2:	0e 94 aa 00 	call	0x154	; 0x154 <frame_tick>

	switch (state) {
     3f6:	80 91 28 01 	lds	r24, 0x0128
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	49 f0       	breq	.+18     	; 0x410 <wan_tick+0x1e>
     3fe:	28 f0       	brcs	.+10     	; 0x40a <wan_tick+0x18>
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	49 f0       	breq	.+18     	; 0x416 <wan_tick+0x24>
     404:	83 30       	cpi	r24, 0x03	; 3
     406:	61 f0       	breq	.+24     	; 0x420 <wan_tick+0x2e>
     408:	08 95       	ret
	case CONFIGURE:
		wan_state_configure();
     40a:	0e 94 92 00 	call	0x124	; 0x124 <wan_state_configure>
		break;
     40e:	08 95       	ret
	case WAIT_FOR_DATA:
		wan_state_wait_for_data();
     410:	0e 94 5e 01 	call	0x2bc	; 0x2bc <wan_state_wait_for_data>
		break;
     414:	08 95       	ret
	case WAIT_FOR_NWK_BUSY:
		//REVIEW: Do wee need to monitor for hung status?
		if (NWK_BUSY)
     416:	83 b1       	in	r24, 0x03	; 3
			state = WAIT_FOR_NWK_READY;
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	80 93 28 01 	sts	0x0128, r24
     41e:	08 95       	ret
		break;
	case WAIT_FOR_NWK_READY:
		//REVIEW: Do wee need to monitor for hung status?
		if (NWK_READY){
     420:	18 9b       	sbis	0x03, 0	; 3
     422:	04 c0       	rjmp	.+8      	; 0x42c <wan_tick+0x3a>
			state = WAIT_FOR_DATA;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	80 93 28 01 	sts	0x0128, r24
			LED_OFF
     42a:	5f 9a       	sbi	0x0b, 7	; 11
     42c:	08 95       	ret

0000042e <wan_enqueue>:
	for (int i=0; i < sizeof(app_msg_t)-1; msg->cs ^= ((uint8_t*)msg)[i++]) ;
}

queue_results_t wan_enqueue(wan_msg_t *msg) {
	//queue_results_t result = queue_enqueue(&wan_queue, &msg, sizeof(wan_msg_t));
	queue_results_t result = queue_enqueue(&wan_queue, msg, sizeof(wan_msg_t));
     42e:	4d e0       	ldi	r20, 0x0D	; 13
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	bc 01       	movw	r22, r24
     434:	8e ea       	ldi	r24, 0xAE	; 174
     436:	99 e0       	ldi	r25, 0x09	; 9
     438:	0e 94 13 07 	call	0xe26	; 0xe26 <queue_enqueue>

	return result;
}
     43c:	08 95       	ret

0000043e <wan_get_device_address>:
	SEND_MAC_REQ, CONFIG_NTW_REQ, AWAITING_RESP, FINISHED
};
uint8_t state = SEND_MAC_REQ;

void wan_get_device_address()
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	2a 97       	sbiw	r28, 0x0a	; 10
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	cmd_header_t cmd_header;
	uint8_t frame[10];
	frame[0] = sizeof(cmd_header) + 1;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	89 83       	std	Y+1, r24	; 0x01
	cmd_header.command = CMD_GET_ADDRESS;
     456:	84 e0       	ldi	r24, 0x04	; 4
	int frame_index = 1;
	// header
	for (int i = 0; i < sizeof(cmd_header); i++)
	{
		frame[frame_index++] = ((uint8_t *) (&cmd_header))[i];
     458:	8a 83       	std	Y+2, r24	; 0x02
	}
	// checksum
	frame[frame_index++] = 0xFF;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	8b 83       	std	Y+3, r24	; 0x03

	wan_usart_transmit_bytes((char*) frame, frame_index);
     45e:	63 e0       	ldi	r22, 0x03	; 3
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	ce 01       	movw	r24, r28
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	0e 94 ad 04 	call	0x95a	; 0x95a <wan_usart_transmit_bytes>
}
     46a:	2a 96       	adiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <wan_config_network>:

void wan_config_network()
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	60 97       	sbiw	r28, 0x10	; 16
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
	cmd_config_ntw_t config_ntw;

	config_ntw.command = CMD_CONFIG_NETWORK;
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	89 83       	std	Y+1, r24	; 0x01
	config_ntw.pan_id = 0x1973;
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	99 e1       	ldi	r25, 0x19	; 25
     498:	9b 83       	std	Y+3, r25	; 0x03
     49a:	8a 83       	std	Y+2, r24	; 0x02
	config_ntw.short_id = shared.mac & 0x0000FFFF;
     49c:	80 91 f4 0b 	lds	r24, 0x0BF4
     4a0:	90 91 f5 0b 	lds	r25, 0x0BF5
     4a4:	9d 83       	std	Y+5, r25	; 0x05
     4a6:	8c 83       	std	Y+4, r24	; 0x04
	config_ntw.channel = 0x16;
     4a8:	86 e1       	ldi	r24, 0x16	; 22
     4aa:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message
     4ac:	87 e0       	ldi	r24, 0x07	; 7
     4ae:	8f 83       	std	Y+7, r24	; 0x07
     4b0:	fe 01       	movw	r30, r28
     4b2:	38 96       	adiw	r30, 0x08	; 8

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
     4bc:	a1 e0       	ldi	r26, 0x01	; 1
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	ac 0f       	add	r26, r28
     4c2:	bd 1f       	adc	r27, r29
     4c4:	a2 0f       	add	r26, r18
     4c6:	b3 1f       	adc	r27, r19
     4c8:	2c 91       	ld	r18, X
     4ca:	21 93       	st	Z+, r18
	uint8_t frame[10];
	frame[0] = sizeof(config_ntw) + 1; // size of message

	int frame_index = 1;
	//config
	for (int i = 0; i < sizeof(config_ntw); i++)
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	9c 01       	movw	r18, r24
     4d0:	86 30       	cpi	r24, 0x06	; 6
     4d2:	91 05       	cpc	r25, r1
     4d4:	99 f7       	brne	.-26     	; 0x4bc <wan_config_network+0x40>
	{
		frame[frame_index++] = ((uint8_t *) (&config_ntw))[i];
	}
	// checksum
	frame[frame_index++] = 0xFF;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	8e 87       	std	Y+14, r24	; 0x0e

	wan_usart_transmit_bytes((char*) frame, frame_index);
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	07 96       	adiw	r24, 0x07	; 7
     4e2:	0e 94 ad 04 	call	0x95a	; 0x95a <wan_usart_transmit_bytes>
}
     4e6:	60 96       	adiw	r28, 0x10	; 16
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <config_mac_resp>:

	return (state == FINISHED ? true : false);
}

void config_mac_resp(mac_resp_t * resp)
{
     4f8:	fc 01       	movw	r30, r24
	shared.mac = resp->wan_device_address;
     4fa:	71 81       	ldd	r23, Z+1	; 0x01
     4fc:	62 81       	ldd	r22, Z+2	; 0x02
     4fe:	53 81       	ldd	r21, Z+3	; 0x03
     500:	44 81       	ldd	r20, Z+4	; 0x04
     502:	35 81       	ldd	r19, Z+5	; 0x05
     504:	26 81       	ldd	r18, Z+6	; 0x06
     506:	97 81       	ldd	r25, Z+7	; 0x07
     508:	80 85       	ldd	r24, Z+8	; 0x08
     50a:	70 93 f4 0b 	sts	0x0BF4, r23
     50e:	60 93 f5 0b 	sts	0x0BF5, r22
     512:	50 93 f6 0b 	sts	0x0BF6, r21
     516:	40 93 f7 0b 	sts	0x0BF7, r20
     51a:	30 93 f8 0b 	sts	0x0BF8, r19
     51e:	20 93 f9 0b 	sts	0x0BF9, r18
     522:	90 93 fa 0b 	sts	0x0BFA, r25
     526:	80 93 fb 0b 	sts	0x0BFB, r24
	state = CONFIG_NTW_REQ;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 7e 01 	sts	0x017E, r24
     530:	08 95       	ret

00000532 <wan_config_received>:
	wan_usart_transmit_bytes((char*) frame, frame_index);
}

bool wan_config_received(uint8_t * buff)
{
	resp_type = buff[1];
     532:	fc 01       	movw	r30, r24
     534:	21 81       	ldd	r18, Z+1	; 0x01
     536:	20 93 7f 01 	sts	0x017F, r18
	switch (resp_type)
     53a:	23 30       	cpi	r18, 0x03	; 3
     53c:	31 f0       	breq	.+12     	; 0x54a <wan_config_received+0x18>
     53e:	24 30       	cpi	r18, 0x04	; 4
     540:	39 f4       	brne	.+14     	; 0x550 <wan_config_received+0x1e>
	{
	case resp_type_address:
		config_mac_resp((mac_resp_t *) &buff[1]);
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <config_mac_resp>
		break;
     548:	03 c0       	rjmp	.+6      	; 0x550 <wan_config_received+0x1e>
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	80 93 7e 01 	sts	0x017E, r24
	case resp_type_config_ntw:
		config_ntw_resp((config_ntw_resp_t *) &buff[1]);
		break;
	}

	return (state == FINISHED ? true : false);
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 91 7e 01 	lds	r25, 0x017E
     556:	93 30       	cpi	r25, 0x03	; 3
     558:	09 f0       	breq	.+2      	; 0x55c <wan_config_received+0x2a>
     55a:	80 e0       	ldi	r24, 0x00	; 0
}
     55c:	08 95       	ret

0000055e <config_ntw_resp>:
	state = CONFIG_NTW_REQ;
}

void config_ntw_resp(config_ntw_resp_t * resp)
{
	state = FINISHED;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 7e 01 	sts	0x017E, r24
     564:	08 95       	ret

00000566 <no_ack_status_resp>:
}

void no_ack_status_resp(no_ack_status_resp_t * resp)
{
	state = FINISHED;
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	80 93 7e 01 	sts	0x017E, r24
     56c:	08 95       	ret

0000056e <wan_config_tick>:
}

bool wan_config_tick()
{
	switch (state)
     56e:	80 91 7e 01 	lds	r24, 0x017E
     572:	88 23       	and	r24, r24
     574:	19 f0       	breq	.+6      	; 0x57c <wan_config_tick+0xe>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	39 f0       	breq	.+14     	; 0x588 <wan_config_tick+0x1a>
     57a:	0b c0       	rjmp	.+22     	; 0x592 <wan_config_tick+0x24>
	{
	case SEND_MAC_REQ:
		wan_get_device_address();
     57c:	0e 94 1f 02 	call	0x43e	; 0x43e <wan_get_device_address>
		state = AWAITING_RESP;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	80 93 7e 01 	sts	0x017E, r24
		break;
     586:	05 c0       	rjmp	.+10     	; 0x592 <wan_config_tick+0x24>
	case CONFIG_NTW_REQ:
		wan_config_network();
     588:	0e 94 3e 02 	call	0x47c	; 0x47c <wan_config_network>
		state = AWAITING_RESP;
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	80 93 7e 01 	sts	0x017E, r24
	}
	return (state == FINISHED ? true : false);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 91 7e 01 	lds	r25, 0x017E
     598:	93 30       	cpi	r25, 0x03	; 3
     59a:	09 f0       	breq	.+2      	; 0x59e <wan_config_tick+0x30>
     59c:	80 e0       	ldi	r24, 0x00	; 0
}
     59e:	08 95       	ret

000005a0 <wan_driver_init>:
	}
}

static void init_buffer()
{
	wan_line_index = 0;
     5a0:	10 92 81 01 	sts	0x0181, r1
     5a4:	10 92 80 01 	sts	0x0180, r1
	memset(wan_line_buffer, '\0', sizeof(wan_line_buffer));
     5a8:	81 e8       	ldi	r24, 0x81	; 129
     5aa:	e3 ec       	ldi	r30, 0xC3	; 195
     5ac:	f9 e0       	ldi	r31, 0x09	; 9
     5ae:	df 01       	movw	r26, r30
     5b0:	98 2f       	mov	r25, r24
     5b2:	1d 92       	st	X+, r1
     5b4:	9a 95       	dec	r25
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <wan_driver_init+0x12>
}

static void init_lines()
{
	memset(wan_lines, '\0', sizeof(wan_lines));
     5b8:	e4 e4       	ldi	r30, 0x44	; 68
     5ba:	fa e0       	ldi	r31, 0x0A	; 10
     5bc:	df 01       	movw	r26, r30
     5be:	1d 92       	st	X+, r1
     5c0:	8a 95       	dec	r24
     5c2:	e9 f7       	brne	.-6      	; 0x5be <wan_driver_init+0x1e>
     5c4:	08 95       	ret

000005c6 <wan_driver_tick>:
	init_lines();
}

void wan_driver_tick()
{
	if (wan_usart_data_available())
     5c6:	0e 94 86 04 	call	0x90c	; 0x90c <wan_usart_data_available>
     5ca:	08 95       	ret

000005cc <clock_init>:
//volatile clock_time_t future;

void clock_init()
{
	// timer ctc mode
		TCCR0A |= _BV(WGM01);
     5cc:	84 b5       	in	r24, 0x24	; 36
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	84 bd       	out	0x24, r24	; 36

		// F_CPU/64/1000 = 125
		OCR0A = F_CPU/64/1000;
     5d2:	8d e7       	ldi	r24, 0x7D	; 125
     5d4:	87 bd       	out	0x27, r24	; 39
		// Enable timer set prescalar to 64
		TCCR0B |= _BV(CS01) | _BV(CS00);
     5d6:	85 b5       	in	r24, 0x25	; 37
     5d8:	83 60       	ori	r24, 0x03	; 3
     5da:	85 bd       	out	0x25, r24	; 37

		// Enable Output Compare Match A
		TIMSK0 = _BV(OCIE0A);
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	80 93 6e 00 	sts	0x006E, r24
     5e2:	08 95       	ret

000005e4 <clock_time>:
}

clock_time_t clock_time()
{
	return clock_millis;
     5e4:	60 91 c5 0a 	lds	r22, 0x0AC5
     5e8:	70 91 c6 0a 	lds	r23, 0x0AC6
     5ec:	80 91 c7 0a 	lds	r24, 0x0AC7
     5f0:	90 91 c8 0a 	lds	r25, 0x0AC8
}
     5f4:	08 95       	ret

000005f6 <delay_millis>:

void delay_millis(clock_time_t millis)
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     5fa:	00 91 c5 0a 	lds	r16, 0x0AC5
     5fe:	10 91 c6 0a 	lds	r17, 0x0AC6
     602:	20 91 c7 0a 	lds	r18, 0x0AC7
     606:	30 91 c8 0a 	lds	r19, 0x0AC8
}

void delay_millis(clock_time_t millis)
{
	clock_time_t future = clock_time() + millis;
     60a:	ab 01       	movw	r20, r22
     60c:	bc 01       	movw	r22, r24
     60e:	40 0f       	add	r20, r16
     610:	51 1f       	adc	r21, r17
     612:	62 1f       	adc	r22, r18
     614:	73 1f       	adc	r23, r19
		TIMSK0 = _BV(OCIE0A);
}

clock_time_t clock_time()
{
	return clock_millis;
     616:	80 91 c5 0a 	lds	r24, 0x0AC5
     61a:	90 91 c6 0a 	lds	r25, 0x0AC6
     61e:	a0 91 c7 0a 	lds	r26, 0x0AC7
     622:	b0 91 c8 0a 	lds	r27, 0x0AC8
{
	clock_time_t future = clock_time() + millis;

	while(true)
	{
		if(clock_time() > future)
     626:	48 17       	cp	r20, r24
     628:	59 07       	cpc	r21, r25
     62a:	6a 07       	cpc	r22, r26
     62c:	7b 07       	cpc	r23, r27
     62e:	98 f7       	brcc	.-26     	; 0x616 <delay_millis+0x20>
		{
			break;
		}
	}
}
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
	clock_millis++;
     648:	80 91 c5 0a 	lds	r24, 0x0AC5
     64c:	90 91 c6 0a 	lds	r25, 0x0AC6
     650:	a0 91 c7 0a 	lds	r26, 0x0AC7
     654:	b0 91 c8 0a 	lds	r27, 0x0AC8
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	a1 1d       	adc	r26, r1
     65c:	b1 1d       	adc	r27, r1
     65e:	80 93 c5 0a 	sts	0x0AC5, r24
     662:	90 93 c6 0a 	sts	0x0AC6, r25
     666:	a0 93 c7 0a 	sts	0x0AC7, r26
     66a:	b0 93 c8 0a 	sts	0x0AC8, r27
}
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <isr_tick>:

void isr_tick()
{
	clock_millis++;
     680:	80 91 c5 0a 	lds	r24, 0x0AC5
     684:	90 91 c6 0a 	lds	r25, 0x0AC6
     688:	a0 91 c7 0a 	lds	r26, 0x0AC7
     68c:	b0 91 c8 0a 	lds	r27, 0x0AC8
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	a1 1d       	adc	r26, r1
     694:	b1 1d       	adc	r27, r1
     696:	80 93 c5 0a 	sts	0x0AC5, r24
     69a:	90 93 c6 0a 	sts	0x0AC6, r25
     69e:	a0 93 c7 0a 	sts	0x0AC7, r26
     6a2:	b0 93 c8 0a 	sts	0x0AC8, r27
     6a6:	08 95       	ret

000006a8 <config_init>:

config_t config;

void config_init()
{
	config.var_bool = false;
     6a8:	10 92 c9 0a 	sts	0x0AC9, r1
	config.var_int8_t = 0;
     6ac:	10 92 d0 0a 	sts	0x0AD0, r1
	config.var_int16_t = 0;
     6b0:	10 92 cf 0a 	sts	0x0ACF, r1
     6b4:	10 92 ce 0a 	sts	0x0ACE, r1
	config.var_int32_t = 0;
     6b8:	10 92 ca 0a 	sts	0x0ACA, r1
     6bc:	10 92 cb 0a 	sts	0x0ACB, r1
     6c0:	10 92 cc 0a 	sts	0x0ACC, r1
     6c4:	10 92 cd 0a 	sts	0x0ACD, r1
	config.var_uint8_t = 0;
     6c8:	10 92 d7 0a 	sts	0x0AD7, r1
	config.var_uint16_t = 0;
     6cc:	10 92 d6 0a 	sts	0x0AD6, r1
     6d0:	10 92 d5 0a 	sts	0x0AD5, r1
	config.var_uint32_t = 0;
     6d4:	10 92 d1 0a 	sts	0x0AD1, r1
     6d8:	10 92 d2 0a 	sts	0x0AD2, r1
     6dc:	10 92 d3 0a 	sts	0x0AD3, r1
     6e0:	10 92 d4 0a 	sts	0x0AD4, r1
     6e4:	08 95       	ret

000006e6 <load_config>:

}


void load_config()
{
     6e6:	08 95       	ret

000006e8 <write_config>:
}

void write_config()
{
     6e8:	08 95       	ret

000006ea <_btle_set_rx_cb>:

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     6ea:	90 93 d9 0a 	sts	0x0AD9, r25
     6ee:	80 93 d8 0a 	sts	0x0AD8, r24
     6f2:	08 95       	ret

000006f4 <btle_usart_init>:
}

void btle_usart_init()
{
	UBRR1H = UBRRH_VALUE;
     6f4:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     6f8:	8c e0       	ldi	r24, 0x0C	; 12
     6fa:	80 93 cc 00 	sts	0x00CC, r24

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     6fe:	e9 ec       	ldi	r30, 0xC9	; 201
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	88 68       	ori	r24, 0x88	; 136
     706:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     708:	80 81       	ld	r24, Z
     70a:	88 61       	ori	r24, 0x18	; 24
     70c:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     70e:	ea ec       	ldi	r30, 0xCA	; 202
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	86 60       	ori	r24, 0x06	; 6
     716:	80 83       	st	Z, r24
     718:	08 95       	ret

0000071a <btle_usart_init_cb>:
}

// not in use at this time
void btle_usart_init_cb(btle_rx_cb_t cb)
{
	UBRR1H = UBRRH_VALUE;
     71a:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
     71e:	2c e0       	ldi	r18, 0x0C	; 12
     720:	20 93 cc 00 	sts	0x00CC, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     724:	e9 ec       	ldi	r30, 0xC9	; 201
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	20 81       	ld	r18, Z
     72a:	28 68       	ori	r18, 0x88	; 136
     72c:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     72e:	20 81       	ld	r18, Z
     730:	28 61       	ori	r18, 0x18	; 24
     732:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     734:	ea ec       	ldi	r30, 0xCA	; 202
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	20 81       	ld	r18, Z
     73a:	26 60       	ori	r18, 0x06	; 6
     73c:	20 83       	st	Z, r18

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
	btle_rx_cb = cb;
     73e:	90 93 d9 0a 	sts	0x0AD9, r25
     742:	80 93 d8 0a 	sts	0x0AD8, r24
     746:	08 95       	ret

00000748 <btle_usart_put_char>:
	_btle_set_rx_cb(cb);
}

void btle_usart_put_char(unsigned char c)
{
	int i = (unsigned int)(btle_buffer.head + 1) % BTLE_RX_BUFFER_SIZE;
     748:	40 91 85 03 	lds	r20, 0x0385
     74c:	50 91 86 03 	lds	r21, 0x0386
     750:	9a 01       	movw	r18, r20
     752:	2f 5f       	subi	r18, 0xFF	; 255
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != btle_buffer.tail) {
     758:	60 91 87 03 	lds	r22, 0x0387
     75c:	70 91 88 03 	lds	r23, 0x0388
     760:	62 17       	cp	r22, r18
     762:	73 07       	cpc	r23, r19
     764:	41 f0       	breq	.+16     	; 0x776 <btle_usart_put_char+0x2e>
		btle_buffer.buffer[btle_buffer.head] = c;
     766:	fa 01       	movw	r30, r20
     768:	eb 57       	subi	r30, 0x7B	; 123
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	80 83       	st	Z, r24
		btle_buffer.head = i;
     76e:	30 93 86 03 	sts	0x0386, r19
     772:	20 93 85 03 	sts	0x0385, r18
     776:	08 95       	ret

00000778 <btle_usart_clear_buffer>:
}


void btle_usart_clear_buffer()
{
	memset(&btle_buffer, 0, sizeof(BTLE_BUFFER));
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	e5 e8       	ldi	r30, 0x85	; 133
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	df 01       	movw	r26, r30
     782:	9c 01       	movw	r18, r24
     784:	1d 92       	st	X+, r1
     786:	21 50       	subi	r18, 0x01	; 1
     788:	30 40       	sbci	r19, 0x00	; 0
     78a:	e1 f7       	brne	.-8      	; 0x784 <btle_usart_clear_buffer+0xc>
     78c:	08 95       	ret

0000078e <btle_usart_data_available>:
}

uint8_t btle_usart_data_available()
{
	return (uint8_t)(BTLE_RX_BUFFER_SIZE + btle_buffer.head - btle_buffer.tail) % BTLE_RX_BUFFER_SIZE;
     78e:	80 91 85 03 	lds	r24, 0x0385
     792:	90 91 87 03 	lds	r25, 0x0387
}
     796:	89 1b       	sub	r24, r25
     798:	08 95       	ret

0000079a <btle_usart_data_read>:

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
     79a:	20 91 87 03 	lds	r18, 0x0387
     79e:	30 91 88 03 	lds	r19, 0x0388
     7a2:	80 91 85 03 	lds	r24, 0x0385
     7a6:	90 91 86 03 	lds	r25, 0x0386
     7aa:	82 17       	cp	r24, r18
     7ac:	93 07       	cpc	r25, r19
     7ae:	61 f0       	breq	.+24     	; 0x7c8 <btle_usart_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
     7b0:	f9 01       	movw	r30, r18
     7b2:	eb 57       	subi	r30, 0x7B	; 123
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 81       	ld	r24, Z
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	31 70       	andi	r19, 0x01	; 1
     7be:	30 93 88 03 	sts	0x0388, r19
     7c2:	20 93 87 03 	sts	0x0387, r18
		return c;
     7c6:	08 95       	ret

uint8_t btle_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
		return -1;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
		return c;
	}
}
     7ca:	08 95       	ret

000007cc <btle_usart_transmit>:

void btle_usart_transmit(uint8_t data )
{
	while (!( UCSR1A & (1<<UDRE1)));
     7cc:	e8 ec       	ldi	r30, 0xC8	; 200
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	90 81       	ld	r25, Z
     7d2:	95 ff       	sbrs	r25, 5
     7d4:	fd cf       	rjmp	.-6      	; 0x7d0 <btle_usart_transmit+0x4>
	UDR1 = data;
     7d6:	80 93 ce 00 	sts	0x00CE, r24
     7da:	08 95       	ret

000007dc <btle_usart_transmit_bytes>:
}

void btle_usart_transmit_bytes(char data[], int size)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
	for (int i=0;i<size;i++)
     7e0:	16 16       	cp	r1, r22
     7e2:	17 06       	cpc	r1, r23
     7e4:	7c f4       	brge	.+30     	; 0x804 <btle_usart_transmit_bytes+0x28>
     7e6:	dc 01       	movw	r26, r24
     7e8:	86 0f       	add	r24, r22
     7ea:	97 1f       	adc	r25, r23
	{
		while (!( UCSR1A & (1<<UDRE1)));
     7ec:	e8 ec       	ldi	r30, 0xC8	; 200
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
     7f0:	ce ec       	ldi	r28, 0xCE	; 206
     7f2:	d0 e0       	ldi	r29, 0x00	; 0

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
	{
		while (!( UCSR1A & (1<<UDRE1)));
     7f4:	20 81       	ld	r18, Z
     7f6:	25 ff       	sbrs	r18, 5
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <btle_usart_transmit_bytes+0x18>
		UDR1 = data[i];
     7fa:	2d 91       	ld	r18, X+
     7fc:	28 83       	st	Y, r18
	UDR1 = data;
}

void btle_usart_transmit_bytes(char data[], int size)
{
	for (int i=0;i<size;i++)
     7fe:	a8 17       	cp	r26, r24
     800:	b9 07       	cpc	r27, r25
     802:	c1 f7       	brne	.-16     	; 0x7f4 <btle_usart_transmit_bytes+0x18>
	{
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
	}
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <btle_usart_transmit_string>:

void btle_usart_transmit_string(char * data)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
	unsigned char c = *data;
     80e:	fc 01       	movw	r30, r24
     810:	20 81       	ld	r18, Z

	while (c) {
     812:	22 23       	and	r18, r18
     814:	69 f0       	breq	.+26     	; 0x830 <btle_usart_transmit_string+0x26>
     816:	dc 01       	movw	r26, r24
     818:	11 96       	adiw	r26, 0x01	; 1
		while (!( UCSR1A & (1<<UDRE1)));
     81a:	e8 ec       	ldi	r30, 0xC8	; 200
     81c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = c;
     81e:	ce ec       	ldi	r28, 0xCE	; 206
     820:	d0 e0       	ldi	r29, 0x00	; 0
void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
		while (!( UCSR1A & (1<<UDRE1)));
     822:	80 81       	ld	r24, Z
     824:	85 ff       	sbrs	r24, 5
     826:	fd cf       	rjmp	.-6      	; 0x822 <btle_usart_transmit_string+0x18>
		UDR1 = c;
     828:	28 83       	st	Y, r18
		c = *(++data);
     82a:	2d 91       	ld	r18, X+

void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
     82c:	21 11       	cpse	r18, r1
     82e:	f9 cf       	rjmp	.-14     	; 0x822 <btle_usart_transmit_string+0x18>
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = c;
		c = *(++data);
	}
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <__vector_28>:

ISR(BTLE_ISR_VECTOR)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	cf 93       	push	r28
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
	char data = UDR1;
     85e:	c0 91 ce 00 	lds	r28, 0x00CE
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	btle_usart_put_char(data);
     862:	8c 2f       	mov	r24, r28
     864:	0e 94 a4 03 	call	0x748	; 0x748 <btle_usart_put_char>

	// debug callback to main program
	if (btle_rx_cb != 0)
     868:	e0 91 d8 0a 	lds	r30, 0x0AD8
     86c:	f0 91 d9 0a 	lds	r31, 0x0AD9
     870:	30 97       	sbiw	r30, 0x00	; 0
     872:	11 f0       	breq	.+4      	; 0x878 <__vector_28+0x42>
	{
		btle_rx_cb(data);
     874:	8c 2f       	mov	r24, r28
     876:	09 95       	icall
	}
}
     878:	ff 91       	pop	r31
     87a:	ef 91       	pop	r30
     87c:	cf 91       	pop	r28
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0b be       	out	0x3b, r0	; 59
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <wan_usart_init>:

WAN_BUFFER wan_buffer = { { 0 }, 0, 0 };

void wan_usart_init()
{
	UBRR0H = UBRRH_VALUE;
     8a0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	80 93 c4 00 	sts	0x00C4, r24

	// Enble receiver and transmitter
	UCSR0B |= (1 << RXCIE0) | (1 << TXEN0);
     8aa:	e1 ec       	ldi	r30, 0xC1	; 193
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	88 68       	ori	r24, 0x88	; 136
     8b2:	80 83       	st	Z, r24

	// Set rx and tx enable bits
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     8b4:	80 81       	ld	r24, Z
     8b6:	88 61       	ori	r24, 0x18	; 24
     8b8:	80 83       	st	Z, r24
	// Set databits to 8
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     8ba:	e2 ec       	ldi	r30, 0xC2	; 194
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	86 60       	ori	r24, 0x06	; 6
     8c2:	80 83       	st	Z, r24
     8c4:	08 95       	ret

000008c6 <wan_usart_put_char>:
}

void wan_usart_put_char(unsigned char c)
{
	int i = (unsigned int) (wan_buffer.head + 1) % WAN_RX_BUFFER_SIZE;
     8c6:	40 91 89 05 	lds	r20, 0x0589
     8ca:	50 91 8a 05 	lds	r21, 0x058A
     8ce:	9a 01       	movw	r18, r20
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	31 70       	andi	r19, 0x01	; 1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != wan_buffer.tail)
     8d6:	60 91 8b 05 	lds	r22, 0x058B
     8da:	70 91 8c 05 	lds	r23, 0x058C
     8de:	62 17       	cp	r22, r18
     8e0:	73 07       	cpc	r23, r19
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <wan_usart_put_char+0x2e>
	{
		wan_buffer.buffer[wan_buffer.head] = c;
     8e4:	fa 01       	movw	r30, r20
     8e6:	e7 57       	subi	r30, 0x77	; 119
     8e8:	fc 4f       	sbci	r31, 0xFC	; 252
     8ea:	80 83       	st	Z, r24
		wan_buffer.head = i;
     8ec:	30 93 8a 05 	sts	0x058A, r19
     8f0:	20 93 89 05 	sts	0x0589, r18
     8f4:	08 95       	ret

000008f6 <wan_usart_clear_buffer>:
	}
}

void wan_usart_clear_buffer()
{
	memset(&wan_buffer, 0, sizeof(WAN_BUFFER));
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	e9 e8       	ldi	r30, 0x89	; 137
     8fc:	f3 e0       	ldi	r31, 0x03	; 3
     8fe:	df 01       	movw	r26, r30
     900:	9c 01       	movw	r18, r24
     902:	1d 92       	st	X+, r1
     904:	21 50       	subi	r18, 0x01	; 1
     906:	30 40       	sbci	r19, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <wan_usart_clear_buffer+0xc>
     90a:	08 95       	ret

0000090c <wan_usart_data_available>:
}

uint8_t wan_usart_data_available(void)
{
	return (uint8_t) (WAN_RX_BUFFER_SIZE + wan_buffer.head - wan_buffer.tail)
     90c:	80 91 89 05 	lds	r24, 0x0589
     910:	90 91 8b 05 	lds	r25, 0x058B
			% WAN_RX_BUFFER_SIZE;
}
     914:	89 1b       	sub	r24, r25
     916:	08 95       	ret

00000918 <wan_usart_data_read>:

uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
     918:	20 91 8b 05 	lds	r18, 0x058B
     91c:	30 91 8c 05 	lds	r19, 0x058C
     920:	80 91 89 05 	lds	r24, 0x0589
     924:	90 91 8a 05 	lds	r25, 0x058A
     928:	82 17       	cp	r24, r18
     92a:	93 07       	cpc	r25, r19
     92c:	61 f0       	breq	.+24     	; 0x946 <wan_usart_data_read+0x2e>
	{
		return -1;
	} else
	{
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
     92e:	f9 01       	movw	r30, r18
     930:	e7 57       	subi	r30, 0x77	; 119
     932:	fc 4f       	sbci	r31, 0xFC	; 252
     934:	80 81       	ld	r24, Z
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	31 70       	andi	r19, 0x01	; 1
     93c:	30 93 8c 05 	sts	0x058C, r19
     940:	20 93 8b 05 	sts	0x058B, r18
				% WAN_RX_BUFFER_SIZE;
		return c;
     944:	08 95       	ret
uint8_t wan_usart_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
	{
		return -1;
     946:	8f ef       	ldi	r24, 0xFF	; 255
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
				% WAN_RX_BUFFER_SIZE;
		return c;
	}
}
     948:	08 95       	ret

0000094a <wan_usart_transmit>:

void wan_usart_transmit(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
     94a:	e0 ec       	ldi	r30, 0xC0	; 192
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	90 81       	ld	r25, Z
     950:	95 ff       	sbrs	r25, 5
     952:	fd cf       	rjmp	.-6      	; 0x94e <wan_usart_transmit+0x4>
		;
	UDR0 = data;
     954:	80 93 c6 00 	sts	0x00C6, r24
     958:	08 95       	ret

0000095a <wan_usart_transmit_bytes>:
}

void wan_usart_transmit_bytes(char data[], int size)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
	for (int i = 0; i < size; i++)
     95e:	16 16       	cp	r1, r22
     960:	17 06       	cpc	r1, r23
     962:	7c f4       	brge	.+30     	; 0x982 <wan_usart_transmit_bytes+0x28>
     964:	dc 01       	movw	r26, r24
     966:	86 0f       	add	r24, r22
     968:	97 1f       	adc	r25, r23
	{
		while (!(UCSR0A & (1 << UDRE0)))
     96a:	e0 ec       	ldi	r30, 0xC0	; 192
     96c:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = data[i];
     96e:	c6 ec       	ldi	r28, 0xC6	; 198
     970:	d0 e0       	ldi	r29, 0x00	; 0

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     972:	20 81       	ld	r18, Z
     974:	25 ff       	sbrs	r18, 5
     976:	fd cf       	rjmp	.-6      	; 0x972 <wan_usart_transmit_bytes+0x18>
			;
		UDR0 = data[i];
     978:	2d 91       	ld	r18, X+
     97a:	28 83       	st	Y, r18
	UDR0 = data;
}

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
     97c:	a8 17       	cp	r26, r24
     97e:	b9 07       	cpc	r27, r25
     980:	c1 f7       	brne	.-16     	; 0x972 <wan_usart_transmit_bytes+0x18>
	{
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = data[i];
	}
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <wan_usart_transmit_string>:

void wan_usart_transmit_string(char * data)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
	unsigned char c = *data;
     98c:	fc 01       	movw	r30, r24
     98e:	20 81       	ld	r18, Z

	while (c)
     990:	22 23       	and	r18, r18
     992:	69 f0       	breq	.+26     	; 0x9ae <wan_usart_transmit_string+0x26>
     994:	dc 01       	movw	r26, r24
     996:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1 << UDRE0)))
     998:	e0 ec       	ldi	r30, 0xC0	; 192
     99a:	f0 e0       	ldi	r31, 0x00	; 0
			;
		UDR0 = c;
     99c:	c6 ec       	ldi	r28, 0xC6	; 198
     99e:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned char c = *data;

	while (c)
	{
		while (!(UCSR0A & (1 << UDRE0)))
     9a0:	80 81       	ld	r24, Z
     9a2:	85 ff       	sbrs	r24, 5
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <wan_usart_transmit_string+0x18>
			;
		UDR0 = c;
     9a6:	28 83       	st	Y, r18
		c = *(++data);
     9a8:	2d 91       	ld	r18, X+

void wan_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c)
     9aa:	21 11       	cpse	r18, r1
     9ac:	f9 cf       	rjmp	.-14     	; 0x9a0 <wan_usart_transmit_string+0x18>
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = c;
		c = *(++data);
	}
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <__vector_20>:

ISR(WAN_ISR_VECTOR)
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	0b b6       	in	r0, 0x3b	; 59
     9c0:	0f 92       	push	r0
     9c2:	2f 93       	push	r18
     9c4:	3f 93       	push	r19
     9c6:	4f 93       	push	r20
     9c8:	5f 93       	push	r21
     9ca:	6f 93       	push	r22
     9cc:	7f 93       	push	r23
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	af 93       	push	r26
     9d4:	bf 93       	push	r27
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
	unsigned char data = UDR0;
     9da:	80 91 c6 00 	lds	r24, 0x00C6
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	wan_usart_put_char(data);
     9de:	0e 94 63 04 	call	0x8c6	; 0x8c6 <wan_usart_put_char>

}
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0b be       	out	0x3b, r0	; 59
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <ramdisk_init>:
static btle_msg_t *valid_head;

static btle_msg_t *deleted_head;

void ramdisk_init()
{
     a08:	86 ea       	ldi	r24, 0xA6	; 166
     a0a:	95 e0       	ldi	r25, 0x05	; 5
     a0c:	2e e9       	ldi	r18, 0x9E	; 158
     a0e:	37 e0       	ldi	r19, 0x07	; 7
     a10:	fc 01       	movw	r30, r24
     a12:	38 97       	sbiw	r30, 0x08	; 8
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
	{
		records[i].next = &records[i + 1];
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	45 96       	adiw	r24, 0x15	; 21

void ramdisk_init()
{
	int i;

	for (i = 0; i < SIZE_OF - 1; i++)
     a1a:	82 17       	cp	r24, r18
     a1c:	93 07       	cpc	r25, r19
     a1e:	c1 f7       	brne	.-16     	; 0xa10 <ramdisk_init+0x8>
	{
		records[i].next = &records[i + 1];
	}

	records[i].next = NULL;
     a20:	10 92 97 07 	sts	0x0797, r1
     a24:	10 92 96 07 	sts	0x0796, r1

	deleted_head = &records[0];
     a28:	81 e9       	ldi	r24, 0x91	; 145
     a2a:	95 e0       	ldi	r25, 0x05	; 5
     a2c:	90 93 8e 05 	sts	0x058E, r25
     a30:	80 93 8d 05 	sts	0x058D, r24

	valid_head = NULL;
     a34:	10 92 90 05 	sts	0x0590, r1
     a38:	10 92 8f 05 	sts	0x058F, r1
     a3c:	08 95       	ret

00000a3e <ramdisk_write>:

}

int ramdisk_write(btle_msg_t to_write)
{
     a3e:	7f 92       	push	r7
     a40:	8f 92       	push	r8
     a42:	9f 92       	push	r9
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	f8 88       	ldd	r15, Y+16	; 0x10
     a5e:	79 88       	ldd	r7, Y+17	; 0x11
     a60:	8a 88       	ldd	r8, Y+18	; 0x12
     a62:	9b 88       	ldd	r9, Y+19	; 0x13
     a64:	ac 88       	ldd	r10, Y+20	; 0x14
     a66:	bd 88       	ldd	r11, Y+21	; 0x15
     a68:	ce 88       	ldd	r12, Y+22	; 0x16
     a6a:	df 88       	ldd	r13, Y+23	; 0x17
     a6c:	e8 8c       	ldd	r14, Y+24	; 0x18
     a6e:	69 8d       	ldd	r22, Y+25	; 0x19
     a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a72:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a74:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a78:	98 a1       	ldd	r25, Y+32	; 0x20
     a7a:	a9 a1       	ldd	r26, Y+33	; 0x21
     a7c:	ba a1       	ldd	r27, Y+34	; 0x22
     a7e:	0b a1       	ldd	r16, Y+35	; 0x23
     a80:	1c a1       	ldd	r17, Y+36	; 0x24
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
     a82:	e0 91 8d 05 	lds	r30, 0x058D
     a86:	f0 91 8e 05 	lds	r31, 0x058E
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f4       	brne	.+2      	; 0xa90 <ramdisk_write+0x52>
     a8e:	4b c0       	rjmp	.+150    	; 0xb26 <ramdisk_write+0xe8>
		return 0x00;

	//Check for no records
	if (valid_head == NULL )
     a90:	20 91 8f 05 	lds	r18, 0x058F
     a94:	30 91 90 05 	lds	r19, 0x0590
     a98:	21 15       	cp	r18, r1
     a9a:	31 05       	cpc	r19, r1
     a9c:	11 f5       	brne	.+68     	; 0xae2 <ramdisk_write+0xa4>
	{
		temp_1 = deleted_head->next;
     a9e:	25 85       	ldd	r18, Z+13	; 0x0d
     aa0:	36 85       	ldd	r19, Z+14	; 0x0e
		valid_head = deleted_head;
     aa2:	f0 93 90 05 	sts	0x0590, r31
     aa6:	e0 93 8f 05 	sts	0x058F, r30
		deleted_head = temp_1;
     aaa:	30 93 8e 05 	sts	0x058E, r19
     aae:	20 93 8d 05 	sts	0x058D, r18
		valid_head->mac = to_write.mac;
     ab2:	71 82       	std	Z+1, r7	; 0x01
     ab4:	82 82       	std	Z+2, r8	; 0x02
     ab6:	93 82       	std	Z+3, r9	; 0x03
     ab8:	a4 82       	std	Z+4, r10	; 0x04
     aba:	b5 82       	std	Z+5, r11	; 0x05
     abc:	c6 82       	std	Z+6, r12	; 0x06
     abe:	d7 82       	std	Z+7, r13	; 0x07
     ac0:	e0 86       	std	Z+8, r14	; 0x08
		valid_head->batt = to_write.batt;
     ac2:	72 87       	std	Z+10, r23	; 0x0a
     ac4:	61 87       	std	Z+9, r22	; 0x09
		valid_head->rssi = to_write.rssi;
     ac6:	f0 82       	st	Z, r15
		valid_head->temp = to_write.temp;
     ac8:	54 87       	std	Z+12, r21	; 0x0c
     aca:	43 87       	std	Z+11, r20	; 0x0b
		valid_head->next = NULL;
     acc:	16 86       	std	Z+14, r1	; 0x0e
     ace:	15 86       	std	Z+13, r1	; 0x0d
		valid_head->last_sent = to_write.last_sent;
     ad0:	87 87       	std	Z+15, r24	; 0x0f
     ad2:	90 8b       	std	Z+16, r25	; 0x10
     ad4:	a1 8b       	std	Z+17, r26	; 0x11
     ad6:	b2 8b       	std	Z+18, r27	; 0x12
		valid_head->count = to_write.count;
     ad8:	03 8b       	std	Z+19, r16	; 0x13
		valid_head->type = to_write.type;
     ada:	14 8b       	std	Z+20, r17	; 0x14
		deleted_head = deleted_head->next;
		valid_head->next = temp_1;

	}

	return 0xff;
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	24 c0       	rjmp	.+72     	; 0xb2a <ramdisk_write+0xec>
		valid_head->type = to_write.type;
	}

	else
	{
		deleted_head->mac = to_write.mac;
     ae2:	71 82       	std	Z+1, r7	; 0x01
     ae4:	82 82       	std	Z+2, r8	; 0x02
     ae6:	93 82       	std	Z+3, r9	; 0x03
     ae8:	a4 82       	std	Z+4, r10	; 0x04
     aea:	b5 82       	std	Z+5, r11	; 0x05
     aec:	c6 82       	std	Z+6, r12	; 0x06
     aee:	d7 82       	std	Z+7, r13	; 0x07
     af0:	e0 86       	std	Z+8, r14	; 0x08
		deleted_head->batt = to_write.batt;
     af2:	72 87       	std	Z+10, r23	; 0x0a
     af4:	61 87       	std	Z+9, r22	; 0x09
		deleted_head->rssi = to_write.rssi;
     af6:	f0 82       	st	Z, r15
		deleted_head->temp = to_write.temp;
     af8:	54 87       	std	Z+12, r21	; 0x0c
     afa:	43 87       	std	Z+11, r20	; 0x0b
		deleted_head->last_sent = to_write.last_sent;
     afc:	87 87       	std	Z+15, r24	; 0x0f
     afe:	90 8b       	std	Z+16, r25	; 0x10
     b00:	a1 8b       	std	Z+17, r26	; 0x11
     b02:	b2 8b       	std	Z+18, r27	; 0x12
		deleted_head->count = to_write.count;
     b04:	03 8b       	std	Z+19, r16	; 0x13
		deleted_head->type = to_write.type;
     b06:	14 8b       	std	Z+20, r17	; 0x14
		temp_1 = valid_head;
		valid_head = deleted_head;
     b08:	f0 93 90 05 	sts	0x0590, r31
     b0c:	e0 93 8f 05 	sts	0x058F, r30
		deleted_head = deleted_head->next;
     b10:	85 85       	ldd	r24, Z+13	; 0x0d
     b12:	96 85       	ldd	r25, Z+14	; 0x0e
     b14:	90 93 8e 05 	sts	0x058E, r25
     b18:	80 93 8d 05 	sts	0x058D, r24
		valid_head->next = temp_1;
     b1c:	36 87       	std	Z+14, r19	; 0x0e
     b1e:	25 87       	std	Z+13, r18	; 0x0d

	}

	return 0xff;
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <ramdisk_write+0xec>
{
	btle_msg_t *temp_1;

	//Check for out of Memory
	if (deleted_head == NULL )
		return 0x00;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0

	}

	return 0xff;

}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	08 95       	ret

00000b46 <ramdisk_erase>:

int ramdisk_erase(btle_msg_t to_remove)
{
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	9e 88       	ldd	r9, Y+22	; 0x16
     b70:	8f 88       	ldd	r8, Y+23	; 0x17
     b72:	78 8c       	ldd	r7, Y+24	; 0x18
     b74:	69 8c       	ldd	r6, Y+25	; 0x19
     b76:	5a 8c       	ldd	r5, Y+26	; 0x1a
     b78:	4b 8c       	ldd	r4, Y+27	; 0x1b
     b7a:	3c 8c       	ldd	r3, Y+28	; 0x1c
     b7c:	2d 8c       	ldd	r2, Y+29	; 0x1d
	btle_msg_t *temp_1 = valid_head;
     b7e:	a0 91 8f 05 	lds	r26, 0x058F
     b82:	b0 91 90 05 	lds	r27, 0x0590
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	ac 90       	ld	r10, X
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	bc 90       	ld	r11, X
     b90:	12 97       	sbiw	r26, 0x02	; 2
     b92:	13 96       	adiw	r26, 0x03	; 3
     b94:	cc 90       	ld	r12, X
     b96:	13 97       	sbiw	r26, 0x03	; 3
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	dc 90       	ld	r13, X
     b9c:	14 97       	sbiw	r26, 0x04	; 4
     b9e:	15 96       	adiw	r26, 0x05	; 5
     ba0:	ec 90       	ld	r14, X
     ba2:	15 97       	sbiw	r26, 0x05	; 5
     ba4:	16 96       	adiw	r26, 0x06	; 6
     ba6:	fc 90       	ld	r15, X
     ba8:	16 97       	sbiw	r26, 0x06	; 6
     baa:	17 96       	adiw	r26, 0x07	; 7
     bac:	0c 91       	ld	r16, X
     bae:	17 97       	sbiw	r26, 0x07	; 7
     bb0:	18 96       	adiw	r26, 0x08	; 8
     bb2:	1c 91       	ld	r17, X
     bb4:	18 97       	sbiw	r26, 0x08	; 8
     bb6:	29 2d       	mov	r18, r9
     bb8:	38 2d       	mov	r19, r8
     bba:	47 2d       	mov	r20, r7
     bbc:	56 2d       	mov	r21, r6
     bbe:	65 2d       	mov	r22, r5
     bc0:	74 2d       	mov	r23, r4
     bc2:	83 2d       	mov	r24, r3
     bc4:	92 2d       	mov	r25, r2
     bc6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__cmpdi2>
     bca:	09 f4       	brne	.+2      	; 0xbce <ramdisk_erase+0x88>
     bcc:	5f c0       	rjmp	.+190    	; 0xc8c <ramdisk_erase+0x146>
     bce:	10 97       	sbiw	r26, 0x00	; 0
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <ramdisk_erase+0x8e>
     bd2:	50 c0       	rjmp	.+160    	; 0xc74 <ramdisk_erase+0x12e>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     bd4:	fd 01       	movw	r30, r26
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
	{
		temp_1 = temp_1->next;
     bd6:	05 84       	ldd	r0, Z+13	; 0x0d
     bd8:	f6 85       	ldd	r31, Z+14	; 0x0e
     bda:	e0 2d       	mov	r30, r0

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
	//Move temp to target(to_remove);
	while (temp_1->mac != to_remove.mac && temp_1 != NULL )
     bdc:	a1 80       	ldd	r10, Z+1	; 0x01
     bde:	b2 80       	ldd	r11, Z+2	; 0x02
     be0:	c3 80       	ldd	r12, Z+3	; 0x03
     be2:	d4 80       	ldd	r13, Z+4	; 0x04
     be4:	e5 80       	ldd	r14, Z+5	; 0x05
     be6:	f6 80       	ldd	r15, Z+6	; 0x06
     be8:	07 81       	ldd	r16, Z+7	; 0x07
     bea:	10 85       	ldd	r17, Z+8	; 0x08
     bec:	29 2d       	mov	r18, r9
     bee:	38 2d       	mov	r19, r8
     bf0:	47 2d       	mov	r20, r7
     bf2:	56 2d       	mov	r21, r6
     bf4:	65 2d       	mov	r22, r5
     bf6:	74 2d       	mov	r23, r4
     bf8:	83 2d       	mov	r24, r3
     bfa:	92 2d       	mov	r25, r2
     bfc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__cmpdi2>
     c00:	19 f0       	breq	.+6      	; 0xc08 <ramdisk_erase+0xc2>
     c02:	30 97       	sbiw	r30, 0x00	; 0
     c04:	41 f7       	brne	.-48     	; 0xbd6 <ramdisk_erase+0x90>
     c06:	39 c0       	rjmp	.+114    	; 0xc7a <ramdisk_erase+0x134>
	{
		temp_1 = temp_1->next;
     c08:	9f 01       	movw	r18, r30
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	c9 f1       	breq	.+114    	; 0xc80 <ramdisk_erase+0x13a>
		return 0x00;

	else if (temp_1 == valid_head)
     c0e:	ae 17       	cp	r26, r30
     c10:	bf 07       	cpc	r27, r31
     c12:	99 f4       	brne	.+38     	; 0xc3a <ramdisk_erase+0xf4>
	{
		valid_head = valid_head->next;
     c14:	85 85       	ldd	r24, Z+13	; 0x0d
     c16:	96 85       	ldd	r25, Z+14	; 0x0e
     c18:	90 93 90 05 	sts	0x0590, r25
     c1c:	80 93 8f 05 	sts	0x058F, r24
		temp_1->next = deleted_head;
     c20:	80 91 8d 05 	lds	r24, 0x058D
     c24:	90 91 8e 05 	lds	r25, 0x058E
     c28:	96 87       	std	Z+14, r25	; 0x0e
     c2a:	85 87       	std	Z+13, r24	; 0x0d
		deleted_head = temp_1;
     c2c:	f0 93 8e 05 	sts	0x058E, r31
     c30:	e0 93 8d 05 	sts	0x058D, r30
		temp_2 = deleted_head;
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	2d c0       	rjmp	.+90     	; 0xc94 <ramdisk_erase+0x14e>
	}

	else
	{
		btle_msg_t *temp_2 = valid_head;
		while (temp_2->next != temp_1)
     c3a:	1d 96       	adiw	r26, 0x0d	; 13
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	1e 97       	sbiw	r26, 0x0e	; 14
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	11 f0       	breq	.+4      	; 0xc4c <ramdisk_erase+0x106>
		{
			temp_2 = temp_2->next;
     c48:	dc 01       	movw	r26, r24
     c4a:	f7 cf       	rjmp	.-18     	; 0xc3a <ramdisk_erase+0xf4>
		}

		temp_2->next = temp_1->next;
     c4c:	f9 01       	movw	r30, r18
     c4e:	85 85       	ldd	r24, Z+13	; 0x0d
     c50:	96 85       	ldd	r25, Z+14	; 0x0e
     c52:	1e 96       	adiw	r26, 0x0e	; 14
     c54:	9c 93       	st	X, r25
     c56:	8e 93       	st	-X, r24
     c58:	1d 97       	sbiw	r26, 0x0d	; 13
		temp_2 = deleted_head;
     c5a:	80 91 8d 05 	lds	r24, 0x058D
     c5e:	90 91 8e 05 	lds	r25, 0x058E
		deleted_head = temp_1;
     c62:	30 93 8e 05 	sts	0x058E, r19
     c66:	20 93 8d 05 	sts	0x058D, r18
		deleted_head->next = temp_2;
     c6a:	96 87       	std	Z+14, r25	; 0x0e
     c6c:	85 87       	std	Z+13, r24	; 0x0d
	}

	return 0xff;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	10 c0       	rjmp	.+32     	; 0xc94 <ramdisk_erase+0x14e>
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
		return 0x00;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <ramdisk_erase+0x14e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0a c0       	rjmp	.+20     	; 0xc94 <ramdisk_erase+0x14e>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	07 c0       	rjmp	.+14     	; 0xc94 <ramdisk_erase+0x14e>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <ramdisk_erase+0x14e>
	{
		temp_1 = temp_1->next;
	}

	//Handle Erase cases
	if (temp_1 == NULL )
     c8c:	10 97       	sbiw	r26, 0x00	; 0
     c8e:	d9 f3       	breq	.-10     	; 0xc86 <ramdisk_erase+0x140>

}

int ramdisk_erase(btle_msg_t to_remove)
{
	btle_msg_t *temp_1 = valid_head;
     c90:	fd 01       	movw	r30, r26
     c92:	c0 cf       	rjmp	.-128    	; 0xc14 <ramdisk_erase+0xce>
		deleted_head = temp_1;
		deleted_head->next = temp_2;
	}

	return 0xff;
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	bf 90       	pop	r11
     ca6:	af 90       	pop	r10
     ca8:	9f 90       	pop	r9
     caa:	8f 90       	pop	r8
     cac:	7f 90       	pop	r7
     cae:	6f 90       	pop	r6
     cb0:	5f 90       	pop	r5
     cb2:	4f 90       	pop	r4
     cb4:	3f 90       	pop	r3
     cb6:	2f 90       	pop	r2
     cb8:	08 95       	ret

00000cba <ramdisk_find>:

btle_msg_t * ramdisk_find(uint64_t target)
{
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	a2 2f       	mov	r26, r18
     cd8:	b3 2f       	mov	r27, r19
     cda:	c4 2f       	mov	r28, r20
     cdc:	d5 2f       	mov	r29, r21
     cde:	96 2e       	mov	r9, r22
     ce0:	87 2e       	mov	r8, r23
     ce2:	78 2e       	mov	r7, r24
     ce4:	69 2e       	mov	r6, r25
	btle_msg_t *temp_1 = valid_head;
     ce6:	e0 91 8f 05 	lds	r30, 0x058F
     cea:	f0 91 90 05 	lds	r31, 0x0590

	while (temp_1->mac != target && temp_1 != NULL )
     cee:	21 81       	ldd	r18, Z+1	; 0x01
     cf0:	32 81       	ldd	r19, Z+2	; 0x02
     cf2:	43 81       	ldd	r20, Z+3	; 0x03
     cf4:	54 81       	ldd	r21, Z+4	; 0x04
     cf6:	65 81       	ldd	r22, Z+5	; 0x05
     cf8:	76 81       	ldd	r23, Z+6	; 0x06
     cfa:	87 81       	ldd	r24, Z+7	; 0x07
     cfc:	90 85       	ldd	r25, Z+8	; 0x08
     cfe:	aa 2e       	mov	r10, r26
     d00:	bb 2e       	mov	r11, r27
     d02:	cc 2e       	mov	r12, r28
     d04:	dd 2e       	mov	r13, r29
     d06:	e9 2c       	mov	r14, r9
     d08:	f8 2c       	mov	r15, r8
     d0a:	07 2d       	mov	r16, r7
     d0c:	16 2d       	mov	r17, r6
     d0e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__cmpdi2>
     d12:	d1 f0       	breq	.+52     	; 0xd48 <ramdisk_find+0x8e>
     d14:	30 97       	sbiw	r30, 0x00	; 0
     d16:	c1 f0       	breq	.+48     	; 0xd48 <ramdisk_find+0x8e>
	{
		temp_1 = temp_1->next;
     d18:	05 84       	ldd	r0, Z+13	; 0x0d
     d1a:	f6 85       	ldd	r31, Z+14	; 0x0e
     d1c:	e0 2d       	mov	r30, r0

btle_msg_t * ramdisk_find(uint64_t target)
{
	btle_msg_t *temp_1 = valid_head;

	while (temp_1->mac != target && temp_1 != NULL )
     d1e:	21 81       	ldd	r18, Z+1	; 0x01
     d20:	32 81       	ldd	r19, Z+2	; 0x02
     d22:	43 81       	ldd	r20, Z+3	; 0x03
     d24:	54 81       	ldd	r21, Z+4	; 0x04
     d26:	65 81       	ldd	r22, Z+5	; 0x05
     d28:	76 81       	ldd	r23, Z+6	; 0x06
     d2a:	87 81       	ldd	r24, Z+7	; 0x07
     d2c:	90 85       	ldd	r25, Z+8	; 0x08
     d2e:	aa 2e       	mov	r10, r26
     d30:	bb 2e       	mov	r11, r27
     d32:	cc 2e       	mov	r12, r28
     d34:	dd 2e       	mov	r13, r29
     d36:	e9 2c       	mov	r14, r9
     d38:	f8 2c       	mov	r15, r8
     d3a:	07 2d       	mov	r16, r7
     d3c:	16 2d       	mov	r17, r6
     d3e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__cmpdi2>
     d42:	11 f0       	breq	.+4      	; 0xd48 <ramdisk_find+0x8e>
     d44:	30 97       	sbiw	r30, 0x00	; 0
     d46:	41 f7       	brne	.-48     	; 0xd18 <ramdisk_find+0x5e>
	{
		temp_1 = temp_1->next;
	}

	return temp_1;
}
     d48:	cf 01       	movw	r24, r30
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	7f 90       	pop	r7
     d64:	6f 90       	pop	r6
     d66:	08 95       	ret

00000d68 <ramdisk_next>:

btle_msg_t * ramdisk_next(btle_msg_t * target)
{
	if (target == NULL )
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	29 f4       	brne	.+10     	; 0xd76 <ramdisk_next+0xe>
		return valid_head;
     d6c:	80 91 8f 05 	lds	r24, 0x058F
     d70:	90 91 90 05 	lds	r25, 0x0590
     d74:	08 95       	ret
	else
		return (target->next);
     d76:	fc 01       	movw	r30, r24
     d78:	85 85       	ldd	r24, Z+13	; 0x0d
     d7a:	96 85       	ldd	r25, Z+14	; 0x0e
}
     d7c:	08 95       	ret

00000d7e <circular_queue_put_char>:

CIRCULAR_QUEUE circular_queue = {{0},0,0};

void circular_queue_put_char(uint8_t c)
{
	int i = (unsigned int)(circular_queue.head + 1) % CIRCULAR_QUEUE_SIZE;
     d7e:	40 91 9e 09 	lds	r20, 0x099E
     d82:	50 91 9f 09 	lds	r21, 0x099F
     d86:	9a 01       	movw	r18, r20
     d88:	2f 5f       	subi	r18, 0xFF	; 255
     d8a:	3f 4f       	sbci	r19, 0xFF	; 255
     d8c:	31 70       	andi	r19, 0x01	; 1

	if (i != circular_queue.tail) {
     d8e:	60 91 a0 09 	lds	r22, 0x09A0
     d92:	70 91 a1 09 	lds	r23, 0x09A1
     d96:	62 17       	cp	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	41 f0       	breq	.+16     	; 0xdac <circular_queue_put_char+0x2e>
		circular_queue.buffer[circular_queue.head] = c;
     d9c:	fa 01       	movw	r30, r20
     d9e:	e2 56       	subi	r30, 0x62	; 98
     da0:	f8 4f       	sbci	r31, 0xF8	; 248
     da2:	80 83       	st	Z, r24
		circular_queue.head = i;
     da4:	30 93 9f 09 	sts	0x099F, r19
     da8:	20 93 9e 09 	sts	0x099E, r18
     dac:	08 95       	ret

00000dae <circular_queue_clear_buffer>:
}


void circular_queue_clear_buffer()
{
	memset(&circular_queue, 0, sizeof(CIRCULAR_QUEUE));
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	ee e9       	ldi	r30, 0x9E	; 158
     db4:	f7 e0       	ldi	r31, 0x07	; 7
     db6:	df 01       	movw	r26, r30
     db8:	9c 01       	movw	r18, r24
     dba:	1d 92       	st	X+, r1
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	30 40       	sbci	r19, 0x00	; 0
     dc0:	e1 f7       	brne	.-8      	; 0xdba <circular_queue_clear_buffer+0xc>
     dc2:	08 95       	ret

00000dc4 <circular_queue_data_available>:
}

uint8_t circular_queue_data_available()
{
	return (uint8_t)(CIRCULAR_QUEUE_SIZE + circular_queue.head - circular_queue.tail) % CIRCULAR_QUEUE_SIZE;
     dc4:	80 91 9e 09 	lds	r24, 0x099E
     dc8:	90 91 a0 09 	lds	r25, 0x09A0
}
     dcc:	89 1b       	sub	r24, r25
     dce:	08 95       	ret

00000dd0 <circular_queue_data_read>:

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
     dd0:	20 91 a0 09 	lds	r18, 0x09A0
     dd4:	30 91 a1 09 	lds	r19, 0x09A1
     dd8:	80 91 9e 09 	lds	r24, 0x099E
     ddc:	90 91 9f 09 	lds	r25, 0x099F
     de0:	82 17       	cp	r24, r18
     de2:	93 07       	cpc	r25, r19
     de4:	61 f0       	breq	.+24     	; 0xdfe <circular_queue_data_read+0x2e>
		return -1;
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
     de6:	f9 01       	movw	r30, r18
     de8:	e2 56       	subi	r30, 0x62	; 98
     dea:	f8 4f       	sbci	r31, 0xF8	; 248
     dec:	80 81       	ld	r24, Z
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	31 70       	andi	r19, 0x01	; 1
     df4:	30 93 a1 09 	sts	0x09A1, r19
     df8:	20 93 a0 09 	sts	0x09A0, r18
		return c;
     dfc:	08 95       	ret

uint8_t circular_queue_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (circular_queue.head == circular_queue.tail) {
		return -1;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		uint8_t c = circular_queue.buffer[circular_queue.tail];
		circular_queue.tail = (unsigned int)(circular_queue.tail + 1) % CIRCULAR_QUEUE_SIZE;
		return c;
	}
}
     e00:	08 95       	ret

00000e02 <queue_reset>:
// Calculate memory usage as: DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
#define MEMORY_CALC(r)		(r->data_usage + (r->count * sizeof(queue_header_t)) + (r->count * 4));


void queue_reset(queue_t * q)
{
     e02:	fc 01       	movw	r30, r24
	q->head = 0;
     e04:	15 82       	std	Z+5, r1	; 0x05
     e06:	14 82       	std	Z+4, r1	; 0x04
	q->tail = 0;
     e08:	17 82       	std	Z+7, r1	; 0x07
     e0a:	16 82       	std	Z+6, r1	; 0x06
	q->count = 0;
     e0c:	13 82       	std	Z+3, r1	; 0x03
     e0e:	12 82       	std	Z+2, r1	; 0x02
	q->data_usage = 0;
     e10:	11 86       	std	Z+9, r1	; 0x09
     e12:	10 86       	std	Z+8, r1	; 0x08
	q->memory_usage = 0;
     e14:	13 86       	std	Z+11, r1	; 0x0b
     e16:	12 86       	std	Z+10, r1	; 0x0a
     e18:	08 95       	ret

00000e1a <queue_init>:
}

void queue_init(queue_t * r, uint16_t max)
{
	r->max_size = max;
     e1a:	fc 01       	movw	r30, r24
     e1c:	71 83       	std	Z+1, r23	; 0x01
     e1e:	60 83       	st	Z, r22
	queue_reset(r);
     e20:	0e 94 01 07 	call	0xe02	; 0xe02 <queue_reset>
     e24:	08 95       	ret

00000e26 <queue_enqueue>:
}

queue_results_t queue_enqueue(queue_t * r, void * data, uint16_t length)
{
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	7b 01       	movw	r14, r22
     e36:	8a 01       	movw	r16, r20
	queue_header_t header;
	uint16_t new_size;

	if (r->max_size)
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	51 f0       	breq	.+20     	; 0xe54 <queue_enqueue+0x2e>
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
     e40:	2a 85       	ldd	r18, Y+10	; 0x0a
     e42:	3b 85       	ldd	r19, Y+11	; 0x0b
     e44:	26 5f       	subi	r18, 0xF6	; 246
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	24 0f       	add	r18, r20
     e4a:	35 1f       	adc	r19, r21
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     e4c:	82 17       	cp	r24, r18
     e4e:	93 07       	cpc	r25, r19
     e50:	08 f4       	brcc	.+2      	; 0xe54 <queue_enqueue+0x2e>
     e52:	50 c0       	rjmp	.+160    	; 0xef4 <queue_enqueue+0xce>
	}

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);
     e54:	c8 01       	movw	r24, r16
     e56:	06 96       	adiw	r24, 0x06	; 6
     e58:	0e 94 93 0b 	call	0x1726	; 0x1726 <malloc>

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	09 f4       	brne	.+2      	; 0xe62 <queue_enqueue+0x3c>
     e60:	4b c0       	rjmp	.+150    	; 0xef8 <queue_enqueue+0xd2>
	header.length = length;
	header.prev = 0;
	header.next = 0;

	// If the queue is empty,
	if (r->head == 0)
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	23 2b       	or	r18, r19
     e68:	69 f4       	brne	.+26     	; 0xe84 <queue_enqueue+0x5e>
	{
		// ... add this single object, and it doesn't point to anything
		r->head = obj;
     e6a:	9d 83       	std	Y+5, r25	; 0x05
     e6c:	8c 83       	std	Y+4, r24	; 0x04
		r->tail = obj;
     e6e:	9f 83       	std	Y+7, r25	; 0x07
     e70:	8e 83       	std	Y+6, r24	; 0x06
		r->count = 1;
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3b 83       	std	Y+3, r19	; 0x03
     e78:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage = header.length;
     e7a:	19 87       	std	Y+9, r17	; 0x09
     e7c:	08 87       	std	Y+8, r16	; 0x08
	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;

	// New tail header
	header.length = length;
	header.prev = 0;
     e7e:	e0 e0       	ldi	r30, 0x00	; 0
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <queue_enqueue+0x82>
		header.next = 0;
	}
	else
	{
		// ... otherwise, the tail grows. Make this the new tail and bump the counter
		header.prev = r->tail;
     e84:	ee 81       	ldd	r30, Y+6	; 0x06
     e86:	ff 81       	ldd	r31, Y+7	; 0x07
		r->tail->next = (queue_header_t *)obj;
     e88:	93 83       	std	Z+3, r25	; 0x03
     e8a:	82 83       	std	Z+2, r24	; 0x02
		r->tail = (queue_header_t *)obj;
     e8c:	9f 83       	std	Y+7, r25	; 0x07
     e8e:	8e 83       	std	Y+6, r24	; 0x06
		r->count++;
     e90:	2a 81       	ldd	r18, Y+2	; 0x02
     e92:	3b 81       	ldd	r19, Y+3	; 0x03
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	3b 83       	std	Y+3, r19	; 0x03
     e9a:	2a 83       	std	Y+2, r18	; 0x02
		r->data_usage += header.length;
     e9c:	28 85       	ldd	r18, Y+8	; 0x08
     e9e:	39 85       	ldd	r19, Y+9	; 0x09
     ea0:	20 0f       	add	r18, r16
     ea2:	31 1f       	adc	r19, r17
     ea4:	39 87       	std	Y+9, r19	; 0x09
     ea6:	28 87       	std	Y+8, r18	; 0x08
	}
	r->memory_usage = MEMORY_CALC(r);
     ea8:	2a 81       	ldd	r18, Y+2	; 0x02
     eaa:	3b 81       	ldd	r19, Y+3	; 0x03
     eac:	a9 01       	movw	r20, r18
     eae:	44 0f       	add	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	22 0f       	add	r18, r18
     eb8:	33 1f       	adc	r19, r19
     eba:	22 0f       	add	r18, r18
     ebc:	33 1f       	adc	r19, r19
     ebe:	24 0f       	add	r18, r20
     ec0:	35 1f       	adc	r19, r21
     ec2:	48 85       	ldd	r20, Y+8	; 0x08
     ec4:	59 85       	ldd	r21, Y+9	; 0x09
     ec6:	24 0f       	add	r18, r20
     ec8:	35 1f       	adc	r19, r21
     eca:	3b 87       	std	Y+11, r19	; 0x0b
     ecc:	2a 87       	std	Y+10, r18	; 0x0a

	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
     ece:	dc 01       	movw	r26, r24
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	fc 93       	st	X, r31
     ed4:	ee 93       	st	-X, r30
     ed6:	13 96       	adiw	r26, 0x03	; 3
     ed8:	1c 92       	st	X, r1
     eda:	1e 92       	st	-X, r1
     edc:	12 97       	sbiw	r26, 0x02	; 2
     ede:	15 96       	adiw	r26, 0x05	; 5
     ee0:	1c 93       	st	X, r17
     ee2:	0e 93       	st	-X, r16
     ee4:	14 97       	sbiw	r26, 0x04	; 4
	memcpy(QUEUE_DATA(obj), data, length);
     ee6:	a8 01       	movw	r20, r16
     ee8:	b7 01       	movw	r22, r14
     eea:	06 96       	adiw	r24, 0x06	; 6
     eec:	0e 94 c7 0c 	call	0x198e	; 0x198e <memcpy>

	return QUEUE_SUCCESS;
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <queue_enqueue+0xd4>

	if (r->max_size)
	{
		// See if we have room: CURRENTMEMORYBYTES + DATABYTES + ALL_HEADERBYTES + ALL_MALLOCHEADERBYTES
		new_size = r->memory_usage + length + sizeof(queue_header_t) + 4;
		if (new_size > r->max_size) return QUEUE_OVERFLOW;
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <queue_enqueue+0xd4>

	// Try to grab some space
	void * obj = malloc(sizeof(queue_header_t) + length);

	// Bail if we couldn't get the memory
	if (obj == 0) return QUEUE_NO_MEMORY;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
	// Now build out the header and blast the data into memory
	memcpy(obj, &header, sizeof(queue_header_t));
	memcpy(QUEUE_DATA(obj), data, length);

	return QUEUE_SUCCESS;
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	08 95       	ret

00000f08 <queue_dequeue>:

queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
     f16:	7b 01       	movw	r14, r22
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
     f18:	0c 81       	ldd	r16, Y+4	; 0x04
     f1a:	1d 81       	ldd	r17, Y+5	; 0x05
     f1c:	01 15       	cp	r16, r1
     f1e:	11 05       	cpc	r17, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <queue_dequeue+0x1c>
     f22:	53 c0       	rjmp	.+166    	; 0xfca <queue_dequeue+0xc2>

	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
     f24:	d8 01       	movw	r26, r16
     f26:	14 96       	adiw	r26, 0x04	; 4
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	15 97       	sbiw	r26, 0x05	; 5
     f2e:	0e 94 93 0b 	call	0x1726	; 0x1726 <malloc>
     f32:	f7 01       	movw	r30, r14
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
	if (dest == 0) return QUEUE_NO_MEMORY;
     f38:	ef 28       	or	r14, r15
     f3a:	09 f4       	brne	.+2      	; 0xf3e <queue_dequeue+0x36>
     f3c:	48 c0       	rjmp	.+144    	; 0xfce <queue_dequeue+0xc6>
	memcpy(*dest, QUEUE_DATA(header), header->length);
     f3e:	d8 01       	movw	r26, r16
     f40:	14 96       	adiw	r26, 0x04	; 4
     f42:	4d 91       	ld	r20, X+
     f44:	5c 91       	ld	r21, X
     f46:	15 97       	sbiw	r26, 0x05	; 5
     f48:	b8 01       	movw	r22, r16
     f4a:	6a 5f       	subi	r22, 0xFA	; 250
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	0e 94 c7 0c 	call	0x198e	; 0x198e <memcpy>

	// If this was the only object, empty the queue
	if (header->next == 0)
     f52:	d8 01       	movw	r26, r16
     f54:	12 96       	adiw	r26, 0x02	; 2
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	13 97       	sbiw	r26, 0x03	; 3
     f5c:	30 97       	sbiw	r30, 0x00	; 0
     f5e:	49 f4       	brne	.+18     	; 0xf72 <queue_dequeue+0x6a>
	{
		r->head = 0;
     f60:	1d 82       	std	Y+5, r1	; 0x05
     f62:	1c 82       	std	Y+4, r1	; 0x04
		r->tail = 0;
     f64:	1f 82       	std	Y+7, r1	; 0x07
     f66:	1e 82       	std	Y+6, r1	; 0x06
		r->count = 0;
     f68:	1b 82       	std	Y+3, r1	; 0x03
     f6a:	1a 82       	std	Y+2, r1	; 0x02
		r->data_usage = 0;
     f6c:	19 86       	std	Y+9, r1	; 0x09
     f6e:	18 86       	std	Y+8, r1	; 0x08
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <queue_dequeue+0x92>
	}
	else
	{
		// Ring still has objects, so set the new head and adjust the count
		r->head = header->next;
     f72:	fd 83       	std	Y+5, r31	; 0x05
     f74:	ec 83       	std	Y+4, r30	; 0x04
		r->count--;
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9b 83       	std	Y+3, r25	; 0x03
     f7e:	8a 83       	std	Y+2, r24	; 0x02
		r->data_usage -= header->length;
     f80:	88 85       	ldd	r24, Y+8	; 0x08
     f82:	99 85       	ldd	r25, Y+9	; 0x09
     f84:	d8 01       	movw	r26, r16
     f86:	14 96       	adiw	r26, 0x04	; 4
     f88:	2d 91       	ld	r18, X+
     f8a:	3c 91       	ld	r19, X
     f8c:	15 97       	sbiw	r26, 0x05	; 5
     f8e:	82 1b       	sub	r24, r18
     f90:	93 0b       	sbc	r25, r19
     f92:	99 87       	std	Y+9, r25	; 0x09
     f94:	88 87       	std	Y+8, r24	; 0x08
		((queue_header_t*)r->head)->prev = 0;
     f96:	11 82       	std	Z+1, r1	; 0x01
     f98:	10 82       	st	Z, r1
	}
	r->memory_usage = MEMORY_CALC(r);
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	9c 01       	movw	r18, r24
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	28 85       	ldd	r18, Y+8	; 0x08
     fb6:	39 85       	ldd	r19, Y+9	; 0x09
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	9b 87       	std	Y+11, r25	; 0x0b
     fbe:	8a 87       	std	Y+10, r24	; 0x0a

	// Finally, free the memory
	free((void*) header);
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>

	return QUEUE_SUCCESS;
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <queue_dequeue+0xc8>
queue_results_t queue_dequeue(queue_t * r, void ** dest)
{
	queue_header_t * header;

	// Notify that the queue is empty
	if (r->head == 0) return QUEUE_EMPTY;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <queue_dequeue+0xc8>
	// Reference the header
	header = (queue_header_t *)r->head;

	// Grab the data
	*dest = (void*)malloc(header->length);
	if (dest == 0) return QUEUE_NO_MEMORY;
     fce:	81 e0       	ldi	r24, 0x01	; 1

	// Finally, free the memory
	free((void*) header);

	return QUEUE_SUCCESS;
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	08 95       	ret

00000fde <queue_find>:

queue_results_t queue_find(queue_t * q, void * src, uint16_t length, queue_header_t ** dest)
{
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	8b 01       	movw	r16, r22
     ff0:	7a 01       	movw	r14, r20
     ff2:	69 01       	movw	r12, r18
	queue_header_t * h;
	uint8_t comp = 0;

	if (q->count == 0)
     ff4:	fc 01       	movw	r30, r24
     ff6:	22 81       	ldd	r18, Z+2	; 0x02
     ff8:	33 81       	ldd	r19, Z+3	; 0x03
     ffa:	23 2b       	or	r18, r19
     ffc:	29 f4       	brne	.+10     	; 0x1008 <queue_find+0x2a>
	{
		*dest = 0;
     ffe:	f6 01       	movw	r30, r12
    1000:	11 82       	std	Z+1, r1	; 0x01
    1002:	10 82       	st	Z, r1
		return QUEUE_EMPTY;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	1b c0       	rjmp	.+54     	; 0x103e <queue_find+0x60>
	}

	h = q->head;
    1008:	fc 01       	movw	r30, r24
    100a:	c4 81       	ldd	r28, Z+4	; 0x04
    100c:	d5 81       	ldd	r29, Z+5	; 0x05
	while (h)
    100e:	20 97       	sbiw	r28, 0x00	; 0
    1010:	99 f0       	breq	.+38     	; 0x1038 <queue_find+0x5a>
	{
		comp = memcmp(QUEUE_DATA(h), src, length);
    1012:	a7 01       	movw	r20, r14
    1014:	b8 01       	movw	r22, r16
    1016:	ce 01       	movw	r24, r28
    1018:	06 96       	adiw	r24, 0x06	; 6
    101a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <memcmp>
		if (comp == 0)
    101e:	81 11       	cpse	r24, r1
    1020:	05 c0       	rjmp	.+10     	; 0x102c <queue_find+0x4e>
		{
			*dest = h;
    1022:	f6 01       	movw	r30, r12
    1024:	d1 83       	std	Z+1, r29	; 0x01
    1026:	c0 83       	st	Z, r28
			return QUEUE_SUCCESS;
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	09 c0       	rjmp	.+18     	; 0x103e <queue_find+0x60>
		}
		h = h->next;
    102c:	0a 80       	ldd	r0, Y+2	; 0x02
    102e:	db 81       	ldd	r29, Y+3	; 0x03
    1030:	c0 2d       	mov	r28, r0
		*dest = 0;
		return QUEUE_EMPTY;
	}

	h = q->head;
	while (h)
    1032:	20 97       	sbiw	r28, 0x00	; 0
    1034:	71 f7       	brne	.-36     	; 0x1012 <queue_find+0x34>
    1036:	02 c0       	rjmp	.+4      	; 0x103c <queue_find+0x5e>
		}
		h = h->next;
	}

	// If we got here, it wasn't found
	return QUEUE_NOT_FOUND;
    1038:	84 e0       	ldi	r24, 0x04	; 4
    103a:	01 c0       	rjmp	.+2      	; 0x103e <queue_find+0x60>
    103c:	84 e0       	ldi	r24, 0x04	; 4
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	08 95       	ret

00001050 <queue_remove>:

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	fb 01       	movw	r30, r22
	if (q->count == 0)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	09 f4       	brne	.+2      	; 0x1062 <queue_remove+0x12>
    1060:	47 c0       	rjmp	.+142    	; 0x10f0 <queue_remove+0xa0>
	{
		return QUEUE_EMPTY;
	}
	else if (q->count == 1)
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	41 f4       	brne	.+16     	; 0x1076 <queue_remove+0x26>
	{
		free((void*)x);
    1066:	cb 01       	movw	r24, r22
    1068:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		queue_reset(q);
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 01 07 	call	0xe02	; 0xe02 <queue_reset>
		return QUEUE_SUCCESS;
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	3e c0       	rjmp	.+124    	; 0x10f2 <queue_remove+0xa2>
	}
	else
	{
		if ((queue_header_t *)(x->prev))
    1076:	a0 81       	ld	r26, Z
    1078:	b1 81       	ldd	r27, Z+1	; 0x01
    107a:	10 97       	sbiw	r26, 0x00	; 0
    107c:	39 f0       	breq	.+14     	; 0x108c <queue_remove+0x3c>
			((queue_header_t *)(x->prev))->next = x->next;
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	13 96       	adiw	r26, 0x03	; 3
    1084:	9c 93       	st	X, r25
    1086:	8e 93       	st	-X, r24
    1088:	12 97       	sbiw	r26, 0x02	; 2
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <queue_remove+0x44>
		else
			q->head = x->next;
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	9d 83       	std	Y+5, r25	; 0x05
    1092:	8c 83       	std	Y+4, r24	; 0x04

		if ((queue_header_t *)(x->next))
    1094:	a2 81       	ldd	r26, Z+2	; 0x02
    1096:	b3 81       	ldd	r27, Z+3	; 0x03
    1098:	10 97       	sbiw	r26, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <queue_remove+0x56>
			((queue_header_t *)(x->next))->prev = x->prev;
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	8d 93       	st	X+, r24
    10a2:	9c 93       	st	X, r25
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <queue_remove+0x5e>
		else
			q->tail = x->prev;
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	9f 83       	std	Y+7, r25	; 0x07
    10ac:	8e 83       	std	Y+6, r24	; 0x06

		q->count--;
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
		q->data_usage -= x->length;
    10b8:	28 85       	ldd	r18, Y+8	; 0x08
    10ba:	39 85       	ldd	r19, Y+9	; 0x09
    10bc:	44 81       	ldd	r20, Z+4	; 0x04
    10be:	55 81       	ldd	r21, Z+5	; 0x05
    10c0:	24 1b       	sub	r18, r20
    10c2:	35 0b       	sbc	r19, r21
    10c4:	39 87       	std	Y+9, r19	; 0x09
    10c6:	28 87       	std	Y+8, r18	; 0x08
		q->memory_usage = MEMORY_CALC(q);
    10c8:	ac 01       	movw	r20, r24
    10ca:	44 0f       	add	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	84 0f       	add	r24, r20
    10dc:	95 1f       	adc	r25, r21
    10de:	28 0f       	add	r18, r24
    10e0:	39 1f       	adc	r19, r25
    10e2:	3b 87       	std	Y+11, r19	; 0x0b
    10e4:	2a 87       	std	Y+10, r18	; 0x0a
		free((void*)x);
    10e6:	cf 01       	movw	r24, r30
    10e8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		return QUEUE_SUCCESS;
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <queue_remove+0xa2>

queue_results_t queue_remove(queue_t * q, queue_header_t * x)
{
	if (q->count == 0)
	{
		return QUEUE_EMPTY;
    10f0:	83 e0       	ldi	r24, 0x03	; 3
		q->data_usage -= x->length;
		q->memory_usage = MEMORY_CALC(q);
		free((void*)x);
		return QUEUE_SUCCESS;
	}
}
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <queue_peek_length>:

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    10f8:	dc 01       	movw	r26, r24
    10fa:	14 96       	adiw	r26, 0x04	; 4
    10fc:	ed 91       	ld	r30, X+
    10fe:	fc 91       	ld	r31, X
    1100:	15 97       	sbiw	r26, 0x05	; 5
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	39 f0       	breq	.+14     	; 0x1114 <queue_peek_length+0x1c>
	*length = ((queue_header_t *)r->head)->length;
    1106:	84 81       	ldd	r24, Z+4	; 0x04
    1108:	95 81       	ldd	r25, Z+5	; 0x05
    110a:	fb 01       	movw	r30, r22
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
	return QUEUE_SUCCESS;
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	08 95       	ret
	}
}

queue_results_t queue_peek_length(queue_t * r, uint16_t * length)
{
	if (r->head == 0) return QUEUE_EMPTY;
    1114:	83 e0       	ldi	r24, 0x03	; 3
	*length = ((queue_header_t *)r->head)->length;
	return QUEUE_SUCCESS;
}
    1116:	08 95       	ret

00001118 <queue_clear>:

queue_results_t queue_clear(queue_t * r)
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	8c 01       	movw	r16, r24
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
    1122:	fc 01       	movw	r30, r24
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	95 81       	ldd	r25, Z+5	; 0x05
	while (obj)
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	49 f0       	breq	.+18     	; 0x113e <queue_clear+0x26>
	{
		next = obj->next;
    112c:	fc 01       	movw	r30, r24
    112e:	c2 81       	ldd	r28, Z+2	; 0x02
    1130:	d3 81       	ldd	r29, Z+3	; 0x03
		free((void *)obj);
    1132:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
{
	queue_header_t * obj;
	queue_header_t * next;

	obj = r->head;
	while (obj)
    1136:	20 97       	sbiw	r28, 0x00	; 0
    1138:	11 f0       	breq	.+4      	; 0x113e <queue_clear+0x26>
	{
		next = obj->next;
		free((void *)obj);
		obj = next;
    113a:	ce 01       	movw	r24, r28
    113c:	f7 cf       	rjmp	.-18     	; 0x112c <queue_clear+0x14>
	}

	queue_reset(r);
    113e:	c8 01       	movw	r24, r16
    1140:	0e 94 01 07 	call	0xe02	; 0xe02 <queue_reset>

	return QUEUE_SUCCESS;
}
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <eeprom_read>:
#include "eeprom.h"


uint8_t eeprom_read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
    1150:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__eerd_byte_m1284p>
}
    1154:	08 95       	ret

00001156 <eeprom_write>:

void eeprom_write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
    1156:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__eewr_byte_m1284p>
    115a:	08 95       	ret

0000115c <btle_set_cts>:
}

void btle_set_cts()
{
	//pd5 low
	PORTD &= ~_BV(PD5);
    115c:	5d 98       	cbi	0x0b, 5	; 11
    115e:	08 95       	ret

00001160 <btle_init>:

void btle_init()
{
	//btle_usart_init();
	// set portd bit 5 as output
	DDRD |= _BV(PD5);
    1160:	55 9a       	sbi	0x0a, 5	; 10
	// set portd bit 4 as input
	DDRD &= ~_BV(PD4);
    1162:	54 98       	cbi	0x0a, 4	; 10

	btle_driver_init();
    1164:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <btle_driver_init>
	btle_set_cts();
    1168:	0e 94 ae 08 	call	0x115c	; 0x115c <btle_set_cts>
    116c:	08 95       	ret

0000116e <btle_get_rts>:
}

uint8_t btle_get_rts()
{
	// return logic high or low
	return (PIND & _BV(PD4));
    116e:	89 b1       	in	r24, 0x09	; 9
}
    1170:	80 71       	andi	r24, 0x10	; 16
    1172:	08 95       	ret

00001174 <btle_tick>:

void btle_tick()
{
	btle_driver_tick();
    1174:	0e 94 1a 09 	call	0x1234	; 0x1234 <btle_driver_tick>
#ifdef BYPASSS_MODE
#else
	ramdisk_clean_tick();
    1178:	0e 94 82 0a 	call	0x1504	; 0x1504 <ramdisk_clean_tick>
    117c:	08 95       	ret

0000117e <btle_enqueue>:
}

queue_results_t btle_enqueue(btle_msg_t *msg)
{
	//queue_results_t result = queue_enqueue(&btle_queue, &msg, sizeof(btle_msg_t));
	queue_results_t result = queue_enqueue(&btle_queue, msg,
    117e:	45 e1       	ldi	r20, 0x15	; 21
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	bc 01       	movw	r22, r24
    1184:	86 ee       	ldi	r24, 0xE6	; 230
    1186:	9a e0       	ldi	r25, 0x0A	; 10
    1188:	0e 94 13 07 	call	0xe26	; 0xe26 <queue_enqueue>
			sizeof(btle_msg_t));

	return result;
}
    118c:	08 95       	ret

0000118e <btle_parse_nybble>:

}

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
    118e:	9f eb       	ldi	r25, 0xBF	; 191
    1190:	98 0f       	add	r25, r24
    1192:	96 30       	cpi	r25, 0x06	; 6
    1194:	08 f4       	brcc	.+2      	; 0x1198 <btle_parse_nybble+0xa>
		c = c | 0x20;
    1196:	80 62       	ori	r24, 0x20	; 32
	for (uint8_t i = 0; i < 16; i++)
	{
		if (HEX_DIGITS[i] == c)
    1198:	90 91 17 01 	lds	r25, 0x0117
    119c:	98 17       	cp	r25, r24
    119e:	51 f0       	breq	.+20     	; 0x11b4 <btle_parse_nybble+0x26>
    11a0:	e8 e1       	ldi	r30, 0x18	; 24
    11a2:	f1 e0       	ldi	r31, 0x01	; 1

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    11a4:	91 e0       	ldi	r25, 0x01	; 1
	{
		if (HEX_DIGITS[i] == c)
    11a6:	21 91       	ld	r18, Z+
    11a8:	28 17       	cp	r18, r24
    11aa:	31 f0       	breq	.+12     	; 0x11b8 <btle_parse_nybble+0x2a>

uint8_t btle_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	90 31       	cpi	r25, 0x10	; 16
    11b0:	d1 f7       	brne	.-12     	; 0x11a6 <btle_parse_nybble+0x18>
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <btle_parse_nybble+0x2e>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret
    11b8:	89 2f       	mov	r24, r25
    11ba:	08 95       	ret
	{
		if (HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
    11bc:	80 e8       	ldi	r24, 0x80	; 128
}
    11be:	08 95       	ret

000011c0 <btle_driver_init>:

static btle_msg_t *next_msg = NULL;

void btle_driver_init()
{
	queue_init(&btle_queue, MSG_QUEUE_SIZE);
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e2       	ldi	r23, 0x20	; 32
    11c4:	86 ee       	ldi	r24, 0xE6	; 230
    11c6:	9a e0       	ldi	r25, 0x0A	; 10
    11c8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <queue_init>
	queue_init(&packet_queue, MSG_QUEUE_SIZE);
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e2       	ldi	r23, 0x20	; 32
    11d0:	8a ed       	ldi	r24, 0xDA	; 218
    11d2:	9a e0       	ldi	r25, 0x0A	; 10
    11d4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <queue_init>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    11d8:	10 92 a5 09 	sts	0x09A5, r1
    11dc:	10 92 a4 09 	sts	0x09A4, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    11e0:	81 e8       	ldi	r24, 0x81	; 129
    11e2:	e3 e7       	ldi	r30, 0x73	; 115
    11e4:	fb e0       	ldi	r31, 0x0B	; 11
    11e6:	df 01       	movw	r26, r30
    11e8:	98 2f       	mov	r25, r24
    11ea:	1d 92       	st	X+, r1
    11ec:	9a 95       	dec	r25
    11ee:	e9 f7       	brne	.-6      	; 0x11ea <btle_driver_init+0x2a>
}

static void init_lines()
{
	memset(btle_lines, '\0', sizeof(btle_lines));
    11f0:	e2 ef       	ldi	r30, 0xF2	; 242
    11f2:	fa e0       	ldi	r31, 0x0A	; 10
    11f4:	df 01       	movw	r26, r30
    11f6:	1d 92       	st	X+, r1
    11f8:	8a 95       	dec	r24
    11fa:	e9 f7       	brne	.-6      	; 0x11f6 <btle_driver_init+0x36>
    11fc:	08 95       	ret

000011fe <enqueue_packet>:
		}
	}
}

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	8b 01       	movw	r16, r22
	msg->type = msg_type;
    1208:	fb 01       	movw	r30, r22
    120a:	84 8b       	std	Z+20, r24	; 0x14
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	c0 e0       	ldi	r28, 0x00	; 0
    1212:	d0 e0       	ldi	r29, 0x00	; 0
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
    1214:	f8 01       	movw	r30, r16
    1216:	e8 0f       	add	r30, r24
    1218:	f9 1f       	adc	r31, r25
    121a:	80 81       	ld	r24, Z
    121c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <circular_queue_put_char>

void enqueue_packet(uint8_t msg_type, btle_msg_t *msg)
{
	msg->type = msg_type;
	//queue_enqueue(&packet_queue, msg, sizeof(btle_msg_t));
	for(int i = 0; i < sizeof(btle_msg_t); i++)
    1220:	21 96       	adiw	r28, 0x01	; 1
    1222:	ce 01       	movw	r24, r28
    1224:	c5 31       	cpi	r28, 0x15	; 21
    1226:	d1 05       	cpc	r29, r1
    1228:	a9 f7       	brne	.-22     	; 0x1214 <enqueue_packet+0x16>
	{
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <btle_driver_tick>:
	init_buffer();
	init_lines();
}

void btle_driver_tick()
{
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	e6 97       	sbiw	r28, 0x36	; 54
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61

	if (btle_usart_data_available())
    125e:	0e 94 c7 03 	call	0x78e	; 0x78e <btle_usart_data_available>
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <btle_driver_tick+0x34>
    1266:	3a c1       	rjmp	.+628    	; 0x14dc <btle_driver_tick+0x2a8>

// check to see if we have a new line
bool handle_data()
{

	char c = btle_usart_data_read();
    1268:	0e 94 cd 03 	call	0x79a	; 0x79a <btle_usart_data_read>

	// ignore null terminated strings
	if (c == '\0')
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <btle_driver_tick+0x3e>
    1270:	35 c1       	rjmp	.+618    	; 0x14dc <btle_driver_tick+0x2a8>
		return false;
	// prevent buffer overrun
	if (btle_line_index >= BTLE_MAX_CHARS)
    1272:	20 91 a4 09 	lds	r18, 0x09A4
    1276:	30 91 a5 09 	lds	r19, 0x09A5
    127a:	20 38       	cpi	r18, 0x80	; 128
    127c:	31 05       	cpc	r19, r1
    127e:	0c f0       	brlt	.+2      	; 0x1282 <btle_driver_tick+0x4e>
    1280:	2d c1       	rjmp	.+602    	; 0x14dc <btle_driver_tick+0x2a8>
		return false;

	// store character in btle_line_buffer
	btle_line_buffer[btle_line_index] = c;
    1282:	f9 01       	movw	r30, r18
    1284:	ed 58       	subi	r30, 0x8D	; 141
    1286:	f4 4f       	sbci	r31, 0xF4	; 244
    1288:	80 83       	st	Z, r24
	btle_line_index++;
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	30 93 a5 09 	sts	0x09A5, r19
    1292:	20 93 a4 09 	sts	0x09A4, r18

	// check for end of line
	if (c == BTLE_TKEND[0])
    1296:	8a 30       	cpi	r24, 0x0A	; 10
    1298:	09 f0       	breq	.+2      	; 0x129c <btle_driver_tick+0x68>
    129a:	20 c1       	rjmp	.+576    	; 0x14dc <btle_driver_tick+0x2a8>
	{
		// copy new message into buffer
		strcpy(btle_lines, btle_line_buffer);
    129c:	63 e7       	ldi	r22, 0x73	; 115
    129e:	7b e0       	ldi	r23, 0x0B	; 11
    12a0:	82 ef       	ldi	r24, 0xF2	; 242
    12a2:	9a e0       	ldi	r25, 0x0A	; 10
    12a4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <strcpy>
	wan_usart_transmit_string(tmp);
}

static void init_buffer()
{
	btle_line_index = 0;
    12a8:	10 92 a5 09 	sts	0x09A5, r1
    12ac:	10 92 a4 09 	sts	0x09A4, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
    12b0:	81 e8       	ldi	r24, 0x81	; 129
    12b2:	e3 e7       	ldi	r30, 0x73	; 115
    12b4:	fb e0       	ldi	r31, 0x0B	; 11
    12b6:	df 01       	movw	r26, r30
    12b8:	1d 92       	st	X+, r1
    12ba:	8a 95       	dec	r24
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <btle_driver_tick+0x84>
}

static uint8_t parse_data(const char *token, char **out)
{
	char* ptr = NULL;
	if ((ptr = strstr(btle_lines, token)))
    12be:	6a e2       	ldi	r22, 0x2A	; 42
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	82 ef       	ldi	r24, 0xF2	; 242
    12c4:	9a e0       	ldi	r25, 0x0A	; 10
    12c6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <strchr>
    12ca:	8c 01       	movw	r16, r24
		{

			char *ptr = NULL;
			// handle the new line

			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND)
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <btle_driver_tick+0x9e>
    12d0:	05 c1       	rjmp	.+522    	; 0x14dc <btle_driver_tick+0x2a8>

btle_msg_t btle_handle_le_packet(char * buffer)
{
	btle_msg_t btle_msg;

	memset(&btle_msg, 0, sizeof(btle_msg_t));
    12d2:	fe 01       	movw	r30, r28
    12d4:	31 96       	adiw	r30, 0x01	; 1
    12d6:	85 e1       	ldi	r24, 0x15	; 21
    12d8:	df 01       	movw	r26, r30
    12da:	1d 92       	st	X+, r1
    12dc:	8a 95       	dec	r24
    12de:	e9 f7       	brne	.-6      	; 0x12da <btle_driver_tick+0xa6>
	uint64_t mac;
	int i;

	// Validate checksum in bytes 27-28
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
    12e0:	f8 01       	movw	r30, r16
    12e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    12e4:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    12e8:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[28]);
    12ea:	d8 01       	movw	r26, r16
    12ec:	5c 96       	adiw	r26, 0x1c	; 28
    12ee:	8c 91       	ld	r24, X
    12f0:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	ck = (msb << 4) | lsb;
    12f4:	b0 e1       	ldi	r27, 0x10	; 16
    12f6:	fb 9e       	mul	r15, r27
    12f8:	90 01       	movw	r18, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	82 2b       	or	r24, r18
    12fe:	f8 01       	movw	r30, r16
	ckx = 0;
    1300:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i <= 26; i++)
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
		ckx ^= buffer[i];
    1306:	41 91       	ld	r20, Z+
    1308:	94 27       	eor	r25, r20
	// Just an XOR of bytes 0-26
	msb = btle_parse_nybble(buffer[27]);
	lsb = btle_parse_nybble(buffer[28]);
	ck = (msb << 4) | lsb;
	ckx = 0;
	for (i = 0; i <= 26; i++)
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	2b 31       	cpi	r18, 0x1B	; 27
    1310:	31 05       	cpc	r19, r1
    1312:	c9 f7       	brne	.-14     	; 0x1306 <btle_driver_tick+0xd2>
		ckx ^= buffer[i];
	if (ck != ckx)
    1314:	89 17       	cp	r24, r25
    1316:	51 f0       	breq	.+20     	; 0x132c <btle_driver_tick+0xf8>
	{
		return btle_msg;
    1318:	85 e1       	ldi	r24, 0x15	; 21
    131a:	fe 01       	movw	r30, r28
    131c:	31 96       	adiw	r30, 0x01	; 1
    131e:	de 01       	movw	r26, r28
    1320:	56 96       	adiw	r26, 0x16	; 22
    1322:	01 90       	ld	r0, Z+
    1324:	0d 92       	st	X+, r0
    1326:	8a 95       	dec	r24
    1328:	e1 f7       	brne	.-8      	; 0x1322 <btle_driver_tick+0xee>
    132a:	d2 c0       	rjmp	.+420    	; 0x14d0 <btle_driver_tick+0x29c>
	}

	// MAC address - incoming 48bits
	//
	num = (uint8_t *) &mac;
	num[7] = 0;
    132c:	1a aa       	std	Y+50, r1	; 0x32
	num[6] = 0;
    132e:	19 aa       	std	Y+49, r1	; 0x31
	msb = btle_parse_nybble(buffer[1]);
    1330:	f8 01       	movw	r30, r16
    1332:	81 81       	ldd	r24, Z+1	; 0x01
    1334:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    1338:	f8 2e       	mov	r15, r24
	lsb = btle_parse_nybble(buffer[2]);
    133a:	d8 01       	movw	r26, r16
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8c 91       	ld	r24, X
    1340:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[5] = (msb << 4) | lsb;
    1344:	b0 e1       	ldi	r27, 0x10	; 16
    1346:	fb 9e       	mul	r15, r27
    1348:	90 01       	movw	r18, r0
    134a:	11 24       	eor	r1, r1
    134c:	f8 2e       	mov	r15, r24
    134e:	f2 2a       	or	r15, r18
    1350:	f8 aa       	std	Y+48, r15	; 0x30
	msb = btle_parse_nybble(buffer[3]);
    1352:	f8 01       	movw	r30, r16
    1354:	83 81       	ldd	r24, Z+3	; 0x03
    1356:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    135a:	e8 2e       	mov	r14, r24
	lsb = btle_parse_nybble(buffer[4]);
    135c:	d8 01       	movw	r26, r16
    135e:	14 96       	adiw	r26, 0x04	; 4
    1360:	8c 91       	ld	r24, X
    1362:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[4] = (msb << 4) | lsb;
    1366:	b0 e1       	ldi	r27, 0x10	; 16
    1368:	eb 9e       	mul	r14, r27
    136a:	90 01       	movw	r18, r0
    136c:	11 24       	eor	r1, r1
    136e:	e8 2e       	mov	r14, r24
    1370:	e2 2a       	or	r14, r18
    1372:	ef a6       	std	Y+47, r14	; 0x2f
	msb = btle_parse_nybble(buffer[5]);
    1374:	f8 01       	movw	r30, r16
    1376:	85 81       	ldd	r24, Z+5	; 0x05
    1378:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    137c:	d8 2e       	mov	r13, r24
	lsb = btle_parse_nybble(buffer[6]);
    137e:	d8 01       	movw	r26, r16
    1380:	16 96       	adiw	r26, 0x06	; 6
    1382:	8c 91       	ld	r24, X
    1384:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[3] = (msb << 4) | lsb;
    1388:	b0 e1       	ldi	r27, 0x10	; 16
    138a:	db 9e       	mul	r13, r27
    138c:	90 01       	movw	r18, r0
    138e:	11 24       	eor	r1, r1
    1390:	d8 2e       	mov	r13, r24
    1392:	d2 2a       	or	r13, r18
    1394:	de a6       	std	Y+46, r13	; 0x2e
	msb = btle_parse_nybble(buffer[7]);
    1396:	f8 01       	movw	r30, r16
    1398:	87 81       	ldd	r24, Z+7	; 0x07
    139a:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    139e:	c8 2e       	mov	r12, r24
	lsb = btle_parse_nybble(buffer[8]);
    13a0:	d8 01       	movw	r26, r16
    13a2:	18 96       	adiw	r26, 0x08	; 8
    13a4:	8c 91       	ld	r24, X
    13a6:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[2] = (msb << 4) | lsb;
    13aa:	b0 e1       	ldi	r27, 0x10	; 16
    13ac:	cb 9e       	mul	r12, r27
    13ae:	90 01       	movw	r18, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	c8 2e       	mov	r12, r24
    13b4:	c2 2a       	or	r12, r18
    13b6:	cd a6       	std	Y+45, r12	; 0x2d
	msb = btle_parse_nybble(buffer[9]);
    13b8:	f8 01       	movw	r30, r16
    13ba:	81 85       	ldd	r24, Z+9	; 0x09
    13bc:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    13c0:	b8 2e       	mov	r11, r24
	lsb = btle_parse_nybble(buffer[10]);
    13c2:	d8 01       	movw	r26, r16
    13c4:	1a 96       	adiw	r26, 0x0a	; 10
    13c6:	8c 91       	ld	r24, X
    13c8:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    13cc:	b0 e1       	ldi	r27, 0x10	; 16
    13ce:	bb 9e       	mul	r11, r27
    13d0:	90 01       	movw	r18, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	b8 2e       	mov	r11, r24
    13d6:	b2 2a       	or	r11, r18
    13d8:	bc a6       	std	Y+44, r11	; 0x2c
	msb = btle_parse_nybble(buffer[11]);
    13da:	f8 01       	movw	r30, r16
    13dc:	83 85       	ldd	r24, Z+11	; 0x0b
    13de:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    13e2:	a8 2e       	mov	r10, r24
	lsb = btle_parse_nybble(buffer[12]);
    13e4:	d8 01       	movw	r26, r16
    13e6:	1c 96       	adiw	r26, 0x0c	; 12
    13e8:	8c 91       	ld	r24, X
    13ea:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    13ee:	b0 e1       	ldi	r27, 0x10	; 16
    13f0:	ab 9e       	mul	r10, r27
    13f2:	90 01       	movw	r18, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	a8 2e       	mov	r10, r24
    13f8:	a2 2a       	or	r10, r18
    13fa:	ab a6       	std	Y+43, r10	; 0x2b

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
    13fc:	f8 01       	movw	r30, r16
    13fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1400:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    1404:	88 2e       	mov	r8, r24
	lsb = btle_parse_nybble(buffer[15]);
    1406:	d8 01       	movw	r26, r16
    1408:	1f 96       	adiw	r26, 0x0f	; 15
    140a:	8c 91       	ld	r24, X
    140c:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    1410:	98 2e       	mov	r9, r24
	rssi = (msb << 4) | lsb;

	// Temperature
	//
	num = (uint8_t *) &temp;
	msb = btle_parse_nybble(buffer[17]);
    1412:	f8 01       	movw	r30, r16
    1414:	81 89       	ldd	r24, Z+17	; 0x11
    1416:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    141a:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[18]);
    141c:	d8 01       	movw	r26, r16
    141e:	52 96       	adiw	r26, 0x12	; 18
    1420:	8c 91       	ld	r24, X
    1422:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    1426:	b0 e1       	ldi	r27, 0x10	; 16
    1428:	7b 9e       	mul	r7, r27
    142a:	90 01       	movw	r18, r0
    142c:	11 24       	eor	r1, r1
    142e:	82 2b       	or	r24, r18
    1430:	8b ab       	std	Y+51, r24	; 0x33
	msb = btle_parse_nybble(buffer[19]);
    1432:	f8 01       	movw	r30, r16
    1434:	83 89       	ldd	r24, Z+19	; 0x13
    1436:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    143a:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[20]);
    143c:	d8 01       	movw	r26, r16
    143e:	54 96       	adiw	r26, 0x14	; 20
    1440:	8c 91       	ld	r24, X
    1442:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    1446:	b0 e1       	ldi	r27, 0x10	; 16
    1448:	7b 9e       	mul	r7, r27
    144a:	90 01       	movw	r18, r0
    144c:	11 24       	eor	r1, r1
    144e:	82 2b       	or	r24, r18
    1450:	8c ab       	std	Y+52, r24	; 0x34

	// Battery
	//
	num = (uint8_t *) &batt;
	msb = btle_parse_nybble(buffer[22]);
    1452:	f8 01       	movw	r30, r16
    1454:	86 89       	ldd	r24, Z+22	; 0x16
    1456:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    145a:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[23]);
    145c:	d8 01       	movw	r26, r16
    145e:	57 96       	adiw	r26, 0x17	; 23
    1460:	8c 91       	ld	r24, X
    1462:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[0] = (msb << 4) | lsb;
    1466:	b0 e1       	ldi	r27, 0x10	; 16
    1468:	7b 9e       	mul	r7, r27
    146a:	90 01       	movw	r18, r0
    146c:	11 24       	eor	r1, r1
    146e:	82 2b       	or	r24, r18
    1470:	8d ab       	std	Y+53, r24	; 0x35
	msb = btle_parse_nybble(buffer[24]);
    1472:	f8 01       	movw	r30, r16
    1474:	80 8d       	ldd	r24, Z+24	; 0x18
    1476:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
    147a:	78 2e       	mov	r7, r24
	lsb = btle_parse_nybble(buffer[25]);
    147c:	d8 01       	movw	r26, r16
    147e:	59 96       	adiw	r26, 0x19	; 25
    1480:	8c 91       	ld	r24, X
    1482:	0e 94 c7 08 	call	0x118e	; 0x118e <btle_parse_nybble>
	num[1] = (msb << 4) | lsb;
    1486:	b0 e1       	ldi	r27, 0x10	; 16
    1488:	7b 9e       	mul	r7, r27
    148a:	90 01       	movw	r18, r0
    148c:	11 24       	eor	r1, r1
    148e:	82 2b       	or	r24, r18
    1490:	8e ab       	std	Y+54, r24	; 0x36

	// RSSI
	//
	msb = btle_parse_nybble(buffer[14]);
	lsb = btle_parse_nybble(buffer[15]);
	rssi = (msb << 4) | lsb;
    1492:	e0 e1       	ldi	r30, 0x10	; 16
    1494:	8e 9e       	mul	r8, r30
    1496:	c0 01       	movw	r24, r0
    1498:	11 24       	eor	r1, r1
    149a:	89 29       	or	r24, r9
	num[0] = (msb << 4) | lsb;
	msb = btle_parse_nybble(buffer[24]);
	lsb = btle_parse_nybble(buffer[25]);
	num[1] = (msb << 4) | lsb;

	btle_msg.rssi = rssi;
    149c:	89 83       	std	Y+1, r24	; 0x01
	btle_msg.mac = mac;
    149e:	aa 82       	std	Y+2, r10	; 0x02
    14a0:	bb 82       	std	Y+3, r11	; 0x03
    14a2:	cc 82       	std	Y+4, r12	; 0x04
    14a4:	dd 82       	std	Y+5, r13	; 0x05
    14a6:	ee 82       	std	Y+6, r14	; 0x06
    14a8:	ff 82       	std	Y+7, r15	; 0x07
    14aa:	18 86       	std	Y+8, r1	; 0x08
    14ac:	19 86       	std	Y+9, r1	; 0x09
	btle_msg.batt = batt;
    14ae:	8d a9       	ldd	r24, Y+53	; 0x35
    14b0:	9e a9       	ldd	r25, Y+54	; 0x36
    14b2:	9b 87       	std	Y+11, r25	; 0x0b
    14b4:	8a 87       	std	Y+10, r24	; 0x0a
	btle_msg.temp = temp;
    14b6:	8b a9       	ldd	r24, Y+51	; 0x33
    14b8:	9c a9       	ldd	r25, Y+52	; 0x34
    14ba:	9d 87       	std	Y+13, r25	; 0x0d
    14bc:	8c 87       	std	Y+12, r24	; 0x0c

	return btle_msg;
    14be:	85 e1       	ldi	r24, 0x15	; 21
    14c0:	fe 01       	movw	r30, r28
    14c2:	31 96       	adiw	r30, 0x01	; 1
    14c4:	de 01       	movw	r26, r28
    14c6:	56 96       	adiw	r26, 0x16	; 22
    14c8:	01 90       	ld	r0, Z+
    14ca:	0d 92       	st	X+, r0
    14cc:	8a 95       	dec	r24
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <btle_driver_tick+0x294>
			if (parse_data((const char*) BTLE_TKSTART, &ptr) == BTLE_TKFOUND)
			{
				btle_msg_t msg = btle_handle_le_packet(ptr);

#ifdef BYPASS_MODE
				enqueue_packet(MSG_TYPE_NORM, &msg);
    14d0:	be 01       	movw	r22, r28
    14d2:	6a 5e       	subi	r22, 0xEA	; 234
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <enqueue_packet>
				}
#endif
			}
		}
	}
}
    14dc:	e6 96       	adiw	r28, 0x36	; 54
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	af 90       	pop	r10
    14fc:	9f 90       	pop	r9
    14fe:	8f 90       	pop	r8
    1500:	7f 90       	pop	r7
    1502:	08 95       	ret

00001504 <ramdisk_clean_tick>:
		circular_queue_put_char(((uint8_t *) msg)[i]);
	}
}

void ramdisk_clean_tick()
{
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
	btle_msg_t *msg;
	if (next_msg != NULL)
    150c:	c0 91 a2 09 	lds	r28, 0x09A2
    1510:	d0 91 a3 09 	lds	r29, 0x09A3
    1514:	20 97       	sbiw	r28, 0x00	; 0
    1516:	c1 f1       	breq	.+112    	; 0x1588 <ramdisk_clean_tick+0x84>
	{
		msg = next_msg;
		next_msg = ramdisk_next(next_msg);
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 b4 06 	call	0xd68	; 0xd68 <ramdisk_next>
    151e:	90 93 a3 09 	sts	0x09A3, r25
    1522:	80 93 a2 09 	sts	0x09A2, r24
		if ((clock_time() - msg->last_sent) >= 10000)
    1526:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <clock_time>
    152a:	0f 85       	ldd	r16, Y+15	; 0x0f
    152c:	18 89       	ldd	r17, Y+16	; 0x10
    152e:	29 89       	ldd	r18, Y+17	; 0x11
    1530:	3a 89       	ldd	r19, Y+18	; 0x12
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	80 1b       	sub	r24, r16
    1538:	91 0b       	sbc	r25, r17
    153a:	a2 0b       	sbc	r26, r18
    153c:	b3 0b       	sbc	r27, r19
    153e:	80 31       	cpi	r24, 0x10	; 16
    1540:	97 42       	sbci	r25, 0x27	; 39
    1542:	a1 05       	cpc	r26, r1
    1544:	b1 05       	cpc	r27, r1
    1546:	40 f1       	brcs	.+80     	; 0x1598 <ramdisk_clean_tick+0x94>
		{
			//send "is out of prox packet"
			enqueue_packet(MSG_TYPE_OUT_PROX, msg);
    1548:	be 01       	movw	r22, r28
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <enqueue_packet>
			// erase the packet
			ramdisk_erase(*msg);
    1550:	8d b7       	in	r24, 0x3d	; 61
    1552:	9e b7       	in	r25, 0x3e	; 62
    1554:	45 97       	sbiw	r24, 0x15	; 21
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	9e bf       	out	0x3e, r25	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	8d bf       	out	0x3d, r24	; 61
    1560:	ad b7       	in	r26, 0x3d	; 61
    1562:	be b7       	in	r27, 0x3e	; 62
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	85 e1       	ldi	r24, 0x15	; 21
    1568:	fe 01       	movw	r30, r28
    156a:	01 90       	ld	r0, Z+
    156c:	0d 92       	st	X+, r0
    156e:	8a 95       	dec	r24
    1570:	e1 f7       	brne	.-8      	; 0x156a <ramdisk_clean_tick+0x66>
    1572:	0e 94 a3 05 	call	0xb46	; 0xb46 <ramdisk_erase>
    1576:	8d b7       	in	r24, 0x3d	; 61
    1578:	9e b7       	in	r25, 0x3e	; 62
    157a:	45 96       	adiw	r24, 0x15	; 21
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	9e bf       	out	0x3e, r25	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	8d bf       	out	0x3d, r24	; 61
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <ramdisk_clean_tick+0x94>
		}

	}
	else
	{
		next_msg = ramdisk_next(NULL);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 b4 06 	call	0xd68	; 0xd68 <ramdisk_next>
    1590:	90 93 a3 09 	sts	0x09A3, r25
    1594:	80 93 a2 09 	sts	0x09A2, r24
	}

}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <encode_string>:

void encode_string(btle_msg_t * value);

#define DEBUG_OUTPUT "rssi=%d batt=%d temp=%d mac=%d \r\n\0"
void encode_string(btle_msg_t * value)
{
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	e2 97       	sbiw	r28, 0x32	; 50
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	fc 01       	movw	r30, r24
	char tmp[50];

	memset(tmp, '\0', 50);
    15bc:	8e 01       	movw	r16, r28
    15be:	0f 5f       	subi	r16, 0xFF	; 255
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	82 e3       	ldi	r24, 0x32	; 50
    15c4:	d8 01       	movw	r26, r16
    15c6:	1d 92       	st	X+, r1
    15c8:	8a 95       	dec	r24
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <encode_string+0x24>
	sprintf_P(tmp, PSTR(DEBUG_OUTPUT), value->rssi, value->batt, value->temp,
    15cc:	80 85       	ldd	r24, Z+8	; 0x08
    15ce:	8f 93       	push	r24
    15d0:	87 81       	ldd	r24, Z+7	; 0x07
    15d2:	8f 93       	push	r24
    15d4:	86 81       	ldd	r24, Z+6	; 0x06
    15d6:	8f 93       	push	r24
    15d8:	85 81       	ldd	r24, Z+5	; 0x05
    15da:	8f 93       	push	r24
    15dc:	84 81       	ldd	r24, Z+4	; 0x04
    15de:	8f 93       	push	r24
    15e0:	83 81       	ldd	r24, Z+3	; 0x03
    15e2:	8f 93       	push	r24
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	8f 93       	push	r24
    15e8:	81 81       	ldd	r24, Z+1	; 0x01
    15ea:	8f 93       	push	r24
    15ec:	84 85       	ldd	r24, Z+12	; 0x0c
    15ee:	8f 93       	push	r24
    15f0:	83 85       	ldd	r24, Z+11	; 0x0b
    15f2:	8f 93       	push	r24
    15f4:	82 85       	ldd	r24, Z+10	; 0x0a
    15f6:	8f 93       	push	r24
    15f8:	81 85       	ldd	r24, Z+9	; 0x09
    15fa:	8f 93       	push	r24
    15fc:	80 81       	ld	r24, Z
    15fe:	1f 92       	push	r1
    1600:	8f 93       	push	r24
    1602:	8d e9       	ldi	r24, 0x9D	; 157
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9f 93       	push	r25
    1608:	8f 93       	push	r24
    160a:	1f 93       	push	r17
    160c:	0f 93       	push	r16
    160e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <sprintf_P>
			value->mac);
	//LOG("%s\r\n", tmp);
	wan_usart_transmit_string(tmp);
    1612:	c8 01       	movw	r24, r16
    1614:	0e 94 c4 04 	call	0x988	; 0x988 <wan_usart_transmit_string>
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
}
    1622:	e2 96       	adiw	r28, 0x32	; 50
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <terminal_in_cb>:
bool timeout();
void set_timer(clock_time_t timeout);

void terminal_in_cb(uint8_t c)
{
	term_in = c;
    1638:	80 93 ad 09 	sts	0x09AD, r24
    163c:	08 95       	ret

0000163e <set_timer>:

	}
}

void set_timer(clock_time_t timeout)
{
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	6b 01       	movw	r12, r22
    1648:	7c 01       	movw	r14, r24
	future = clock_time() + timeout;
    164a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <clock_time>
    164e:	c6 0e       	add	r12, r22
    1650:	d7 1e       	adc	r13, r23
    1652:	e8 1e       	adc	r14, r24
    1654:	f9 1e       	adc	r15, r25
    1656:	c0 92 a9 09 	sts	0x09A9, r12
    165a:	d0 92 aa 09 	sts	0x09AA, r13
    165e:	e0 92 ab 09 	sts	0x09AB, r14
    1662:	f0 92 ac 09 	sts	0x09AC, r15
}
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	08 95       	ret

00001670 <timeout>:

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
	bool timeout = false;

	if(clock_time() >= future)
    1674:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <clock_time>
    1678:	00 91 a9 09 	lds	r16, 0x09A9
    167c:	10 91 aa 09 	lds	r17, 0x09AA
    1680:	20 91 ab 09 	lds	r18, 0x09AB
    1684:	30 91 ac 09 	lds	r19, 0x09AC
    1688:	60 17       	cp	r22, r16
    168a:	71 07       	cpc	r23, r17
    168c:	82 07       	cpc	r24, r18
    168e:	93 07       	cpc	r25, r19
    1690:	40 f0       	brcs	.+16     	; 0x16a2 <timeout+0x32>
	{
		set_timer(1000);
    1692:	68 ee       	ldi	r22, 0xE8	; 232
    1694:	73 e0       	ldi	r23, 0x03	; 3
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 1f 0b 	call	0x163e	; 0x163e <set_timer>
		timeout = true;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <timeout+0x34>

// timeout routine to demonstrate clock_time
// being kept by pwm isr interrupt
bool timeout()
{
	bool timeout = false;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
		timeout = true;

	}

	return timeout;
}
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <main>:

}

int main()
{
	DDRD |= _BV(PD6); // data direction bit
    16aa:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= _BV(PD7); // green (D2) output
    16ac:	57 9a       	sbi	0x0a, 7	; 10

	PORTD |= _BV(PD7); // set led green off
    16ae:	5f 9a       	sbi	0x0b, 7	; 11

	DDRB &= _BV(PB0); // WAN_INT_01
    16b0:	84 b1       	in	r24, 0x04	; 4
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	84 b9       	out	0x04, r24	; 4

	//debug_init(terminal_in_cb);
	btle_usart_init_cb(terminal_in_cb);
    16b6:	8c e1       	ldi	r24, 0x1C	; 28
    16b8:	9b e0       	ldi	r25, 0x0B	; 11
    16ba:	0e 94 8d 03 	call	0x71a	; 0x71a <btle_usart_init_cb>

	clock_init();
    16be:	0e 94 e6 02 	call	0x5cc	; 0x5cc <clock_init>
	config_init();
    16c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <config_init>
	ramdisk_init();
    16c6:	0e 94 04 05 	call	0xa08	; 0xa08 <ramdisk_init>
	/*
	 * load configuration
	 */

	// btle is on usart1
	btle_init();
    16ca:	0e 94 b0 08 	call	0x1160	; 0x1160 <btle_init>

	// wan is on usart0
	wan_init();
    16ce:	0e 94 81 00 	call	0x102	; 0x102 <wan_init>


	sei();
    16d2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16d4:	2f ef       	ldi	r18, 0xFF	; 255
    16d6:	89 e6       	ldi	r24, 0x69	; 105
    16d8:	98 e1       	ldi	r25, 0x18	; 24
    16da:	21 50       	subi	r18, 0x01	; 1
    16dc:	80 40       	sbci	r24, 0x00	; 0
    16de:	90 40       	sbci	r25, 0x00	; 0
    16e0:	e1 f7       	brne	.-8      	; 0x16da <main+0x30>
    16e2:	00 c0       	rjmp	.+0      	; 0x16e4 <main+0x3a>
    16e4:	00 00       	nop
		term_in = 0;

		if(timeout()){
			// just exercising timer
			set_timer(1000);
			PORTD ^= _BV(PD6);
    16e6:	c0 e4       	ldi	r28, 0x40	; 64
	sei();

	_delay_ms(1000);

	while(true){
		btle_tick();
    16e8:	0e 94 ba 08 	call	0x1174	; 0x1174 <btle_tick>
		wan_tick();
    16ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <wan_tick>

		if(term_in > 0)
    16f0:	80 91 ad 09 	lds	r24, 0x09AD
		{
			//wan_usart_transmit((char*)term_in);
		}

		term_in = 0;
    16f4:	10 92 ad 09 	sts	0x09AD, r1

		if(timeout()){
    16f8:	0e 94 38 0b 	call	0x1670	; 0x1670 <timeout>
    16fc:	88 23       	and	r24, r24
    16fe:	a1 f3       	breq	.-24     	; 0x16e8 <main+0x3e>
			// just exercising timer
			set_timer(1000);
    1700:	68 ee       	ldi	r22, 0xE8	; 232
    1702:	73 e0       	ldi	r23, 0x03	; 3
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 1f 0b 	call	0x163e	; 0x163e <set_timer>
			PORTD ^= _BV(PD6);
    170c:	8b b1       	in	r24, 0x0b	; 11
    170e:	8c 27       	eor	r24, r28
    1710:	8b b9       	out	0x0b, r24	; 11
    1712:	ea cf       	rjmp	.-44     	; 0x16e8 <main+0x3e>

00001714 <__cmpdi2>:
    1714:	2a 15       	cp	r18, r10
    1716:	3b 05       	cpc	r19, r11
    1718:	4c 05       	cpc	r20, r12
    171a:	5d 05       	cpc	r21, r13
    171c:	6e 05       	cpc	r22, r14
    171e:	7f 05       	cpc	r23, r15
    1720:	80 07       	cpc	r24, r16
    1722:	91 07       	cpc	r25, r17
    1724:	08 95       	ret

00001726 <malloc>:
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	91 05       	cpc	r25, r1
    172e:	10 f4       	brcc	.+4      	; 0x1734 <malloc+0xe>
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	e0 91 fe 0b 	lds	r30, 0x0BFE
    1738:	f0 91 ff 0b 	lds	r31, 0x0BFF
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	a0 e0       	ldi	r26, 0x00	; 0
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	30 97       	sbiw	r30, 0x00	; 0
    1746:	39 f1       	breq	.+78     	; 0x1796 <malloc+0x70>
    1748:	40 81       	ld	r20, Z
    174a:	51 81       	ldd	r21, Z+1	; 0x01
    174c:	48 17       	cp	r20, r24
    174e:	59 07       	cpc	r21, r25
    1750:	b8 f0       	brcs	.+46     	; 0x1780 <malloc+0x5a>
    1752:	48 17       	cp	r20, r24
    1754:	59 07       	cpc	r21, r25
    1756:	71 f4       	brne	.+28     	; 0x1774 <malloc+0x4e>
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	10 97       	sbiw	r26, 0x00	; 0
    175e:	29 f0       	breq	.+10     	; 0x176a <malloc+0x44>
    1760:	13 96       	adiw	r26, 0x03	; 3
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
    1766:	12 97       	sbiw	r26, 0x02	; 2
    1768:	2c c0       	rjmp	.+88     	; 0x17c2 <malloc+0x9c>
    176a:	90 93 ff 0b 	sts	0x0BFF, r25
    176e:	80 93 fe 0b 	sts	0x0BFE, r24
    1772:	27 c0       	rjmp	.+78     	; 0x17c2 <malloc+0x9c>
    1774:	21 15       	cp	r18, r1
    1776:	31 05       	cpc	r19, r1
    1778:	31 f0       	breq	.+12     	; 0x1786 <malloc+0x60>
    177a:	42 17       	cp	r20, r18
    177c:	53 07       	cpc	r21, r19
    177e:	18 f0       	brcs	.+6      	; 0x1786 <malloc+0x60>
    1780:	a9 01       	movw	r20, r18
    1782:	db 01       	movw	r26, r22
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <malloc+0x62>
    1786:	ef 01       	movw	r28, r30
    1788:	9a 01       	movw	r18, r20
    178a:	bd 01       	movw	r22, r26
    178c:	df 01       	movw	r26, r30
    178e:	02 80       	ldd	r0, Z+2	; 0x02
    1790:	f3 81       	ldd	r31, Z+3	; 0x03
    1792:	e0 2d       	mov	r30, r0
    1794:	d7 cf       	rjmp	.-82     	; 0x1744 <malloc+0x1e>
    1796:	21 15       	cp	r18, r1
    1798:	31 05       	cpc	r19, r1
    179a:	f9 f0       	breq	.+62     	; 0x17da <malloc+0xb4>
    179c:	28 1b       	sub	r18, r24
    179e:	39 0b       	sbc	r19, r25
    17a0:	24 30       	cpi	r18, 0x04	; 4
    17a2:	31 05       	cpc	r19, r1
    17a4:	80 f4       	brcc	.+32     	; 0x17c6 <malloc+0xa0>
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	61 15       	cp	r22, r1
    17ac:	71 05       	cpc	r23, r1
    17ae:	21 f0       	breq	.+8      	; 0x17b8 <malloc+0x92>
    17b0:	fb 01       	movw	r30, r22
    17b2:	93 83       	std	Z+3, r25	; 0x03
    17b4:	82 83       	std	Z+2, r24	; 0x02
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <malloc+0x9a>
    17b8:	90 93 ff 0b 	sts	0x0BFF, r25
    17bc:	80 93 fe 0b 	sts	0x0BFE, r24
    17c0:	fe 01       	movw	r30, r28
    17c2:	32 96       	adiw	r30, 0x02	; 2
    17c4:	44 c0       	rjmp	.+136    	; 0x184e <malloc+0x128>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e2 0f       	add	r30, r18
    17ca:	f3 1f       	adc	r31, r19
    17cc:	81 93       	st	Z+, r24
    17ce:	91 93       	st	Z+, r25
    17d0:	22 50       	subi	r18, 0x02	; 2
    17d2:	31 09       	sbc	r19, r1
    17d4:	39 83       	std	Y+1, r19	; 0x01
    17d6:	28 83       	st	Y, r18
    17d8:	3a c0       	rjmp	.+116    	; 0x184e <malloc+0x128>
    17da:	20 91 fc 0b 	lds	r18, 0x0BFC
    17de:	30 91 fd 0b 	lds	r19, 0x0BFD
    17e2:	23 2b       	or	r18, r19
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <malloc+0xd0>
    17e6:	20 91 02 01 	lds	r18, 0x0102
    17ea:	30 91 03 01 	lds	r19, 0x0103
    17ee:	30 93 fd 0b 	sts	0x0BFD, r19
    17f2:	20 93 fc 0b 	sts	0x0BFC, r18
    17f6:	20 91 00 01 	lds	r18, 0x0100
    17fa:	30 91 01 01 	lds	r19, 0x0101
    17fe:	21 15       	cp	r18, r1
    1800:	31 05       	cpc	r19, r1
    1802:	41 f4       	brne	.+16     	; 0x1814 <malloc+0xee>
    1804:	2d b7       	in	r18, 0x3d	; 61
    1806:	3e b7       	in	r19, 0x3e	; 62
    1808:	40 91 04 01 	lds	r20, 0x0104
    180c:	50 91 05 01 	lds	r21, 0x0105
    1810:	24 1b       	sub	r18, r20
    1812:	35 0b       	sbc	r19, r21
    1814:	e0 91 fc 0b 	lds	r30, 0x0BFC
    1818:	f0 91 fd 0b 	lds	r31, 0x0BFD
    181c:	e2 17       	cp	r30, r18
    181e:	f3 07       	cpc	r31, r19
    1820:	a0 f4       	brcc	.+40     	; 0x184a <malloc+0x124>
    1822:	2e 1b       	sub	r18, r30
    1824:	3f 0b       	sbc	r19, r31
    1826:	28 17       	cp	r18, r24
    1828:	39 07       	cpc	r19, r25
    182a:	78 f0       	brcs	.+30     	; 0x184a <malloc+0x124>
    182c:	ac 01       	movw	r20, r24
    182e:	4e 5f       	subi	r20, 0xFE	; 254
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	24 17       	cp	r18, r20
    1834:	35 07       	cpc	r19, r21
    1836:	48 f0       	brcs	.+18     	; 0x184a <malloc+0x124>
    1838:	4e 0f       	add	r20, r30
    183a:	5f 1f       	adc	r21, r31
    183c:	50 93 fd 0b 	sts	0x0BFD, r21
    1840:	40 93 fc 0b 	sts	0x0BFC, r20
    1844:	81 93       	st	Z+, r24
    1846:	91 93       	st	Z+, r25
    1848:	02 c0       	rjmp	.+4      	; 0x184e <malloc+0x128>
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	cf 01       	movw	r24, r30
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <free>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <free+0xa>
    185e:	87 c0       	rjmp	.+270    	; 0x196e <free+0x118>
    1860:	fc 01       	movw	r30, r24
    1862:	32 97       	sbiw	r30, 0x02	; 2
    1864:	13 82       	std	Z+3, r1	; 0x03
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	c0 91 fe 0b 	lds	r28, 0x0BFE
    186c:	d0 91 ff 0b 	lds	r29, 0x0BFF
    1870:	20 97       	sbiw	r28, 0x00	; 0
    1872:	81 f4       	brne	.+32     	; 0x1894 <free+0x3e>
    1874:	20 81       	ld	r18, Z
    1876:	31 81       	ldd	r19, Z+1	; 0x01
    1878:	28 0f       	add	r18, r24
    187a:	39 1f       	adc	r19, r25
    187c:	80 91 fc 0b 	lds	r24, 0x0BFC
    1880:	90 91 fd 0b 	lds	r25, 0x0BFD
    1884:	82 17       	cp	r24, r18
    1886:	93 07       	cpc	r25, r19
    1888:	79 f5       	brne	.+94     	; 0x18e8 <free+0x92>
    188a:	f0 93 fd 0b 	sts	0x0BFD, r31
    188e:	e0 93 fc 0b 	sts	0x0BFC, r30
    1892:	6d c0       	rjmp	.+218    	; 0x196e <free+0x118>
    1894:	de 01       	movw	r26, r28
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	ae 17       	cp	r26, r30
    189c:	bf 07       	cpc	r27, r31
    189e:	50 f4       	brcc	.+20     	; 0x18b4 <free+0x5e>
    18a0:	12 96       	adiw	r26, 0x02	; 2
    18a2:	4d 91       	ld	r20, X+
    18a4:	5c 91       	ld	r21, X
    18a6:	13 97       	sbiw	r26, 0x03	; 3
    18a8:	9d 01       	movw	r18, r26
    18aa:	41 15       	cp	r20, r1
    18ac:	51 05       	cpc	r21, r1
    18ae:	09 f1       	breq	.+66     	; 0x18f2 <free+0x9c>
    18b0:	da 01       	movw	r26, r20
    18b2:	f3 cf       	rjmp	.-26     	; 0x189a <free+0x44>
    18b4:	b3 83       	std	Z+3, r27	; 0x03
    18b6:	a2 83       	std	Z+2, r26	; 0x02
    18b8:	40 81       	ld	r20, Z
    18ba:	51 81       	ldd	r21, Z+1	; 0x01
    18bc:	84 0f       	add	r24, r20
    18be:	95 1f       	adc	r25, r21
    18c0:	8a 17       	cp	r24, r26
    18c2:	9b 07       	cpc	r25, r27
    18c4:	71 f4       	brne	.+28     	; 0x18e2 <free+0x8c>
    18c6:	8d 91       	ld	r24, X+
    18c8:	9c 91       	ld	r25, X
    18ca:	11 97       	sbiw	r26, 0x01	; 1
    18cc:	84 0f       	add	r24, r20
    18ce:	95 1f       	adc	r25, r21
    18d0:	02 96       	adiw	r24, 0x02	; 2
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	8d 91       	ld	r24, X+
    18da:	9c 91       	ld	r25, X
    18dc:	13 97       	sbiw	r26, 0x03	; 3
    18de:	93 83       	std	Z+3, r25	; 0x03
    18e0:	82 83       	std	Z+2, r24	; 0x02
    18e2:	21 15       	cp	r18, r1
    18e4:	31 05       	cpc	r19, r1
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <free+0x9c>
    18e8:	f0 93 ff 0b 	sts	0x0BFF, r31
    18ec:	e0 93 fe 0b 	sts	0x0BFE, r30
    18f0:	3e c0       	rjmp	.+124    	; 0x196e <free+0x118>
    18f2:	d9 01       	movw	r26, r18
    18f4:	13 96       	adiw	r26, 0x03	; 3
    18f6:	fc 93       	st	X, r31
    18f8:	ee 93       	st	-X, r30
    18fa:	12 97       	sbiw	r26, 0x02	; 2
    18fc:	4d 91       	ld	r20, X+
    18fe:	5d 91       	ld	r21, X+
    1900:	a4 0f       	add	r26, r20
    1902:	b5 1f       	adc	r27, r21
    1904:	ea 17       	cp	r30, r26
    1906:	fb 07       	cpc	r31, r27
    1908:	79 f4       	brne	.+30     	; 0x1928 <free+0xd2>
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	84 0f       	add	r24, r20
    1910:	95 1f       	adc	r25, r21
    1912:	02 96       	adiw	r24, 0x02	; 2
    1914:	d9 01       	movw	r26, r18
    1916:	11 96       	adiw	r26, 0x01	; 1
    1918:	9c 93       	st	X, r25
    191a:	8e 93       	st	-X, r24
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	13 96       	adiw	r26, 0x03	; 3
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
    1926:	12 97       	sbiw	r26, 0x02	; 2
    1928:	e0 e0       	ldi	r30, 0x00	; 0
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	19 f0       	breq	.+6      	; 0x193a <free+0xe4>
    1934:	fe 01       	movw	r30, r28
    1936:	ec 01       	movw	r28, r24
    1938:	f9 cf       	rjmp	.-14     	; 0x192c <free+0xd6>
    193a:	ce 01       	movw	r24, r28
    193c:	02 96       	adiw	r24, 0x02	; 2
    193e:	28 81       	ld	r18, Y
    1940:	39 81       	ldd	r19, Y+1	; 0x01
    1942:	82 0f       	add	r24, r18
    1944:	93 1f       	adc	r25, r19
    1946:	20 91 fc 0b 	lds	r18, 0x0BFC
    194a:	30 91 fd 0b 	lds	r19, 0x0BFD
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	69 f4       	brne	.+26     	; 0x196e <free+0x118>
    1954:	30 97       	sbiw	r30, 0x00	; 0
    1956:	29 f4       	brne	.+10     	; 0x1962 <free+0x10c>
    1958:	10 92 ff 0b 	sts	0x0BFF, r1
    195c:	10 92 fe 0b 	sts	0x0BFE, r1
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <free+0x110>
    1962:	13 82       	std	Z+3, r1	; 0x03
    1964:	12 82       	std	Z+2, r1	; 0x02
    1966:	d0 93 fd 0b 	sts	0x0BFD, r29
    196a:	c0 93 fc 0b 	sts	0x0BFC, r28
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <memcmp>:
    1974:	fb 01       	movw	r30, r22
    1976:	dc 01       	movw	r26, r24
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <memcmp+0xe>
    197a:	8d 91       	ld	r24, X+
    197c:	01 90       	ld	r0, Z+
    197e:	80 19       	sub	r24, r0
    1980:	21 f4       	brne	.+8      	; 0x198a <memcmp+0x16>
    1982:	41 50       	subi	r20, 0x01	; 1
    1984:	50 40       	sbci	r21, 0x00	; 0
    1986:	c8 f7       	brcc	.-14     	; 0x197a <memcmp+0x6>
    1988:	88 1b       	sub	r24, r24
    198a:	99 0b       	sbc	r25, r25
    198c:	08 95       	ret

0000198e <memcpy>:
    198e:	fb 01       	movw	r30, r22
    1990:	dc 01       	movw	r26, r24
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <memcpy+0xa>
    1994:	01 90       	ld	r0, Z+
    1996:	0d 92       	st	X+, r0
    1998:	41 50       	subi	r20, 0x01	; 1
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	d8 f7       	brcc	.-10     	; 0x1994 <memcpy+0x6>
    199e:	08 95       	ret

000019a0 <strchr>:
    19a0:	fc 01       	movw	r30, r24
    19a2:	81 91       	ld	r24, Z+
    19a4:	86 17       	cp	r24, r22
    19a6:	21 f0       	breq	.+8      	; 0x19b0 <strchr+0x10>
    19a8:	88 23       	and	r24, r24
    19aa:	d9 f7       	brne	.-10     	; 0x19a2 <strchr+0x2>
    19ac:	99 27       	eor	r25, r25
    19ae:	08 95       	ret
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	cf 01       	movw	r24, r30
    19b4:	08 95       	ret

000019b6 <strcpy>:
    19b6:	fb 01       	movw	r30, r22
    19b8:	dc 01       	movw	r26, r24
    19ba:	01 90       	ld	r0, Z+
    19bc:	0d 92       	st	X+, r0
    19be:	00 20       	and	r0, r0
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <strcpy+0x4>
    19c2:	08 95       	ret

000019c4 <sprintf_P>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	2e 97       	sbiw	r28, 0x0e	; 14
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	0d 89       	ldd	r16, Y+21	; 0x15
    19de:	1e 89       	ldd	r17, Y+22	; 0x16
    19e0:	8e e0       	ldi	r24, 0x0E	; 14
    19e2:	8c 83       	std	Y+4, r24	; 0x04
    19e4:	1a 83       	std	Y+2, r17	; 0x02
    19e6:	09 83       	std	Y+1, r16	; 0x01
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f e7       	ldi	r25, 0x7F	; 127
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	ae 01       	movw	r20, r28
    19f2:	47 5e       	subi	r20, 0xE7	; 231
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	6f 89       	ldd	r22, Y+23	; 0x17
    19f8:	78 8d       	ldd	r23, Y+24	; 0x18
    19fa:	ce 01       	movw	r24, r28
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <vfprintf>
    1a02:	ef 81       	ldd	r30, Y+7	; 0x07
    1a04:	f8 85       	ldd	r31, Y+8	; 0x08
    1a06:	e0 0f       	add	r30, r16
    1a08:	f1 1f       	adc	r31, r17
    1a0a:	10 82       	st	Z, r1
    1a0c:	2e 96       	adiw	r28, 0x0e	; 14
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <vfprintf>:
    1a22:	2f 92       	push	r2
    1a24:	3f 92       	push	r3
    1a26:	4f 92       	push	r4
    1a28:	5f 92       	push	r5
    1a2a:	6f 92       	push	r6
    1a2c:	7f 92       	push	r7
    1a2e:	8f 92       	push	r8
    1a30:	9f 92       	push	r9
    1a32:	af 92       	push	r10
    1a34:	bf 92       	push	r11
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	7c 01       	movw	r14, r24
    1a58:	6b 01       	movw	r12, r22
    1a5a:	8a 01       	movw	r16, r20
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	17 82       	std	Z+7, r1	; 0x07
    1a60:	16 82       	std	Z+6, r1	; 0x06
    1a62:	83 81       	ldd	r24, Z+3	; 0x03
    1a64:	81 ff       	sbrs	r24, 1
    1a66:	bd c1       	rjmp	.+890    	; 0x1de2 <vfprintf+0x3c0>
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	4c 01       	movw	r8, r24
    1a6e:	f7 01       	movw	r30, r14
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	f6 01       	movw	r30, r12
    1a74:	93 fd       	sbrc	r25, 3
    1a76:	85 91       	lpm	r24, Z+
    1a78:	93 ff       	sbrs	r25, 3
    1a7a:	81 91       	ld	r24, Z+
    1a7c:	6f 01       	movw	r12, r30
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <vfprintf+0x62>
    1a82:	ab c1       	rjmp	.+854    	; 0x1dda <vfprintf+0x3b8>
    1a84:	85 32       	cpi	r24, 0x25	; 37
    1a86:	39 f4       	brne	.+14     	; 0x1a96 <vfprintf+0x74>
    1a88:	93 fd       	sbrc	r25, 3
    1a8a:	85 91       	lpm	r24, Z+
    1a8c:	93 ff       	sbrs	r25, 3
    1a8e:	81 91       	ld	r24, Z+
    1a90:	6f 01       	movw	r12, r30
    1a92:	85 32       	cpi	r24, 0x25	; 37
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <vfprintf+0x7e>
    1a96:	b7 01       	movw	r22, r14
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1a9e:	e7 cf       	rjmp	.-50     	; 0x1a6e <vfprintf+0x4c>
    1aa0:	51 2c       	mov	r5, r1
    1aa2:	31 2c       	mov	r3, r1
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	20 32       	cpi	r18, 0x20	; 32
    1aa8:	a0 f4       	brcc	.+40     	; 0x1ad2 <vfprintf+0xb0>
    1aaa:	8b 32       	cpi	r24, 0x2B	; 43
    1aac:	69 f0       	breq	.+26     	; 0x1ac8 <vfprintf+0xa6>
    1aae:	30 f4       	brcc	.+12     	; 0x1abc <vfprintf+0x9a>
    1ab0:	80 32       	cpi	r24, 0x20	; 32
    1ab2:	59 f0       	breq	.+22     	; 0x1aca <vfprintf+0xa8>
    1ab4:	83 32       	cpi	r24, 0x23	; 35
    1ab6:	69 f4       	brne	.+26     	; 0x1ad2 <vfprintf+0xb0>
    1ab8:	20 61       	ori	r18, 0x10	; 16
    1aba:	2c c0       	rjmp	.+88     	; 0x1b14 <vfprintf+0xf2>
    1abc:	8d 32       	cpi	r24, 0x2D	; 45
    1abe:	39 f0       	breq	.+14     	; 0x1ace <vfprintf+0xac>
    1ac0:	80 33       	cpi	r24, 0x30	; 48
    1ac2:	39 f4       	brne	.+14     	; 0x1ad2 <vfprintf+0xb0>
    1ac4:	21 60       	ori	r18, 0x01	; 1
    1ac6:	26 c0       	rjmp	.+76     	; 0x1b14 <vfprintf+0xf2>
    1ac8:	22 60       	ori	r18, 0x02	; 2
    1aca:	24 60       	ori	r18, 0x04	; 4
    1acc:	23 c0       	rjmp	.+70     	; 0x1b14 <vfprintf+0xf2>
    1ace:	28 60       	ori	r18, 0x08	; 8
    1ad0:	21 c0       	rjmp	.+66     	; 0x1b14 <vfprintf+0xf2>
    1ad2:	27 fd       	sbrc	r18, 7
    1ad4:	27 c0       	rjmp	.+78     	; 0x1b24 <vfprintf+0x102>
    1ad6:	30 ed       	ldi	r19, 0xD0	; 208
    1ad8:	38 0f       	add	r19, r24
    1ada:	3a 30       	cpi	r19, 0x0A	; 10
    1adc:	78 f4       	brcc	.+30     	; 0x1afc <vfprintf+0xda>
    1ade:	26 ff       	sbrs	r18, 6
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <vfprintf+0xcc>
    1ae2:	fa e0       	ldi	r31, 0x0A	; 10
    1ae4:	5f 9e       	mul	r5, r31
    1ae6:	30 0d       	add	r19, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	53 2e       	mov	r5, r19
    1aec:	13 c0       	rjmp	.+38     	; 0x1b14 <vfprintf+0xf2>
    1aee:	8a e0       	ldi	r24, 0x0A	; 10
    1af0:	38 9e       	mul	r3, r24
    1af2:	30 0d       	add	r19, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	33 2e       	mov	r3, r19
    1af8:	20 62       	ori	r18, 0x20	; 32
    1afa:	0c c0       	rjmp	.+24     	; 0x1b14 <vfprintf+0xf2>
    1afc:	8e 32       	cpi	r24, 0x2E	; 46
    1afe:	21 f4       	brne	.+8      	; 0x1b08 <vfprintf+0xe6>
    1b00:	26 fd       	sbrc	r18, 6
    1b02:	6b c1       	rjmp	.+726    	; 0x1dda <vfprintf+0x3b8>
    1b04:	20 64       	ori	r18, 0x40	; 64
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <vfprintf+0xf2>
    1b08:	8c 36       	cpi	r24, 0x6C	; 108
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <vfprintf+0xee>
    1b0c:	20 68       	ori	r18, 0x80	; 128
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <vfprintf+0xf2>
    1b10:	88 36       	cpi	r24, 0x68	; 104
    1b12:	41 f4       	brne	.+16     	; 0x1b24 <vfprintf+0x102>
    1b14:	f6 01       	movw	r30, r12
    1b16:	93 fd       	sbrc	r25, 3
    1b18:	85 91       	lpm	r24, Z+
    1b1a:	93 ff       	sbrs	r25, 3
    1b1c:	81 91       	ld	r24, Z+
    1b1e:	6f 01       	movw	r12, r30
    1b20:	81 11       	cpse	r24, r1
    1b22:	c1 cf       	rjmp	.-126    	; 0x1aa6 <vfprintf+0x84>
    1b24:	98 2f       	mov	r25, r24
    1b26:	9f 7d       	andi	r25, 0xDF	; 223
    1b28:	95 54       	subi	r25, 0x45	; 69
    1b2a:	93 30       	cpi	r25, 0x03	; 3
    1b2c:	28 f4       	brcc	.+10     	; 0x1b38 <vfprintf+0x116>
    1b2e:	0c 5f       	subi	r16, 0xFC	; 252
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	ff e3       	ldi	r31, 0x3F	; 63
    1b34:	f9 83       	std	Y+1, r31	; 0x01
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <vfprintf+0x130>
    1b38:	83 36       	cpi	r24, 0x63	; 99
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <vfprintf+0x126>
    1b3c:	83 37       	cpi	r24, 0x73	; 115
    1b3e:	71 f0       	breq	.+28     	; 0x1b5c <vfprintf+0x13a>
    1b40:	83 35       	cpi	r24, 0x53	; 83
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <vfprintf+0x124>
    1b44:	5b c0       	rjmp	.+182    	; 0x1bfc <vfprintf+0x1da>
    1b46:	22 c0       	rjmp	.+68     	; 0x1b8c <vfprintf+0x16a>
    1b48:	f8 01       	movw	r30, r16
    1b4a:	80 81       	ld	r24, Z
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	0e 5f       	subi	r16, 0xFE	; 254
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	44 24       	eor	r4, r4
    1b54:	43 94       	inc	r4
    1b56:	51 2c       	mov	r5, r1
    1b58:	54 01       	movw	r10, r8
    1b5a:	15 c0       	rjmp	.+42     	; 0x1b86 <vfprintf+0x164>
    1b5c:	38 01       	movw	r6, r16
    1b5e:	f2 e0       	ldi	r31, 0x02	; 2
    1b60:	6f 0e       	add	r6, r31
    1b62:	71 1c       	adc	r7, r1
    1b64:	f8 01       	movw	r30, r16
    1b66:	a0 80       	ld	r10, Z
    1b68:	b1 80       	ldd	r11, Z+1	; 0x01
    1b6a:	26 ff       	sbrs	r18, 6
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <vfprintf+0x152>
    1b6e:	65 2d       	mov	r22, r5
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <vfprintf+0x156>
    1b74:	6f ef       	ldi	r22, 0xFF	; 255
    1b76:	7f ef       	ldi	r23, 0xFF	; 255
    1b78:	c5 01       	movw	r24, r10
    1b7a:	2c 87       	std	Y+12, r18	; 0x0c
    1b7c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <strnlen>
    1b80:	2c 01       	movw	r4, r24
    1b82:	83 01       	movw	r16, r6
    1b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b86:	2f 77       	andi	r18, 0x7F	; 127
    1b88:	22 2e       	mov	r2, r18
    1b8a:	17 c0       	rjmp	.+46     	; 0x1bba <vfprintf+0x198>
    1b8c:	38 01       	movw	r6, r16
    1b8e:	f2 e0       	ldi	r31, 0x02	; 2
    1b90:	6f 0e       	add	r6, r31
    1b92:	71 1c       	adc	r7, r1
    1b94:	f8 01       	movw	r30, r16
    1b96:	a0 80       	ld	r10, Z
    1b98:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9a:	26 ff       	sbrs	r18, 6
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <vfprintf+0x182>
    1b9e:	65 2d       	mov	r22, r5
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x186>
    1ba4:	6f ef       	ldi	r22, 0xFF	; 255
    1ba6:	7f ef       	ldi	r23, 0xFF	; 255
    1ba8:	c5 01       	movw	r24, r10
    1baa:	2c 87       	std	Y+12, r18	; 0x0c
    1bac:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <strnlen_P>
    1bb0:	2c 01       	movw	r4, r24
    1bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb4:	20 68       	ori	r18, 0x80	; 128
    1bb6:	22 2e       	mov	r2, r18
    1bb8:	83 01       	movw	r16, r6
    1bba:	23 fc       	sbrc	r2, 3
    1bbc:	1b c0       	rjmp	.+54     	; 0x1bf4 <vfprintf+0x1d2>
    1bbe:	83 2d       	mov	r24, r3
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	48 16       	cp	r4, r24
    1bc4:	59 06       	cpc	r5, r25
    1bc6:	b0 f4       	brcc	.+44     	; 0x1bf4 <vfprintf+0x1d2>
    1bc8:	b7 01       	movw	r22, r14
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1bd2:	3a 94       	dec	r3
    1bd4:	f4 cf       	rjmp	.-24     	; 0x1bbe <vfprintf+0x19c>
    1bd6:	f5 01       	movw	r30, r10
    1bd8:	27 fc       	sbrc	r2, 7
    1bda:	85 91       	lpm	r24, Z+
    1bdc:	27 fe       	sbrs	r2, 7
    1bde:	81 91       	ld	r24, Z+
    1be0:	5f 01       	movw	r10, r30
    1be2:	b7 01       	movw	r22, r14
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1bea:	31 10       	cpse	r3, r1
    1bec:	3a 94       	dec	r3
    1bee:	f1 e0       	ldi	r31, 0x01	; 1
    1bf0:	4f 1a       	sub	r4, r31
    1bf2:	51 08       	sbc	r5, r1
    1bf4:	41 14       	cp	r4, r1
    1bf6:	51 04       	cpc	r5, r1
    1bf8:	71 f7       	brne	.-36     	; 0x1bd6 <vfprintf+0x1b4>
    1bfa:	e5 c0       	rjmp	.+458    	; 0x1dc6 <vfprintf+0x3a4>
    1bfc:	84 36       	cpi	r24, 0x64	; 100
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <vfprintf+0x1e2>
    1c00:	89 36       	cpi	r24, 0x69	; 105
    1c02:	39 f5       	brne	.+78     	; 0x1c52 <vfprintf+0x230>
    1c04:	f8 01       	movw	r30, r16
    1c06:	27 ff       	sbrs	r18, 7
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <vfprintf+0x1f6>
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	0c 5f       	subi	r16, 0xFC	; 252
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <vfprintf+0x206>
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	88 27       	eor	r24, r24
    1c1e:	77 fd       	sbrc	r23, 7
    1c20:	80 95       	com	r24
    1c22:	98 2f       	mov	r25, r24
    1c24:	0e 5f       	subi	r16, 0xFE	; 254
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	2f 76       	andi	r18, 0x6F	; 111
    1c2a:	b2 2e       	mov	r11, r18
    1c2c:	97 ff       	sbrs	r25, 7
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <vfprintf+0x220>
    1c30:	90 95       	com	r25
    1c32:	80 95       	com	r24
    1c34:	70 95       	com	r23
    1c36:	61 95       	neg	r22
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	20 68       	ori	r18, 0x80	; 128
    1c40:	b2 2e       	mov	r11, r18
    1c42:	2a e0       	ldi	r18, 0x0A	; 10
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	a4 01       	movw	r20, r8
    1c48:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__ultoa_invert>
    1c4c:	a8 2e       	mov	r10, r24
    1c4e:	a8 18       	sub	r10, r8
    1c50:	44 c0       	rjmp	.+136    	; 0x1cda <vfprintf+0x2b8>
    1c52:	85 37       	cpi	r24, 0x75	; 117
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <vfprintf+0x23e>
    1c56:	2f 7e       	andi	r18, 0xEF	; 239
    1c58:	b2 2e       	mov	r11, r18
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	25 c0       	rjmp	.+74     	; 0x1caa <vfprintf+0x288>
    1c60:	f2 2f       	mov	r31, r18
    1c62:	f9 7f       	andi	r31, 0xF9	; 249
    1c64:	bf 2e       	mov	r11, r31
    1c66:	8f 36       	cpi	r24, 0x6F	; 111
    1c68:	c1 f0       	breq	.+48     	; 0x1c9a <vfprintf+0x278>
    1c6a:	18 f4       	brcc	.+6      	; 0x1c72 <vfprintf+0x250>
    1c6c:	88 35       	cpi	r24, 0x58	; 88
    1c6e:	79 f0       	breq	.+30     	; 0x1c8e <vfprintf+0x26c>
    1c70:	b4 c0       	rjmp	.+360    	; 0x1dda <vfprintf+0x3b8>
    1c72:	80 37       	cpi	r24, 0x70	; 112
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <vfprintf+0x25a>
    1c76:	88 37       	cpi	r24, 0x78	; 120
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <vfprintf+0x260>
    1c7a:	af c0       	rjmp	.+350    	; 0x1dda <vfprintf+0x3b8>
    1c7c:	2f 2f       	mov	r18, r31
    1c7e:	20 61       	ori	r18, 0x10	; 16
    1c80:	b2 2e       	mov	r11, r18
    1c82:	b4 fe       	sbrs	r11, 4
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <vfprintf+0x27e>
    1c86:	8b 2d       	mov	r24, r11
    1c88:	84 60       	ori	r24, 0x04	; 4
    1c8a:	b8 2e       	mov	r11, r24
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <vfprintf+0x27e>
    1c8e:	24 ff       	sbrs	r18, 4
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <vfprintf+0x284>
    1c92:	9f 2f       	mov	r25, r31
    1c94:	96 60       	ori	r25, 0x06	; 6
    1c96:	b9 2e       	mov	r11, r25
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x284>
    1c9a:	28 e0       	ldi	r18, 0x08	; 8
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <vfprintf+0x288>
    1ca0:	20 e1       	ldi	r18, 0x10	; 16
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x288>
    1ca6:	20 e1       	ldi	r18, 0x10	; 16
    1ca8:	32 e0       	ldi	r19, 0x02	; 2
    1caa:	f8 01       	movw	r30, r16
    1cac:	b7 fe       	sbrs	r11, 7
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <vfprintf+0x29c>
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	0c 5f       	subi	r16, 0xFC	; 252
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <vfprintf+0x2a8>
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 5f       	subi	r16, 0xFE	; 254
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	a4 01       	movw	r20, r8
    1ccc:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__ultoa_invert>
    1cd0:	a8 2e       	mov	r10, r24
    1cd2:	a8 18       	sub	r10, r8
    1cd4:	fb 2d       	mov	r31, r11
    1cd6:	ff 77       	andi	r31, 0x7F	; 127
    1cd8:	bf 2e       	mov	r11, r31
    1cda:	b6 fe       	sbrs	r11, 6
    1cdc:	0b c0       	rjmp	.+22     	; 0x1cf4 <vfprintf+0x2d2>
    1cde:	2b 2d       	mov	r18, r11
    1ce0:	2e 7f       	andi	r18, 0xFE	; 254
    1ce2:	a5 14       	cp	r10, r5
    1ce4:	50 f4       	brcc	.+20     	; 0x1cfa <vfprintf+0x2d8>
    1ce6:	b4 fe       	sbrs	r11, 4
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <vfprintf+0x2dc>
    1cea:	b2 fc       	sbrc	r11, 2
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <vfprintf+0x2dc>
    1cee:	2b 2d       	mov	r18, r11
    1cf0:	2e 7e       	andi	r18, 0xEE	; 238
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <vfprintf+0x2dc>
    1cf4:	7a 2c       	mov	r7, r10
    1cf6:	2b 2d       	mov	r18, r11
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <vfprintf+0x2de>
    1cfa:	7a 2c       	mov	r7, r10
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <vfprintf+0x2de>
    1cfe:	75 2c       	mov	r7, r5
    1d00:	24 ff       	sbrs	r18, 4
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <vfprintf+0x2fc>
    1d04:	fe 01       	movw	r30, r28
    1d06:	ea 0d       	add	r30, r10
    1d08:	f1 1d       	adc	r31, r1
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 33       	cpi	r24, 0x30	; 48
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <vfprintf+0x2f2>
    1d10:	29 7e       	andi	r18, 0xE9	; 233
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <vfprintf+0x304>
    1d14:	22 ff       	sbrs	r18, 2
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <vfprintf+0x302>
    1d18:	73 94       	inc	r7
    1d1a:	73 94       	inc	r7
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <vfprintf+0x304>
    1d1e:	82 2f       	mov	r24, r18
    1d20:	86 78       	andi	r24, 0x86	; 134
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <vfprintf+0x304>
    1d24:	73 94       	inc	r7
    1d26:	23 fd       	sbrc	r18, 3
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <vfprintf+0x32e>
    1d2a:	20 ff       	sbrs	r18, 0
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <vfprintf+0x318>
    1d2e:	5a 2c       	mov	r5, r10
    1d30:	73 14       	cp	r7, r3
    1d32:	18 f4       	brcc	.+6      	; 0x1d3a <vfprintf+0x318>
    1d34:	53 0c       	add	r5, r3
    1d36:	57 18       	sub	r5, r7
    1d38:	73 2c       	mov	r7, r3
    1d3a:	73 14       	cp	r7, r3
    1d3c:	68 f4       	brcc	.+26     	; 0x1d58 <vfprintf+0x336>
    1d3e:	b7 01       	movw	r22, r14
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	2c 87       	std	Y+12, r18	; 0x0c
    1d46:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1d4a:	73 94       	inc	r7
    1d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d4e:	f5 cf       	rjmp	.-22     	; 0x1d3a <vfprintf+0x318>
    1d50:	73 14       	cp	r7, r3
    1d52:	10 f4       	brcc	.+4      	; 0x1d58 <vfprintf+0x336>
    1d54:	37 18       	sub	r3, r7
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <vfprintf+0x338>
    1d58:	31 2c       	mov	r3, r1
    1d5a:	24 ff       	sbrs	r18, 4
    1d5c:	12 c0       	rjmp	.+36     	; 0x1d82 <vfprintf+0x360>
    1d5e:	b7 01       	movw	r22, r14
    1d60:	80 e3       	ldi	r24, 0x30	; 48
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	2c 87       	std	Y+12, r18	; 0x0c
    1d66:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1d6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d6c:	22 ff       	sbrs	r18, 2
    1d6e:	17 c0       	rjmp	.+46     	; 0x1d9e <vfprintf+0x37c>
    1d70:	21 ff       	sbrs	r18, 1
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <vfprintf+0x358>
    1d74:	88 e5       	ldi	r24, 0x58	; 88
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <vfprintf+0x35c>
    1d7a:	88 e7       	ldi	r24, 0x78	; 120
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	b7 01       	movw	r22, r14
    1d80:	0c c0       	rjmp	.+24     	; 0x1d9a <vfprintf+0x378>
    1d82:	82 2f       	mov	r24, r18
    1d84:	86 78       	andi	r24, 0x86	; 134
    1d86:	59 f0       	breq	.+22     	; 0x1d9e <vfprintf+0x37c>
    1d88:	21 fd       	sbrc	r18, 1
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <vfprintf+0x36e>
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <vfprintf+0x370>
    1d90:	8b e2       	ldi	r24, 0x2B	; 43
    1d92:	27 fd       	sbrc	r18, 7
    1d94:	8d e2       	ldi	r24, 0x2D	; 45
    1d96:	b7 01       	movw	r22, r14
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1d9e:	a5 14       	cp	r10, r5
    1da0:	38 f4       	brcc	.+14     	; 0x1db0 <vfprintf+0x38e>
    1da2:	b7 01       	movw	r22, r14
    1da4:	80 e3       	ldi	r24, 0x30	; 48
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1dac:	5a 94       	dec	r5
    1dae:	f7 cf       	rjmp	.-18     	; 0x1d9e <vfprintf+0x37c>
    1db0:	aa 94       	dec	r10
    1db2:	f4 01       	movw	r30, r8
    1db4:	ea 0d       	add	r30, r10
    1db6:	f1 1d       	adc	r31, r1
    1db8:	80 81       	ld	r24, Z
    1dba:	b7 01       	movw	r22, r14
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1dc2:	a1 10       	cpse	r10, r1
    1dc4:	f5 cf       	rjmp	.-22     	; 0x1db0 <vfprintf+0x38e>
    1dc6:	33 20       	and	r3, r3
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <vfprintf+0x3aa>
    1dca:	51 ce       	rjmp	.-862    	; 0x1a6e <vfprintf+0x4c>
    1dcc:	b7 01       	movw	r22, r14
    1dce:	80 e2       	ldi	r24, 0x20	; 32
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <fputc>
    1dd6:	3a 94       	dec	r3
    1dd8:	f6 cf       	rjmp	.-20     	; 0x1dc6 <vfprintf+0x3a4>
    1dda:	f7 01       	movw	r30, r14
    1ddc:	86 81       	ldd	r24, Z+6	; 0x06
    1dde:	97 81       	ldd	r25, Z+7	; 0x07
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfprintf+0x3c4>
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	2c 96       	adiw	r28, 0x0c	; 12
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	9f 90       	pop	r9
    1e08:	8f 90       	pop	r8
    1e0a:	7f 90       	pop	r7
    1e0c:	6f 90       	pop	r6
    1e0e:	5f 90       	pop	r5
    1e10:	4f 90       	pop	r4
    1e12:	3f 90       	pop	r3
    1e14:	2f 90       	pop	r2
    1e16:	08 95       	ret

00001e18 <__eerd_byte_m1284p>:
    1e18:	f9 99       	sbic	0x1f, 1	; 31
    1e1a:	fe cf       	rjmp	.-4      	; 0x1e18 <__eerd_byte_m1284p>
    1e1c:	92 bd       	out	0x22, r25	; 34
    1e1e:	81 bd       	out	0x21, r24	; 33
    1e20:	f8 9a       	sbi	0x1f, 0	; 31
    1e22:	99 27       	eor	r25, r25
    1e24:	80 b5       	in	r24, 0x20	; 32
    1e26:	08 95       	ret

00001e28 <__eewr_byte_m1284p>:
    1e28:	26 2f       	mov	r18, r22

00001e2a <__eewr_r18_m1284p>:
    1e2a:	f9 99       	sbic	0x1f, 1	; 31
    1e2c:	fe cf       	rjmp	.-4      	; 0x1e2a <__eewr_r18_m1284p>
    1e2e:	1f ba       	out	0x1f, r1	; 31
    1e30:	92 bd       	out	0x22, r25	; 34
    1e32:	81 bd       	out	0x21, r24	; 33
    1e34:	20 bd       	out	0x20, r18	; 32
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	fa 9a       	sbi	0x1f, 2	; 31
    1e3c:	f9 9a       	sbi	0x1f, 1	; 31
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	08 95       	ret

00001e44 <strnlen_P>:
    1e44:	fc 01       	movw	r30, r24
    1e46:	05 90       	lpm	r0, Z+
    1e48:	61 50       	subi	r22, 0x01	; 1
    1e4a:	70 40       	sbci	r23, 0x00	; 0
    1e4c:	01 10       	cpse	r0, r1
    1e4e:	d8 f7       	brcc	.-10     	; 0x1e46 <strnlen_P+0x2>
    1e50:	80 95       	com	r24
    1e52:	90 95       	com	r25
    1e54:	8e 0f       	add	r24, r30
    1e56:	9f 1f       	adc	r25, r31
    1e58:	08 95       	ret

00001e5a <strnlen>:
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	61 50       	subi	r22, 0x01	; 1
    1e5e:	70 40       	sbci	r23, 0x00	; 0
    1e60:	01 90       	ld	r0, Z+
    1e62:	01 10       	cpse	r0, r1
    1e64:	d8 f7       	brcc	.-10     	; 0x1e5c <strnlen+0x2>
    1e66:	80 95       	com	r24
    1e68:	90 95       	com	r25
    1e6a:	8e 0f       	add	r24, r30
    1e6c:	9f 1f       	adc	r25, r31
    1e6e:	08 95       	ret

00001e70 <fputc>:
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	18 2f       	mov	r17, r24
    1e7a:	09 2f       	mov	r16, r25
    1e7c:	eb 01       	movw	r28, r22
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	81 fd       	sbrc	r24, 1
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <fputc+0x1a>
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	20 c0       	rjmp	.+64     	; 0x1eca <fputc+0x5a>
    1e8a:	82 ff       	sbrs	r24, 2
    1e8c:	10 c0       	rjmp	.+32     	; 0x1eae <fputc+0x3e>
    1e8e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e90:	5f 81       	ldd	r21, Y+7	; 0x07
    1e92:	2c 81       	ldd	r18, Y+4	; 0x04
    1e94:	3d 81       	ldd	r19, Y+5	; 0x05
    1e96:	42 17       	cp	r20, r18
    1e98:	53 07       	cpc	r21, r19
    1e9a:	7c f4       	brge	.+30     	; 0x1eba <fputc+0x4a>
    1e9c:	e8 81       	ld	r30, Y
    1e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea0:	9f 01       	movw	r18, r30
    1ea2:	2f 5f       	subi	r18, 0xFF	; 255
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	39 83       	std	Y+1, r19	; 0x01
    1ea8:	28 83       	st	Y, r18
    1eaa:	10 83       	st	Z, r17
    1eac:	06 c0       	rjmp	.+12     	; 0x1eba <fputc+0x4a>
    1eae:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb0:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb2:	81 2f       	mov	r24, r17
    1eb4:	09 95       	icall
    1eb6:	89 2b       	or	r24, r25
    1eb8:	29 f7       	brne	.-54     	; 0x1e84 <fputc+0x14>
    1eba:	2e 81       	ldd	r18, Y+6	; 0x06
    1ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ebe:	2f 5f       	subi	r18, 0xFF	; 255
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	3f 83       	std	Y+7, r19	; 0x07
    1ec4:	2e 83       	std	Y+6, r18	; 0x06
    1ec6:	81 2f       	mov	r24, r17
    1ec8:	90 2f       	mov	r25, r16
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <__ultoa_invert>:
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	aa 27       	eor	r26, r26
    1ed8:	28 30       	cpi	r18, 0x08	; 8
    1eda:	51 f1       	breq	.+84     	; 0x1f30 <__ultoa_invert+0x5c>
    1edc:	20 31       	cpi	r18, 0x10	; 16
    1ede:	81 f1       	breq	.+96     	; 0x1f40 <__ultoa_invert+0x6c>
    1ee0:	e8 94       	clt
    1ee2:	6f 93       	push	r22
    1ee4:	6e 7f       	andi	r22, 0xFE	; 254
    1ee6:	6e 5f       	subi	r22, 0xFE	; 254
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 4f       	sbci	r24, 0xFF	; 255
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	af 4f       	sbci	r26, 0xFF	; 255
    1ef0:	b1 e0       	ldi	r27, 0x01	; 1
    1ef2:	3e d0       	rcall	.+124    	; 0x1f70 <__ultoa_invert+0x9c>
    1ef4:	b4 e0       	ldi	r27, 0x04	; 4
    1ef6:	3c d0       	rcall	.+120    	; 0x1f70 <__ultoa_invert+0x9c>
    1ef8:	67 0f       	add	r22, r23
    1efa:	78 1f       	adc	r23, r24
    1efc:	89 1f       	adc	r24, r25
    1efe:	9a 1f       	adc	r25, r26
    1f00:	a1 1d       	adc	r26, r1
    1f02:	68 0f       	add	r22, r24
    1f04:	79 1f       	adc	r23, r25
    1f06:	8a 1f       	adc	r24, r26
    1f08:	91 1d       	adc	r25, r1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	6a 0f       	add	r22, r26
    1f0e:	71 1d       	adc	r23, r1
    1f10:	81 1d       	adc	r24, r1
    1f12:	91 1d       	adc	r25, r1
    1f14:	a1 1d       	adc	r26, r1
    1f16:	20 d0       	rcall	.+64     	; 0x1f58 <__ultoa_invert+0x84>
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <__ultoa_invert+0x48>
    1f1a:	68 94       	set
    1f1c:	3f 91       	pop	r19
    1f1e:	2a e0       	ldi	r18, 0x0A	; 10
    1f20:	26 9f       	mul	r18, r22
    1f22:	11 24       	eor	r1, r1
    1f24:	30 19       	sub	r19, r0
    1f26:	30 5d       	subi	r19, 0xD0	; 208
    1f28:	31 93       	st	Z+, r19
    1f2a:	de f6       	brtc	.-74     	; 0x1ee2 <__ultoa_invert+0xe>
    1f2c:	cf 01       	movw	r24, r30
    1f2e:	08 95       	ret
    1f30:	46 2f       	mov	r20, r22
    1f32:	47 70       	andi	r20, 0x07	; 7
    1f34:	40 5d       	subi	r20, 0xD0	; 208
    1f36:	41 93       	st	Z+, r20
    1f38:	b3 e0       	ldi	r27, 0x03	; 3
    1f3a:	0f d0       	rcall	.+30     	; 0x1f5a <__ultoa_invert+0x86>
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__ultoa_invert+0x5c>
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <__ultoa_invert+0x58>
    1f40:	46 2f       	mov	r20, r22
    1f42:	4f 70       	andi	r20, 0x0F	; 15
    1f44:	40 5d       	subi	r20, 0xD0	; 208
    1f46:	4a 33       	cpi	r20, 0x3A	; 58
    1f48:	18 f0       	brcs	.+6      	; 0x1f50 <__ultoa_invert+0x7c>
    1f4a:	49 5d       	subi	r20, 0xD9	; 217
    1f4c:	31 fd       	sbrc	r19, 1
    1f4e:	40 52       	subi	r20, 0x20	; 32
    1f50:	41 93       	st	Z+, r20
    1f52:	02 d0       	rcall	.+4      	; 0x1f58 <__ultoa_invert+0x84>
    1f54:	a9 f7       	brne	.-22     	; 0x1f40 <__ultoa_invert+0x6c>
    1f56:	ea cf       	rjmp	.-44     	; 0x1f2c <__ultoa_invert+0x58>
    1f58:	b4 e0       	ldi	r27, 0x04	; 4
    1f5a:	a6 95       	lsr	r26
    1f5c:	97 95       	ror	r25
    1f5e:	87 95       	ror	r24
    1f60:	77 95       	ror	r23
    1f62:	67 95       	ror	r22
    1f64:	ba 95       	dec	r27
    1f66:	c9 f7       	brne	.-14     	; 0x1f5a <__ultoa_invert+0x86>
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	61 05       	cpc	r22, r1
    1f6c:	71 05       	cpc	r23, r1
    1f6e:	08 95       	ret
    1f70:	9b 01       	movw	r18, r22
    1f72:	ac 01       	movw	r20, r24
    1f74:	0a 2e       	mov	r0, r26
    1f76:	06 94       	lsr	r0
    1f78:	57 95       	ror	r21
    1f7a:	47 95       	ror	r20
    1f7c:	37 95       	ror	r19
    1f7e:	27 95       	ror	r18
    1f80:	ba 95       	dec	r27
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <__ultoa_invert+0xa2>
    1f84:	62 0f       	add	r22, r18
    1f86:	73 1f       	adc	r23, r19
    1f88:	84 1f       	adc	r24, r20
    1f8a:	95 1f       	adc	r25, r21
    1f8c:	a0 1d       	adc	r26, r0
    1f8e:	08 95       	ret

00001f90 <_exit>:
    1f90:	f8 94       	cli

00001f92 <__stop_program>:
    1f92:	ff cf       	rjmp	.-2      	; 0x1f92 <__stop_program>
